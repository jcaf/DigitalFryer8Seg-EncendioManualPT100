
DigitalFryerDisplay8Seg-EncendidoManual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036d8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004b8  00800060  000036d8  0000378c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002cd  00800518  00800518  00003c44  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00003c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00003c4e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003c60  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000006b0  00000000  00000000  00003c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00007e0b  00000000  00000000  0000434c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00002e9a  00000000  00000000  0000c157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000074b1  00000000  00000000  0000eff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000f4c  00000000  00000000  000164a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00001b44  00000000  00000000  000173f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 0000057b  00000000  00000000  00018f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00001f43  00000000  00000000  000194af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000005b1  00000000  00000000  0001b3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5

00000062 <.Loc.1>:
      62:	a0 e6       	ldi	r26, 0x60	; 96

00000064 <.Loc.2>:
      64:	b0 e0       	ldi	r27, 0x00	; 0

00000066 <.Loc.3>:
      66:	e8 ed       	ldi	r30, 0xD8	; 216

00000068 <.Loc.4>:
      68:	f6 e3       	ldi	r31, 0x36	; 54

0000006a <.Loc.5>:
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.L__do_copy_data_start>

0000006c <.L__do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+

0000006e <.Loc.7>:
      6e:	0d 92       	st	X+, r0

00000070 <.L__do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24

00000072 <.Loc.9>:
      72:	b1 07       	cpc	r27, r17

00000074 <.Loc.10>:
      74:	d9 f7       	brne	.-10     	; 0x6c <.L__do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7

00000078 <.Loc.1>:
      78:	a8 e1       	ldi	r26, 0x18	; 24

0000007a <.Loc.2>:
      7a:	b5 e0       	ldi	r27, 0x05	; 5

0000007c <.Loc.3>:
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.Loc.5>

0000007e <.Loc.4>:
      7e:	1d 92       	st	X+, r1

00000080 <.Loc.5>:
      80:	a5 3e       	cpi	r26, 0xE5	; 229

00000082 <.Loc.6>:
      82:	b2 07       	cpc	r27, r18

00000084 <.Loc.7>:
      84:	e1 f7       	brne	.-8      	; 0x7e <.Loc.4>

00000086 <L0^A>:
      86:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <main>
      8a:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <integer_to_arraybcd_msb_lsb>:
}
#endif

#ifdef _int2arrayBCD_MSB2LSB_
int integer_to_arraybcd_msb_lsb(int binaryInput, unsigned char *output)
{
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	cf 93       	push	r28
      9c:	df 93       	push	r29
      9e:	9c 01       	movw	r18, r24
      a0:	eb 01       	movw	r28, r22

000000a2 <.LVL1>:
	int num_digits=0;
	//if is negative, then return with number of digits equal to 0
    if (binaryInput<0)
    {
        return num_digits;//0;
      a2:	e0 e0       	ldi	r30, 0x00	; 0
      a4:	f0 e0       	ldi	r31, 0x00	; 0

000000a6 <.Loc.5>:
    if (binaryInput<0)
      a6:	97 fd       	sbrc	r25, 7
      a8:	1e c0       	rjmp	.+60     	; 0xe6 <.L1>
      aa:	8b 01       	movw	r16, r22
      ac:	7b 01       	movw	r14, r22

000000ae <.Loc.6>:
	int num_digits=0;
      ae:	e0 e0       	ldi	r30, 0x00	; 0
      b0:	f0 e0       	ldi	r31, 0x00	; 0

000000b2 <.L3>:

    //if is >0, at least the number of digits must be 1 onwards
    //int shift=0;
    do
    {
      int x = (binaryInput % 10);
      b2:	c9 01       	movw	r24, r18
      b4:	6a e0       	ldi	r22, 0x0A	; 10
      b6:	70 e0       	ldi	r23, 0x00	; 0
      b8:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__divmodhi4>

000000bc <.Loc.9>:
      //int y = x<< (shift++ << 2);
      //bcdResult |= y;
      output[num_digits++] = x;
      bc:	af 01       	movw	r20, r30

000000be <.Loc.10>:
      be:	31 96       	adiw	r30, 0x01	; 1

000000c0 <.Loc.11>:
      c0:	d7 01       	movw	r26, r14
      c2:	8d 93       	st	X+, r24
      c4:	7d 01       	movw	r14, r26

000000c6 <.Loc.12>:
      binaryInput /= 10;
      c6:	c9 01       	movw	r24, r18

000000c8 <.Loc.13>:
      c8:	9b 01       	movw	r18, r22

000000ca <.LBE2>:
   }while (binaryInput > 0);
      ca:	0a 97       	sbiw	r24, 0x0a	; 10
      cc:	94 f7       	brge	.-28     	; 0xb2 <.L3>

000000ce <.LBB3>:
   if (1)//(shift > 0)
   {
       int k = num_digits>>1;//div por 2
       int z = num_digits-1;
       unsigned char tmp;
        for (int i=0; i<k; i++)
      ce:	da 01       	movw	r26, r20
      d0:	ac 0f       	add	r26, r28
      d2:	bd 1f       	adc	r27, r29

000000d4 <.Loc.23>:
       int k = num_digits>>1;//div por 2
      d4:	cf 01       	movw	r24, r30
      d6:	95 95       	asr	r25
      d8:	87 95       	ror	r24

000000da <.Loc.24>:
      da:	ae 01       	movw	r20, r28

000000dc <.Loc.25>:
      dc:	48 0f       	add	r20, r24
      de:	59 1f       	adc	r21, r25

000000e0 <.L4>:
        for (int i=0; i<k; i++)
      e0:	04 17       	cp	r16, r20
      e2:	15 07       	cpc	r17, r21
      e4:	41 f4       	brne	.+16     	; 0xf6 <.L5>

000000e6 <.L1>:
            z--;
        }
   }
   //
   return num_digits;
}
      e6:	cf 01       	movw	r24, r30
      e8:	df 91       	pop	r29
      ea:	cf 91       	pop	r28
      ec:	1f 91       	pop	r17
      ee:	0f 91       	pop	r16
      f0:	ff 90       	pop	r15
      f2:	ef 90       	pop	r14
      f4:	08 95       	ret

000000f6 <.L5>:
            tmp = output[i];
      f6:	e8 01       	movw	r28, r16
      f8:	89 91       	ld	r24, Y+
      fa:	8e 01       	movw	r16, r28

000000fc <.LVL13>:
            output[i] = output[z];
      fc:	9c 91       	ld	r25, X

000000fe <.Loc.33>:
      fe:	9e 01       	movw	r18, r28
     100:	21 50       	subi	r18, 0x01	; 1
     102:	31 09       	sbc	r19, r1
     104:	e9 01       	movw	r28, r18
     106:	98 83       	st	Y, r25

00000108 <.Loc.34>:
            output[z] = tmp;
     108:	8c 93       	st	X, r24

0000010a <.Loc.36>:
        for (int i=0; i<k; i++)
     10a:	11 97       	sbiw	r26, 0x01	; 1
     10c:	e9 cf       	rjmp	.-46     	; 0xe0 <.L4>

0000010e <paddingLeftw_>:
 */

#if defined (_paddingLeftwBlanks_) || defined (_paddingLeftwZeroes_)

int8_t paddingLeftw_(char *istr, int ndigs_format, char c)
{
     10e:	af 92       	push	r10
     110:	bf 92       	push	r11
     112:	cf 92       	push	r12
     114:	df 92       	push	r13
     116:	ef 92       	push	r14
     118:	ff 92       	push	r15
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	00 d0       	rcall	.+0      	; 0x124 <L0^A>

00000124 <L0^A>:
     124:	00 d0       	rcall	.+0      	; 0x126 <L0^A>

00000126 <L0^A>:
     126:	0f 92       	push	r0
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	8c 83       	std	Y+4, r24	; 0x04
     12e:	9d 83       	std	Y+5, r25	; 0x05
     130:	8b 01       	movw	r16, r22
     132:	4b 83       	std	Y+3, r20	; 0x03

00000134 <.Loc.41>:
	if (ndigs_format < strlen(istr) )
     134:	fc 01       	movw	r30, r24

00000136 <.L0^B1>:
     136:	01 90       	ld	r0, Z+
     138:	00 20       	and	r0, r0
     13a:	e9 f7       	brne	.-6      	; 0x136 <.L0^B1>
     13c:	31 97       	sbiw	r30, 0x01	; 1
     13e:	e8 1b       	sub	r30, r24
     140:	f9 0b       	sbc	r31, r25

00000142 <.Loc.43>:
     142:	6e 17       	cp	r22, r30
     144:	7f 07       	cpc	r23, r31
     146:	48 f0       	brcs	.+18     	; 0x15a <.L24>
     148:	6c 01       	movw	r12, r24
     14a:	fc 01       	movw	r30, r24

0000014c <.Loc.44>:
			return 0;

		//find position '\0'
		int cz;
		for (cz=0; cz<ndigs_format; cz++)
     14c:	80 e0       	ldi	r24, 0x00	; 0

0000014e <.Loc.45>:
     14e:	90 e0       	ldi	r25, 0x00	; 0

00000150 <.L10>:
     150:	80 17       	cp	r24, r16
     152:	91 07       	cpc	r25, r17
     154:	24 f0       	brlt	.+8      	; 0x15e <.L14>

00000156 <.Loc.47>:
			if (istr[cz] == '\0')
				break;
		//count zeroes found >0

		if ( (cz == 0) || (cz == ndigs_format) )
     156:	00 97       	sbiw	r24, 0x00	; 0
     158:	51 f4       	brne	.+20     	; 0x16e <.L26>

0000015a <.L24>:
			return 0;
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	23 c0       	rjmp	.+70     	; 0x1a4 <.L8>

0000015e <.L14>:
			if (istr[cz] == '\0')
     15e:	20 81       	ld	r18, Z
     160:	21 11       	cpse	r18, r1
     162:	02 c0       	rjmp	.+4      	; 0x168 <.L25>

00000164 <.Loc.52>:
		if ( (cz == 0) || (cz == ndigs_format) )
     164:	00 97       	sbiw	r24, 0x00	; 0
     166:	05 c0       	rjmp	.+10     	; 0x172 <.L28>

00000168 <.L25>:
     168:	31 96       	adiw	r30, 0x01	; 1

0000016a <.Loc.55>:
		for (cz=0; cz<ndigs_format; cz++)
     16a:	01 96       	adiw	r24, 0x01	; 1

0000016c <.Loc.56>:
     16c:	f1 cf       	rjmp	.-30     	; 0x150 <.L10>

0000016e <.L26>:
		if ( (cz == 0) || (cz == ndigs_format) )
     16e:	80 17       	cp	r24, r16
     170:	91 07       	cpc	r25, r17

00000172 <.L28>:
     172:	99 f3       	breq	.-26     	; 0x15a <.L24>

00000174 <.Loc.59>:
				return 0;

		istr[ndigs_format] = '\0';
     174:	ec 81       	ldd	r30, Y+4	; 0x04
     176:	fd 81       	ldd	r31, Y+5	; 0x05
     178:	e0 0f       	add	r30, r16
     17a:	f1 1f       	adc	r31, r17
     17c:	10 82       	st	Z, r1

0000017e <.LBB8>:

		//move >>
		for (int i=0; i< ndigs_format-cz; i++)
     17e:	e1 2c       	mov	r14, r1
     180:	f1 2c       	mov	r15, r1

00000182 <.Loc.64>:
     182:	58 01       	movw	r10, r16
     184:	a8 1a       	sub	r10, r24
     186:	b9 0a       	sbc	r11, r25

00000188 <.LBB9>:
		{
			for (int j = ndigs_format-1; j>=0; j--)
			{
				istr[j] = istr[j-1];
     188:	8c 81       	ldd	r24, Y+4	; 0x04

0000018a <.Loc.66>:
     18a:	9d 81       	ldd	r25, Y+5	; 0x05
     18c:	01 97       	sbiw	r24, 0x01	; 1
     18e:	89 83       	std	Y+1, r24	; 0x01
     190:	9a 83       	std	Y+2, r25	; 0x02

00000192 <.L16>:
		for (int i=0; i< ndigs_format-cz; i++)
     192:	ea 14       	cp	r14, r10
     194:	fb 04       	cpc	r15, r11
     196:	b4 f0       	brlt	.+44     	; 0x1c4 <.L17>

00000198 <.LBB11>:
			}
		}
		//complete with 'c' to left
		for (int i=0; i < ndigs_format-cz; i++)
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	90 e0       	ldi	r25, 0x00	; 0

0000019c <.L18>:
     19c:	8a 15       	cp	r24, r10
     19e:	9b 05       	cpc	r25, r11
     1a0:	e4 f0       	brlt	.+56     	; 0x1da <.L19>

000001a2 <.Loc.71>:
			istr[i]=c;

		return 1;
     1a2:	81 e0       	ldi	r24, 0x01	; 1

000001a4 <.L8>:
	}
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16

000001b6 <.Loc.73>:
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	bf 90       	pop	r11
     1c0:	af 90       	pop	r10
     1c2:	08 95       	ret

000001c4 <.L17>:
				istr[j] = istr[j-1];
     1c4:	a8 01       	movw	r20, r16
     1c6:	69 81       	ldd	r22, Y+1	; 0x01
     1c8:	7a 81       	ldd	r23, Y+2	; 0x02
     1ca:	8c 81       	ldd	r24, Y+4	; 0x04
     1cc:	9d 81       	ldd	r25, Y+5	; 0x05
     1ce:	0e 94 0f 1b 	call	0x361e	; 0x361e <memmove>

000001d2 <.LVL29>:
		for (int i=0; i< ndigs_format-cz; i++)
     1d2:	9f ef       	ldi	r25, 0xFF	; 255
     1d4:	e9 1a       	sub	r14, r25
     1d6:	f9 0a       	sbc	r15, r25

000001d8 <.Loc.80>:
     1d8:	dc cf       	rjmp	.-72     	; 0x192 <.L16>

000001da <.L19>:
			istr[i]=c;
     1da:	f6 01       	movw	r30, r12
     1dc:	2b 81       	ldd	r18, Y+3	; 0x03
     1de:	21 93       	st	Z+, r18
     1e0:	6f 01       	movw	r12, r30

000001e2 <.Loc.84>:
		for (int i=0; i < ndigs_format-cz; i++)
     1e2:	01 96       	adiw	r24, 0x01	; 1

000001e4 <.Loc.85>:
     1e4:	db cf       	rjmp	.-74     	; 0x19c <.L18>

000001e6 <paddingLeftwZeroes>:

	#ifdef _paddingLeftwZeroes_
	int8_t paddingLeftwZeroes(char *istr, int ndigs_format)
	{
		return paddingLeftw_(istr, ndigs_format, '0');
     1e6:	40 e3       	ldi	r20, 0x30	; 48
     1e8:	0c 94 87 00 	jmp	0x10e	; 0x10e <paddingLeftw_>

000001ec <paddingLeftwBlanks>:
	#endif

	#ifdef _paddingLeftwBlanks_
	int8_t paddingLeftwBlanks(char *istr, int ndigs_format)
	{
		return paddingLeftw_(istr, ndigs_format, ' ');
     1ec:	40 e2       	ldi	r20, 0x20	; 32
     1ee:	0c 94 87 00 	jmp	0x10e	; 0x10e <paddingLeftw_>

000001f2 <USART_Init>:
#include "../serial/serial.h"

void USART_Init( unsigned int ubrr)
{
    /*Set baud rate */
    UBRRH = (unsigned char)(ubrr>>8);
     1f2:	90 bd       	out	0x20, r25	; 32

000001f4 <.Loc.3>:
    UBRRL = (unsigned char)ubrr;
     1f4:	89 b9       	out	0x09, r24	; 9

000001f6 <.Loc.5>:
    /*Enable receiver and transmitter */
    UCSRB = (0<<RXEN)|(1<<TXEN) | (0<<RXCIE);//Enable interrupt;
     1f6:	88 e0       	ldi	r24, 0x08	; 8

000001f8 <.Loc.7>:
     1f8:	8a b9       	out	0x0a, r24	; 10

000001fa <.Loc.8>:
    /* Set frame format: 8data, 1stop bit */
    //UCSRC = (0<<USBS)|(3<<UCSZ0);
    //UCSRC = (1<<URSEL)|(0<<USBS)|(3<<UCSZ0);
    UCSRB = (1<<RXEN)|(1<<TXEN);
     1fa:	88 e1       	ldi	r24, 0x18	; 24
     1fc:	8a b9       	out	0x0a, r24	; 10

000001fe <.Loc.10>:
    /* Set frame format: 8data, 2stop bit */
    UCSRC = (1<<URSEL)|(0<<USBS)|(3<<UCSZ0);
     1fe:	86 e8       	ldi	r24, 0x86	; 134
     200:	80 bd       	out	0x20, r24	; 32

00000202 <.Loc.12>:

    //
    //UCSRA = 1<<U2X;
}
     202:	08 95       	ret

00000204 <USART_Transmit>:
void USART_Transmit( unsigned char data )
{
    /* Wait for empty transmit buffer */
    while ( !( UCSRA & (1<<UDRE)) )
     204:	5d 9b       	sbis	0x0b, 5	; 11
     206:	fe cf       	rjmp	.-4      	; 0x204 <USART_Transmit>

00000208 <.Loc.15>:
        ;
    /* Put data into buffer, sends the data */
    UDR = data;
     208:	8c b9       	out	0x0c, r24	; 12

0000020a <.Loc.17>:
}
     20a:	08 95       	ret

0000020c <USART_Receive>:
unsigned char USART_Receive( void )
{
    /* Wait for data to be received */
    while ( !(UCSRA & (1<<RXC)) )
     20c:	5f 9b       	sbis	0x0b, 7	; 11
     20e:	fe cf       	rjmp	.-4      	; 0x20c <USART_Receive>

00000210 <.Loc.20>:
        ;
    /* Get and return received data from buffer */
    return UDR;
     210:	8c b1       	in	r24, 0x0c	; 12

00000212 <.Loc.22>:
}
     212:	08 95       	ret

00000214 <USART_RX_vect>:
//    unsigned char dummy;
//    while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
//}

ISR(USART_RX_vect)
{
     214:	1f 92       	push	r1
     216:	0f 92       	push	r0
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	0f 92       	push	r0
     21c:	11 24       	eor	r1, r1
     21e:	2f 93       	push	r18
     220:	3f 93       	push	r19
     222:	4f 93       	push	r20
     224:	5f 93       	push	r21
     226:	6f 93       	push	r22
     228:	7f 93       	push	r23
     22a:	8f 93       	push	r24
     22c:	9f 93       	push	r25
     22e:	af 93       	push	r26
     230:	bf 93       	push	r27
     232:	ef 93       	push	r30
     234:	ff 93       	push	r31

00000236 <.Loc.24>:
    //uint8_t _udr_rx = UDR0;
    //USART_Transmit(_udr_rx);
    //uint8_t u = UDR;
    rx_handler();
     236:	0e 94 14 04 	call	0x828	; 0x828 <rx_handler>

0000023a <.LVL3>:
}
     23a:	ff 91       	pop	r31
     23c:	ef 91       	pop	r30
     23e:	bf 91       	pop	r27
     240:	af 91       	pop	r26
     242:	9f 91       	pop	r25
     244:	8f 91       	pop	r24
     246:	7f 91       	pop	r23
     248:	6f 91       	pop	r22
     24a:	5f 91       	pop	r21
     24c:	4f 91       	pop	r20
     24e:	3f 91       	pop	r19
     250:	2f 91       	pop	r18
     252:	0f 90       	pop	r0
     254:	0f be       	out	0x3f, r0	; 63
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <usart_print_string>:
//////////////////////////////////////////////

void usart_print_string(const char *p)
{
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	ec 01       	movw	r28, r24

00000262 <.L11>:
    while (*p)
     262:	88 81       	ld	r24, Y
     264:	81 11       	cpse	r24, r1
     266:	03 c0       	rjmp	.+6      	; 0x26e <.L12>

00000268 <.Loc.30>:
    {
        USART_Transmit(*p);
        p++;
    }
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28

0000026c <.Loc.31>:
     26c:	08 95       	ret

0000026e <.L12>:
     26e:	21 96       	adiw	r28, 0x01	; 1

00000270 <.Loc.33>:
        USART_Transmit(*p);
     270:	0e 94 02 01 	call	0x204	; 0x204 <USART_Transmit>

00000274 <.LVL9>:
        p++;
     274:	f6 cf       	rjmp	.-20     	; 0x262 <.L11>

00000276 <usart_println_string>:

void usart_println_string(const char *p)
{
    usart_print_string(p);
     276:	0e 94 2e 01 	call	0x25c	; 0x25c <usart_print_string>

0000027a <.LVL11>:
    USART_Transmit('\n');
     27a:	8a e0       	ldi	r24, 0x0A	; 10
     27c:	0c 94 02 01 	jmp	0x204	; 0x204 <USART_Transmit>

00000280 <usart_print_PSTRstring>:

#if defined(__GNUC__) && defined(__AVR__)
    #include <avr/pgmspace.h>

    void usart_print_PSTRstring(const char *p)
    {
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	ec 01       	movw	r28, r24

00000286 <.L16>:
        char c;

        while (1)
        {
            c = pgm_read_byte_near(p);
     286:	fe 01       	movw	r30, r28
     288:	84 91       	lpm	r24, Z

0000028a <.LBE2>:
            if (c == '\0')
     28a:	81 15       	cp	r24, r1
     28c:	21 f0       	breq	.+8      	; 0x296 <.L14>

0000028e <.Loc.50>:
                break;
            else
                USART_Transmit(c);
     28e:	0e 94 02 01 	call	0x204	; 0x204 <USART_Transmit>

00000292 <.LVL16>:
            p++;
     292:	21 96       	adiw	r28, 0x01	; 1

00000294 <.Loc.53>:
            c = pgm_read_byte_near(p);
     294:	f8 cf       	rjmp	.-16     	; 0x286 <.L16>

00000296 <.L14>:
        }
    }
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28

0000029a <.Loc.56>:
     29a:	08 95       	ret

0000029c <usart_println_PSTRstring>:

    void usart_println_PSTRstring(const char *p)
    {
        usart_print_PSTRstring(p);
     29c:	0e 94 40 01 	call	0x280	; 0x280 <usart_print_PSTRstring>

000002a0 <.LVL21>:
        USART_Transmit('\n');
     2a0:	8a e0       	ldi	r24, 0x0A	; 10
     2a2:	0c 94 02 01 	jmp	0x204	; 0x204 <USART_Transmit>

000002a6 <time_set>:
#include <stdlib.h>
#include "timing.h"

void time_set(struct _t *pt)
{
}
     2a6:	08 95       	ret

000002a8 <time_dec>:

/*
 * return: 1 if 0:0:0
 */
int8_t time_dec(struct _t *pt)
{
     2a8:	fc 01       	movw	r30, r24

000002aa <.Loc.4>:
				#endif
				return 1;//time is already 00:00:00
		//

	#else
		if (pt->sec == TIME_SEC_NUMMIN)
     2aa:	81 81       	ldd	r24, Z+1	; 0x01

000002ac <.Loc.6>:
     2ac:	81 11       	cpse	r24, r1
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <.L3>

000002b0 <.Loc.7>:
				if (pt->min == TIME_MINUTES_NUMMIN)
     2b0:	90 81       	ld	r25, Z
     2b2:	91 15       	cp	r25, r1
     2b4:	91 f0       	breq	.+36     	; 0x2da <.L9>

000002b6 <.L3>:
					#endif
					return 1;//time is already 00:00:00
	#endif

	//Anything to do
	pt->sec--;
     2b6:	81 50       	subi	r24, 0x01	; 1
     2b8:	81 83       	std	Z+1, r24	; 0x01

000002ba <.Loc.11>:
				#ifdef TIME_HOURS_EXIST
					if (pt->hour == pt->hour_limbottom)
				#endif
				return 1;//time is already 00:00:00
	#else
		if (pt->sec == TIME_SEC_NUMMIN)
     2ba:	81 15       	cp	r24, r1
     2bc:	31 f4       	brne	.+12     	; 0x2ca <.L5>

000002be <.Loc.13>:
				if (pt->min == TIME_MINUTES_NUMMIN)
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 81       	ld	r25, Z
     2c2:	91 15       	cp	r25, r1
     2c4:	59 f0       	breq	.+22     	; 0x2dc <.L2>

000002c6 <.L8>:
			pt->min = TIME_MINUTES_NUMMAX;
			pt->hour--;
		}
		#endif
	}
	return 0;
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	08 95       	ret

000002ca <.L5>:
	if (pt->sec < TIME_SEC_NUMMIN)
     2ca:	0c f0       	brlt	.+2      	; 0x2ce <.L7>
     2cc:	fc cf       	rjmp	.-8      	; 0x2c6 <.L8>

000002ce <.L7>:
		pt->sec = TIME_SEC_NUMMAX;
     2ce:	8b e3       	ldi	r24, 0x3B	; 59
     2d0:	81 83       	std	Z+1, r24	; 0x01

000002d2 <.Loc.20>:
		pt->min--;
     2d2:	80 81       	ld	r24, Z
     2d4:	81 50       	subi	r24, 0x01	; 1
     2d6:	80 83       	st	Z, r24
     2d8:	f6 cf       	rjmp	.-20     	; 0x2c6 <.L8>

000002da <.L9>:
					return 1;//time is already 00:00:00
     2da:	81 e0       	ldi	r24, 0x01	; 1

000002dc <.L2>:
}
     2dc:	08 95       	ret

000002de <time_inc>:

/*
 * return: 1 if 0:0:0
 */
int8_t time_inc(struct _t *pt)
{
     2de:	fc 01       	movw	r30, r24

000002e0 <.Loc.26>:
				if (pt->min == pt->min_limtop)
					if (pt->sec > pt->sec_limtop)
						return 1;

	#else
		if (pt->sec == TIME_SEC_NUMMAX)
     2e0:	21 81       	ldd	r18, Z+1	; 0x01

000002e2 <.Loc.28>:
			if (pt->min == TIME_MINUTES_NUMMAX)
     2e2:	90 81       	ld	r25, Z

000002e4 <.Loc.29>:
		if (pt->sec == TIME_SEC_NUMMAX)
     2e4:	2b 33       	cpi	r18, 0x3B	; 59
     2e6:	21 f4       	brne	.+8      	; 0x2f0 <.L14>

000002e8 <.Loc.30>:
			if (pt->min == TIME_MINUTES_NUMMAX)
     2e8:	9b 33       	cpi	r25, 0x3B	; 59
     2ea:	31 f4       	brne	.+12     	; 0x2f8 <.L30>

000002ec <.L25>:
				#ifdef TIME_HOURS_EXIST
					if (pt->hour == TIME_HOURS_NUMMAX)
				#endif
				return 1;
     2ec:	81 e0       	ldi	r24, 0x01	; 1

000002ee <.Loc.33>:
     2ee:	08 95       	ret

000002f0 <.L14>:

		#ifdef TIME_HOURS_EXIST
			if (pt->hour > TIME_HOURS_NUMMAX)
				return 1;
		#endif
			if (pt->min > TIME_MINUTES_NUMMAX)
     2f0:	9b 33       	cpi	r25, 0x3B	; 59
     2f2:	1c f0       	brlt	.+6      	; 0x2fa <.L17>

000002f4 <.Loc.36>:
				return 1;
			else
				if (pt->min == TIME_MINUTES_NUMMAX)
     2f4:	d9 f7       	brne	.-10     	; 0x2ec <.L25>

000002f6 <.Loc.38>:
					if (pt->sec > TIME_SEC_NUMMAX)
     2f6:	2c 33       	cpi	r18, 0x3C	; 60

000002f8 <.L30>:
     2f8:	cc f7       	brge	.-14     	; 0x2ec <.L25>

000002fa <.L17>:
						return 1;
	#endif

	//Anything to do
	pt->sec++;
     2fa:	2f 5f       	subi	r18, 0xFF	; 255
     2fc:	21 83       	std	Z+1, r18	; 0x01

000002fe <.Loc.42>:
				#ifdef TIME_HOURS_EXIST
					if (pt->hour == pt->hour_limtop)
				#endif
						return 1;//time is already 00:00:00
	#else
		if (pt->sec == TIME_SEC_NUMMAX)
     2fe:	2b 33       	cpi	r18, 0x3B	; 59
     300:	29 f4       	brne	.+10     	; 0x30c <.L18>

00000302 <.Loc.44>:
			if (pt->min == TIME_MINUTES_NUMMAX)
     302:	81 e0       	ldi	r24, 0x01	; 1

00000304 <.Loc.46>:
     304:	9b 33       	cpi	r25, 0x3B	; 59
     306:	41 f0       	breq	.+16     	; 0x318 <.L13>

00000308 <.L21>:
			pt->hour++;
		}
		#endif

	}
	return 0;
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	08 95       	ret

0000030c <.L18>:
	if (pt->sec > TIME_SEC_NUMMAX)
     30c:	0c f4       	brge	.+2      	; 0x310 <.L20>
     30e:	fc cf       	rjmp	.-8      	; 0x308 <.L21>

00000310 <.L20>:
		pt->sec = TIME_SEC_NUMMIN;
     310:	11 82       	std	Z+1, r1	; 0x01

00000312 <.Loc.52>:
		pt->min++;
     312:	9f 5f       	subi	r25, 0xFF	; 255
     314:	90 83       	st	Z, r25
     316:	f8 cf       	rjmp	.-16     	; 0x308 <.L21>

00000318 <.L13>:
}
     318:	08 95       	ret

0000031a <termopile_job>:
	return 0;
}


int8_t termopile_job(void)
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	00 d0       	rcall	.+0      	; 0x320 <L0^A>

00000320 <L0^A>:
     320:	00 d0       	rcall	.+0      	; 0x322 <L0^A>

00000322 <L0^A>:
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62

00000326 <.LVL0>:
	int8_t codret = 0;

	float smoothAnswer = 0;
     326:	19 82       	std	Y+1, r1	; 0x01
     328:	1a 82       	std	Y+2, r1	; 0x02
     32a:	1b 82       	std	Y+3, r1	; 0x03
     32c:	1c 82       	std	Y+4, r1	; 0x04

0000032e <.Loc.4>:

	if (termopila.sm0 == 0)
     32e:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <termopila>
     332:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <termopila+0x1>
     336:	89 2b       	or	r24, r25
     338:	39 f5       	brne	.+78     	; 0x388 <.L2>

0000033a <.LBB4>:
	uint8_t adclow = ADCL;
     33a:	44 b1       	in	r20, 0x04	; 4

0000033c <.LVL1>:
	uint16_t adc16 = (((uint16_t)ADCH)<<8) + adclow;
     33c:	25 b1       	in	r18, 0x05	; 5

0000033e <.LVL2>:
	smoothVector[job_captureTermopile.counter0] = adc16;
     33e:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <job_captureTermopile+0x1>
     342:	90 91 5c 07 	lds	r25, 0x075C	; 0x80075c <job_captureTermopile+0x2>

00000346 <.Loc.14>:
     346:	fc 01       	movw	r30, r24
     348:	ee 0f       	add	r30, r30
     34a:	ff 1f       	adc	r31, r31
     34c:	eb 5c       	subi	r30, 0xCB	; 203
     34e:	fa 4f       	sbci	r31, 0xFA	; 250
     350:	40 83       	st	Z, r20
     352:	21 83       	std	Z+1, r18	; 0x01

00000354 <.Loc.15>:
	if (++job_captureTermopile.counter0 >= TERMOPILE_SMOOTHALG_MAXSIZE)
     354:	01 96       	adiw	r24, 0x01	; 1

00000356 <.Loc.17>:
     356:	8c 33       	cpi	r24, 0x3C	; 60
     358:	91 05       	cpc	r25, r1
     35a:	60 f4       	brcc	.+24     	; 0x374 <.L3>
     35c:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <job_captureTermopile+0x1>
     360:	90 93 5c 07 	sts	0x075C, r25	; 0x80075c <job_captureTermopile+0x2>

00000364 <.L5>:
	int8_t codret = 0;
     364:	80 e0       	ldi	r24, 0x00	; 0

00000366 <.L1>:
			termopila.sm0 = 0x00;
			codret = 1;	//fin del proceso
		}
	}
	return codret;
}
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <.L3>:
		job_captureTermopile.counter0 = 0x00;
     374:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <job_captureTermopile+0x1>
     378:	10 92 5c 07 	sts	0x075C, r1	; 0x80075c <job_captureTermopile+0x2>

0000037c <.Loc.23>:
			termopila.sm0++;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <termopila>
     382:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <termopila+0x1>
     386:	ee cf       	rjmp	.-36     	; 0x364 <.L5>

00000388 <.L2>:
		if (smoothAlg_nonblock(&smoothAlg_termopile, smoothVector, TERMOPILE_SMOOTHALG_MAXSIZE, &smoothAnswer))
     388:	9e 01       	movw	r18, r28
     38a:	2f 5f       	subi	r18, 0xFF	; 255
     38c:	3f 4f       	sbci	r19, 0xFF	; 255
     38e:	4c e3       	ldi	r20, 0x3C	; 60
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	65 e3       	ldi	r22, 0x35	; 53
     394:	75 e0       	ldi	r23, 0x05	; 5
     396:	84 e2       	ldi	r24, 0x24	; 36
     398:	95 e0       	ldi	r25, 0x05	; 5
     39a:	0e 94 09 02 	call	0x412	; 0x412 <smoothAlg_nonblock>

0000039e <.LVL7>:
     39e:	81 15       	cp	r24, r1
     3a0:	09 f3       	breq	.-62     	; 0x364 <.L5>

000003a2 <.Loc.30>:
			if ( (uint16_t)smoothAnswer < (uint16_t)TERMOPILA_ADC_VALUE )
     3a2:	69 81       	ldd	r22, Y+1	; 0x01
     3a4:	7a 81       	ldd	r23, Y+2	; 0x02
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	9c 81       	ldd	r25, Y+4	; 0x04
     3aa:	0e 94 bc 19 	call	0x3378	; 0x3378 <__fixunssfsi>

000003ae <.LVL8>:
     3ae:	6b 33       	cpi	r22, 0x3B	; 59
     3b0:	71 05       	cpc	r23, r1
     3b2:	48 f4       	brcc	.+18     	; 0x3c6 <.L7>

000003b4 <.Loc.33>:
				termopila.error_counter++;
     3b4:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <termopila+0x8>
     3b8:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <termopila+0x9>
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <termopila+0x8>
     3c2:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <termopila+0x9>

000003c6 <.L7>:
			if (++termopila.counter0 >= 2)
     3c6:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <termopila+0x4>
     3ca:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <termopila+0x5>
     3ce:	01 96       	adiw	r24, 0x01	; 1

000003d0 <.Loc.37>:
     3d0:	82 30       	cpi	r24, 0x02	; 2
     3d2:	91 05       	cpc	r25, r1
     3d4:	54 f4       	brge	.+20     	; 0x3ea <.L8>
     3d6:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <termopila+0x4>
     3da:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <termopila+0x5>

000003de <.L9>:
			termopila.sm0 = 0x00;
     3de:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <termopila>
     3e2:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <termopila+0x1>

000003e6 <.Loc.40>:
			codret = 1;	//fin del proceso
     3e6:	81 e0       	ldi	r24, 0x01	; 1

000003e8 <.Loc.42>:
	return codret;
     3e8:	be cf       	rjmp	.-132    	; 0x366 <.L1>

000003ea <.L8>:
				termopila.counter0 = 0;
     3ea:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <termopila+0x4>
     3ee:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <termopila+0x5>

000003f2 <.Loc.46>:
				if (termopila.error_counter >=2)
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	20 91 22 05 	lds	r18, 0x0522	; 0x800522 <termopila+0x8>
     3f8:	30 91 23 05 	lds	r19, 0x0523	; 0x800523 <termopila+0x9>
     3fc:	22 30       	cpi	r18, 0x02	; 2
     3fe:	31 05       	cpc	r19, r1
     400:	0c f4       	brge	.+2      	; 0x404 <.L10>
     402:	80 e0       	ldi	r24, 0x00	; 0

00000404 <.L10>:
					e.sensor[ERROR_IDX_THERMOPILE].code = 1;//ERROR
     404:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <e+0x7>

00000408 <.Loc.49>:
				termopila.error_counter = 0;
     408:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <termopila+0x8>
     40c:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <termopila+0x9>
     410:	e6 cf       	rjmp	.-52     	; 0x3de <.L9>

00000412 <smoothAlg_nonblock>:
 */
#include <stdint.h>
#include "smoothAlg.h"

int8_t smoothAlg_nonblock(struct _smoothAlg *smooth, uint16_t *buffer, int SMOOTHALG_MAXSIZE, float *Answer)
{
     412:	4f 92       	push	r4
     414:	5f 92       	push	r5
     416:	6f 92       	push	r6
     418:	7f 92       	push	r7
     41a:	8f 92       	push	r8
     41c:	9f 92       	push	r9
     41e:	af 92       	push	r10
     420:	bf 92       	push	r11
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <L0^A>

00000434 <L0^A>:
     434:	00 d0       	rcall	.+0      	; 0x436 <L0^A>

00000436 <L0^A>:
     436:	00 d0       	rcall	.+0      	; 0x438 <L0^A>

00000438 <L0^A>:
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	8b 83       	std	Y+3, r24	; 0x03
     43e:	9c 83       	std	Y+4, r25	; 0x04
     440:	8a 01       	movw	r16, r20
     442:	29 83       	std	Y+1, r18	; 0x01
     444:	3a 83       	std	Y+2, r19	; 0x02

00000446 <.Loc.2>:
//	static int16_t Neg;	//# de elementos > que la media
//	static float TD;	//Total Deviation
//

	//1- Calculate media
	if (smooth->sm0 == 0)
     446:	fc 01       	movw	r30, r24
     448:	80 81       	ld	r24, Z

0000044a <.Loc.4>:
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	a0 f5       	brcc	.+104    	; 0x4b6 <.L2>

0000044e <.Loc.5>:
	{
		smooth->average = 0;
     44e:	13 82       	std	Z+3, r1	; 0x03
     450:	14 82       	std	Z+4, r1	; 0x04
     452:	15 82       	std	Z+5, r1	; 0x05
     454:	16 82       	std	Z+6, r1	; 0x06

00000456 <.Loc.7>:
		smooth->counter0 = 0x0;
     456:	11 82       	std	Z+1, r1	; 0x01
     458:	12 82       	std	Z+2, r1	; 0x02

0000045a <.Loc.10>:
		smooth->sm0++;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 83       	st	Z, r24

0000045e <.L3>:
	}
	if (smooth->sm0 == 1)
	{
		smooth->average +=buffer[smooth->counter0];
     45e:	eb 81       	ldd	r30, Y+3	; 0x03

00000460 <.Loc.14>:
     460:	fc 81       	ldd	r31, Y+4	; 0x04
     462:	e1 80       	ldd	r14, Z+1	; 0x01
     464:	f2 80       	ldd	r15, Z+2	; 0x02

00000466 <.Loc.15>:
     466:	c7 01       	movw	r24, r14
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25

0000046c <.Loc.16>:
     46c:	86 0f       	add	r24, r22
     46e:	97 1f       	adc	r25, r23

00000470 <.Loc.17>:
     470:	fc 01       	movw	r30, r24
     472:	60 81       	ld	r22, Z

00000474 <.Loc.18>:
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__floatunsisf>

0000047e <.LVL5>:
     47e:	eb 81       	ldd	r30, Y+3	; 0x03
     480:	fc 81       	ldd	r31, Y+4	; 0x04
     482:	23 81       	ldd	r18, Z+3	; 0x03
     484:	34 81       	ldd	r19, Z+4	; 0x04
     486:	45 81       	ldd	r20, Z+5	; 0x05
     488:	56 81       	ldd	r21, Z+6	; 0x06
     48a:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__addsf3>

0000048e <.LVL6>:
     48e:	4b 01       	movw	r8, r22
     490:	5c 01       	movw	r10, r24
     492:	eb 81       	ldd	r30, Y+3	; 0x03
     494:	fc 81       	ldd	r31, Y+4	; 0x04
     496:	63 83       	std	Z+3, r22	; 0x03
     498:	94 82       	std	Z+4, r9	; 0x04
     49a:	85 83       	std	Z+5, r24	; 0x05
     49c:	b6 82       	std	Z+6, r11	; 0x06

0000049e <.Loc.20>:

		if (++smooth->counter0 >= SMOOTHALG_MAXSIZE)
     49e:	ff ef       	ldi	r31, 0xFF	; 255
     4a0:	ef 1a       	sub	r14, r31
     4a2:	ff 0a       	sbc	r15, r31

000004a4 <.Loc.22>:
		{
			smooth->counter0 = 0x00;//bug fixed
     4a4:	eb 81       	ldd	r30, Y+3	; 0x03
     4a6:	fc 81       	ldd	r31, Y+4	; 0x04

000004a8 <.Loc.23>:
		if (++smooth->counter0 >= SMOOTHALG_MAXSIZE)
     4a8:	e0 16       	cp	r14, r16
     4aa:	f1 06       	cpc	r15, r17
     4ac:	08 f0       	brcs	.+2      	; 0x4b0 <.L19>

000004ae <L0^A>:
     4ae:	b1 c0       	rjmp	.+354    	; 0x612 <.L5>

000004b0 <.L19>:
		if (buffer[smooth->counter0] < smooth->average)
		{
			smooth->Neg++;
		}
		//
		if (++smooth->counter0 >= SMOOTHALG_MAXSIZE)
     4b0:	e1 82       	std	Z+1, r14	; 0x01
     4b2:	f2 82       	std	Z+2, r15	; 0x02
     4b4:	cc c0       	rjmp	.+408    	; 0x64e <.L6>

000004b6 <.L2>:
	if (smooth->sm0 == 1)
     4b6:	99 f2       	breq	.-90     	; 0x45e <.L3>

000004b8 <.Loc.27>:
	else if (smooth->sm0 == 2)
     4b8:	82 30       	cpi	r24, 0x02	; 2
     4ba:	09 f0       	breq	.+2      	; 0x4be <.Loc.29>

000004bc <L0^A>:
     4bc:	c8 c0       	rjmp	.+400    	; 0x64e <.L6>

000004be <.Loc.29>:
		if (buffer[smooth->counter0] > smooth->average)
     4be:	eb 81       	ldd	r30, Y+3	; 0x03

000004c0 <.Loc.31>:
     4c0:	fc 81       	ldd	r31, Y+4	; 0x04
     4c2:	e1 80       	ldd	r14, Z+1	; 0x01
     4c4:	f2 80       	ldd	r15, Z+2	; 0x02

000004c6 <.Loc.32>:
     4c6:	67 01       	movw	r12, r14
     4c8:	cc 0c       	add	r12, r12
     4ca:	dd 1c       	adc	r13, r13
     4cc:	c6 0e       	add	r12, r22
     4ce:	d7 1e       	adc	r13, r23

000004d0 <.Loc.33>:
     4d0:	f6 01       	movw	r30, r12
     4d2:	60 81       	ld	r22, Z

000004d4 <.Loc.34>:
     4d4:	71 81       	ldd	r23, Z+1	; 0x01
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__floatunsisf>

000004de <.LVL10>:
     4de:	2b 01       	movw	r4, r22
     4e0:	3c 01       	movw	r6, r24

000004e2 <.Loc.36>:
     4e2:	eb 81       	ldd	r30, Y+3	; 0x03
     4e4:	fc 81       	ldd	r31, Y+4	; 0x04
     4e6:	83 80       	ldd	r8, Z+3	; 0x03
     4e8:	94 80       	ldd	r9, Z+4	; 0x04
     4ea:	a5 80       	ldd	r10, Z+5	; 0x05
     4ec:	b6 80       	ldd	r11, Z+6	; 0x06

000004ee <.Loc.37>:
     4ee:	94 01       	movw	r18, r8
     4f0:	a5 01       	movw	r20, r10
     4f2:	0e 94 9d 1a 	call	0x353a	; 0x353a <__gesf2>

000004f6 <.LVL11>:
     4f6:	18 16       	cp	r1, r24
     4f8:	24 f5       	brge	.+72     	; 0x542 <.L9>

000004fa <.Loc.38>:
			smooth->Pos++;
     4fa:	eb 81       	ldd	r30, Y+3	; 0x03
     4fc:	fc 81       	ldd	r31, Y+4	; 0x04
     4fe:	87 81       	ldd	r24, Z+7	; 0x07
     500:	90 85       	ldd	r25, Z+8	; 0x08
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	87 83       	std	Z+7, r24	; 0x07
     506:	90 87       	std	Z+8, r25	; 0x08

00000508 <.Loc.40>:
			smooth->TD += ( ((float)(buffer[smooth->counter0]))-smooth->average);//Find |Dtotal|
     508:	f6 01       	movw	r30, r12
     50a:	60 81       	ld	r22, Z
     50c:	71 81       	ldd	r23, Z+1	; 0x01
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__floatunsisf>

00000516 <.LVL12>:
     516:	2b 01       	movw	r4, r22
     518:	3c 01       	movw	r6, r24

0000051a <.Loc.42>:
     51a:	94 01       	movw	r18, r8
     51c:	a5 01       	movw	r20, r10
     51e:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__subsf3>

00000522 <.LVL13>:
     522:	9b 01       	movw	r18, r22
     524:	ac 01       	movw	r20, r24

00000526 <.Loc.43>:
     526:	eb 81       	ldd	r30, Y+3	; 0x03
     528:	fc 81       	ldd	r31, Y+4	; 0x04
     52a:	63 85       	ldd	r22, Z+11	; 0x0b
     52c:	74 85       	ldd	r23, Z+12	; 0x0c
     52e:	85 85       	ldd	r24, Z+13	; 0x0d
     530:	96 85       	ldd	r25, Z+14	; 0x0e
     532:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__addsf3>

00000536 <.LVL14>:
     536:	eb 81       	ldd	r30, Y+3	; 0x03
     538:	fc 81       	ldd	r31, Y+4	; 0x04
     53a:	63 87       	std	Z+11, r22	; 0x0b
     53c:	74 87       	std	Z+12, r23	; 0x0c
     53e:	85 87       	std	Z+13, r24	; 0x0d
     540:	96 87       	std	Z+14, r25	; 0x0e

00000542 <.L9>:
		if (buffer[smooth->counter0] < smooth->average)
     542:	92 01       	movw	r18, r4
     544:	a3 01       	movw	r20, r6
     546:	b4 01       	movw	r22, r8
     548:	c5 01       	movw	r24, r10
     54a:	0e 94 9d 1a 	call	0x353a	; 0x353a <__gesf2>

0000054e <.LVL15>:
     54e:	18 16       	cp	r1, r24
     550:	3c f4       	brge	.+14     	; 0x560 <.L11>

00000552 <.Loc.46>:
			smooth->Neg++;
     552:	eb 81       	ldd	r30, Y+3	; 0x03
     554:	fc 81       	ldd	r31, Y+4	; 0x04
     556:	81 85       	ldd	r24, Z+9	; 0x09
     558:	92 85       	ldd	r25, Z+10	; 0x0a
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	81 87       	std	Z+9, r24	; 0x09
     55e:	92 87       	std	Z+10, r25	; 0x0a

00000560 <.L11>:
		if (++smooth->counter0 >= SMOOTHALG_MAXSIZE)
     560:	ff ef       	ldi	r31, 0xFF	; 255
     562:	ef 1a       	sub	r14, r31
     564:	ff 0a       	sbc	r15, r31

00000566 <.Loc.50>:
		{
			smooth->counter0 = 0;
     566:	eb 81       	ldd	r30, Y+3	; 0x03
     568:	fc 81       	ldd	r31, Y+4	; 0x04

0000056a <.Loc.51>:
		if (++smooth->counter0 >= SMOOTHALG_MAXSIZE)
     56a:	e0 16       	cp	r14, r16
     56c:	f1 06       	cpc	r15, r17
     56e:	08 f4       	brcc	.+2      	; 0x572 <.Loc.52>

00000570 <L0^A>:
     570:	9f cf       	rjmp	.-194    	; 0x4b0 <.L19>

00000572 <.Loc.52>:
			smooth->counter0 = 0;
     572:	11 82       	std	Z+1, r1	; 0x01
     574:	12 82       	std	Z+2, r1	; 0x02

00000576 <.Loc.54>:
			smooth->sm0 = 0;
     576:	10 82       	st	Z, r1

00000578 <.Loc.56>:
			//bug
			if (smooth->TD<0)
     578:	c3 84       	ldd	r12, Z+11	; 0x0b
     57a:	d4 84       	ldd	r13, Z+12	; 0x0c
     57c:	e5 84       	ldd	r14, Z+13	; 0x0d
     57e:	f6 84       	ldd	r15, Z+14	; 0x0e

00000580 <.Loc.58>:
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	9a 01       	movw	r18, r20
     586:	b6 01       	movw	r22, r12
     588:	c7 01       	movw	r24, r14
     58a:	0e 94 3e 19 	call	0x327c	; 0x327c <__cmpsf2>

0000058e <.LVL16>:
     58e:	87 ff       	sbrs	r24, 7
     590:	0a c0       	rjmp	.+20     	; 0x5a6 <.L14>

00000592 <.Loc.59>:
			{
				smooth->TD *= -1;//convirtiendo a positivo
     592:	f7 fa       	bst	r15, 7
     594:	f0 94       	com	r15
     596:	f7 f8       	bld	r15, 7
     598:	f0 94       	com	r15
     59a:	eb 81       	ldd	r30, Y+3	; 0x03
     59c:	fc 81       	ldd	r31, Y+4	; 0x04
     59e:	c3 86       	std	Z+11, r12	; 0x0b
     5a0:	d4 86       	std	Z+12, r13	; 0x0c
     5a2:	e5 86       	std	Z+13, r14	; 0x0d
     5a4:	f6 86       	std	Z+14, r15	; 0x0e

000005a6 <.L14>:
			}
			//
			*Answer = smooth->average + ( ( (smooth->Pos-smooth->Neg) * smooth->TD )/ ( SMOOTHALG_MAXSIZE*SMOOTHALG_MAXSIZE) );
     5a6:	eb 81       	ldd	r30, Y+3	; 0x03
     5a8:	fc 81       	ldd	r31, Y+4	; 0x04
     5aa:	67 81       	ldd	r22, Z+7	; 0x07
     5ac:	70 85       	ldd	r23, Z+8	; 0x08
     5ae:	81 85       	ldd	r24, Z+9	; 0x09
     5b0:	92 85       	ldd	r25, Z+10	; 0x0a
     5b2:	68 1b       	sub	r22, r24
     5b4:	79 0b       	sbc	r23, r25

000005b6 <.Loc.63>:
     5b6:	87 2f       	mov	r24, r23
     5b8:	88 0f       	add	r24, r24
     5ba:	88 0b       	sbc	r24, r24
     5bc:	98 2f       	mov	r25, r24
     5be:	0e 94 ed 19 	call	0x33da	; 0x33da <__floatsisf>

000005c2 <.LVL17>:
     5c2:	96 01       	movw	r18, r12
     5c4:	a7 01       	movw	r20, r14
     5c6:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>

000005ca <.LVL18>:
     5ca:	6b 83       	std	Y+3, r22	; 0x03
     5cc:	7c 83       	std	Y+4, r23	; 0x04
     5ce:	8d 83       	std	Y+5, r24	; 0x05
     5d0:	9e 83       	std	Y+6, r25	; 0x06

000005d2 <.Loc.64>:
     5d2:	00 9f       	mul	r16, r16
     5d4:	b0 01       	movw	r22, r0
     5d6:	01 9f       	mul	r16, r17
     5d8:	70 0d       	add	r23, r0
     5da:	70 0d       	add	r23, r0
     5dc:	11 24       	eor	r1, r1

000005de <.Loc.65>:
     5de:	87 2f       	mov	r24, r23
     5e0:	88 0f       	add	r24, r24
     5e2:	88 0b       	sbc	r24, r24
     5e4:	98 2f       	mov	r25, r24
     5e6:	0e 94 ed 19 	call	0x33da	; 0x33da <__floatsisf>

000005ea <.LVL19>:
     5ea:	9b 01       	movw	r18, r22
     5ec:	ac 01       	movw	r20, r24
     5ee:	6b 81       	ldd	r22, Y+3	; 0x03
     5f0:	7c 81       	ldd	r23, Y+4	; 0x04
     5f2:	8d 81       	ldd	r24, Y+5	; 0x05
     5f4:	9e 81       	ldd	r25, Y+6	; 0x06
     5f6:	0e 94 43 19 	call	0x3286	; 0x3286 <__divsf3>

000005fa <.LVL20>:
     5fa:	94 01       	movw	r18, r8
     5fc:	a5 01       	movw	r20, r10
     5fe:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__addsf3>

00000602 <.LVL21>:
     602:	e9 81       	ldd	r30, Y+1	; 0x01
     604:	fa 81       	ldd	r31, Y+2	; 0x02
     606:	60 83       	st	Z, r22
     608:	71 83       	std	Z+1, r23	; 0x01
     60a:	82 83       	std	Z+2, r24	; 0x02
     60c:	93 83       	std	Z+3, r25	; 0x03

0000060e <.Loc.68>:
			return 1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	1f c0       	rjmp	.+62     	; 0x650 <.L1>

00000612 <.L5>:
			smooth->counter0 = 0x00;//bug fixed
     612:	11 82       	std	Z+1, r1	; 0x01
     614:	12 82       	std	Z+2, r1	; 0x02

00000616 <.Loc.72>:
			smooth->average /= SMOOTHALG_MAXSIZE;
     616:	b8 01       	movw	r22, r16
     618:	11 0f       	add	r17, r17
     61a:	88 0b       	sbc	r24, r24
     61c:	98 2f       	mov	r25, r24
     61e:	0e 94 ed 19 	call	0x33da	; 0x33da <__floatsisf>

00000622 <.LVL22>:
     622:	9b 01       	movw	r18, r22
     624:	ac 01       	movw	r20, r24
     626:	b4 01       	movw	r22, r8
     628:	c5 01       	movw	r24, r10
     62a:	0e 94 43 19 	call	0x3286	; 0x3286 <__divsf3>

0000062e <.LVL23>:
     62e:	eb 81       	ldd	r30, Y+3	; 0x03
     630:	fc 81       	ldd	r31, Y+4	; 0x04
     632:	63 83       	std	Z+3, r22	; 0x03
     634:	74 83       	std	Z+4, r23	; 0x04
     636:	85 83       	std	Z+5, r24	; 0x05
     638:	96 83       	std	Z+6, r25	; 0x06

0000063a <.Loc.74>:
			smooth->Pos = 0;
     63a:	17 82       	std	Z+7, r1	; 0x07
     63c:	10 86       	std	Z+8, r1	; 0x08

0000063e <.Loc.76>:
			smooth->Neg = 0;
     63e:	11 86       	std	Z+9, r1	; 0x09
     640:	12 86       	std	Z+10, r1	; 0x0a

00000642 <.Loc.78>:
			smooth->TD = 0;
     642:	13 86       	std	Z+11, r1	; 0x0b
     644:	14 86       	std	Z+12, r1	; 0x0c
     646:	15 86       	std	Z+13, r1	; 0x0d
     648:	16 86       	std	Z+14, r1	; 0x0e

0000064a <.Loc.80>:
			smooth->sm0++;
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	80 83       	st	Z, r24

0000064e <.L6>:
			//
		}
	}
	return 0;
     64e:	80 e0       	ldi	r24, 0x00	; 0

00000650 <.L1>:
}
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16

00000664 <.Loc.84>:
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	df 90       	pop	r13
     66a:	cf 90       	pop	r12
     66c:	bf 90       	pop	r11
     66e:	af 90       	pop	r10
     670:	9f 90       	pop	r9
     672:	8f 90       	pop	r8
     674:	7f 90       	pop	r7
     676:	6f 90       	pop	r6
     678:	5f 90       	pop	r5
     67a:	4f 90       	pop	r4
     67c:	08 95       	ret

0000067e <scirbuf_bytes_available>:

uint8_t scirbuf_bytes_available(void)
{
    uint8_t k, len;

    if (scirbuf.uflags.bf.ov == 0)
     67e:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>

00000682 <.Loc.4>:
     682:	80 fd       	sbrc	r24, 0
     684:	06 c0       	rjmp	.+12     	; 0x692 <.L2>

00000686 <.Loc.5>:
    {
        len = scirbuf.iw - scirbuf.ir;
     686:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <scirbuf+0x21>

0000068a <.Loc.7>:
     68a:	90 91 d2 05 	lds	r25, 0x05D2	; 0x8005d2 <scirbuf+0x20>

0000068e <.L6>:
        {
            //no interesa si ir es mayor, menor
            //scirbuf.ir = scirbuf.iw;//x lectura es necesario
            k = scirbuf.iw;
        }
        len = (SCIRBUF_BUFF_SIZE - k) + scirbuf.iw;
     68e:	89 1b       	sub	r24, r25

00000690 <.LVL0>:
    }
    return len;
}
     690:	08 95       	ret

00000692 <.L2>:
        if (scirbuf.uflags.bf.ow == 0)
     692:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>

00000696 <.Loc.13>:
     696:	81 fd       	sbrc	r24, 1
     698:	06 c0       	rjmp	.+12     	; 0x6a6 <.L4>

0000069a <.Loc.14>:
            k =  scirbuf.ir;
     69a:	90 91 d2 05 	lds	r25, 0x05D2	; 0x8005d2 <scirbuf+0x20>

0000069e <.L5>:
        len = (SCIRBUF_BUFF_SIZE - k) + scirbuf.iw;
     69e:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <scirbuf+0x21>

000006a2 <.Loc.18>:
     6a2:	80 5e       	subi	r24, 0xE0	; 224
     6a4:	f4 cf       	rjmp	.-24     	; 0x68e <.L6>

000006a6 <.L4>:
            k = scirbuf.iw;
     6a6:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <scirbuf+0x21>
     6aa:	f9 cf       	rjmp	.-14     	; 0x69e <.L5>

000006ac <scirbuf_write>:
////////////////////////////////////////////////////////////////////////////////
void scirbuf_write(uint8_t c)
{
    scirbuf.buffer[scirbuf.iw] = c;
     6ac:	e0 91 d3 05 	lds	r30, 0x05D3	; 0x8005d3 <scirbuf+0x21>
     6b0:	f0 e0       	ldi	r31, 0x00	; 0

000006b2 <.Loc.24>:
     6b2:	ee 54       	subi	r30, 0x4E	; 78
     6b4:	fa 4f       	sbci	r31, 0xFA	; 250
     6b6:	80 83       	st	Z, r24

000006b8 <.Loc.25>:

   if (scirbuf.uflags.bf.ov == 1)
     6b8:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>

000006bc <.Loc.27>:
     6bc:	80 ff       	sbrs	r24, 0
     6be:	0b c0       	rjmp	.+22     	; 0x6d6 <.L8>

000006c0 <.Loc.28>:
   {
      if (scirbuf.iw == scirbuf.ir)
     6c0:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <scirbuf+0x21>

000006c4 <.Loc.30>:
     6c4:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <scirbuf+0x20>

000006c8 <.Loc.31>:
     6c8:	98 13       	cpse	r25, r24
     6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <.L8>

000006cc <.Loc.32>:
       {
	   scirbuf.uflags.bf.ow = 1;
     6cc:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>
     6d0:	82 60       	ori	r24, 0x02	; 2
     6d2:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <scirbuf+0x22>

000006d6 <.L8>:
       }
   }
    
    if (++scirbuf.iw == SCIRBUF_BUFF_SIZE)
     6d6:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <scirbuf+0x21>

000006da <.Loc.36>:
     6da:	8f 5f       	subi	r24, 0xFF	; 255

000006dc <.Loc.37>:
     6dc:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <scirbuf+0x21>
     6e0:	80 32       	cpi	r24, 0x20	; 32
     6e2:	39 f4       	brne	.+14     	; 0x6f2 <.L7>

000006e4 <.LBB4>:
    {
        scirbuf.iw = 0;//reset index
     6e4:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <scirbuf+0x21>

000006e8 <.Loc.41>:
        scirbuf.uflags.bf.ov = 1;
     6e8:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>
     6ec:	81 60       	ori	r24, 0x01	; 1
     6ee:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <scirbuf+0x22>

000006f2 <.L7>:
    }
}
     6f2:	08 95       	ret

000006f4 <scirbuf_read>:
        scirbuf.uflags.bf.ow = 0;
    }
    return c;
    */
    //2do metodo
	uint8_t c = scirbuf.buffer[scirbuf.ir];
     6f4:	e0 91 d2 05 	lds	r30, 0x05D2	; 0x8005d2 <scirbuf+0x20>
     6f8:	f0 e0       	ldi	r31, 0x00	; 0

000006fa <.Loc.48>:
     6fa:	ee 54       	subi	r30, 0x4E	; 78
     6fc:	fa 4f       	sbci	r31, 0xFA	; 250
     6fe:	80 81       	ld	r24, Z

00000700 <.LVL9>:
	
	scirbuf.ir++;
     700:	90 91 d2 05 	lds	r25, 0x05D2	; 0x8005d2 <scirbuf+0x20>

00000704 <.Loc.51>:
     704:	9f 5f       	subi	r25, 0xFF	; 255
     706:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <scirbuf+0x20>

0000070a <.Loc.52>:
	scirbuf.ir &= SCIRBUF_BUFF_SIZE_MASK;
     70a:	90 91 d2 05 	lds	r25, 0x05D2	; 0x8005d2 <scirbuf+0x20>

0000070e <.Loc.54>:
     70e:	9f 71       	andi	r25, 0x1F	; 31
     710:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <scirbuf+0x20>

00000714 <.Loc.55>:


    if (scirbuf.ir == scirbuf.iw)
     714:	20 91 d2 05 	lds	r18, 0x05D2	; 0x8005d2 <scirbuf+0x20>

00000718 <.Loc.57>:
     718:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <scirbuf+0x21>

0000071c <.Loc.58>:
     71c:	29 13       	cpse	r18, r25
     71e:	0a c0       	rjmp	.+20     	; 0x734 <.L10>

00000720 <.Loc.59>:
    {
        scirbuf.uflags.bf.ov = 0;
     720:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <scirbuf+0x22>
     724:	9e 7f       	andi	r25, 0xFE	; 254
     726:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <scirbuf+0x22>

0000072a <.Loc.61>:
        scirbuf.uflags.bf.ow = 0;
     72a:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <scirbuf+0x22>
     72e:	9d 7f       	andi	r25, 0xFD	; 253
     730:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <scirbuf+0x22>

00000734 <.L10>:
    }
    return c;
    
}
     734:	08 95       	ret

00000736 <scirbuf_read_nbytes>:
//{
//   scirbuf.ir = scirbuf.iw;
//}
////////////////////////////////////////////////////////////////////////////////
uint8_t scirbuf_read_nbytes(uint8_t *buff_out, uint8_t n)
{
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	ec 01       	movw	r28, r24
     748:	16 2f       	mov	r17, r22

0000074a <.LVL11>:
    uint8_t i,x;
    uint8_t temp, resto;
	x = 0;
	if (n > 0 )
     74a:	61 15       	cp	r22, r1
     74c:	69 f0       	breq	.+26     	; 0x768 <.L13>

0000074e <.Loc.72>:
    {
        if (scirbuf.uflags.bf.ov == 0)
     74e:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>

00000752 <.Loc.74>:
     752:	80 fd       	sbrc	r24, 0
     754:	13 c0       	rjmp	.+38     	; 0x77c <.L14>
     756:	7e 01       	movw	r14, r28
     758:	e6 0e       	add	r14, r22
     75a:	f1 1c       	adc	r15, r1

0000075c <.L15>:
        {
            for (i=0; i<n; i++)
            {
                buff_out[x++] = scirbuf_read();
     75c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <scirbuf_read>

00000760 <.LVL14>:
     760:	89 93       	st	Y+, r24

00000762 <.Loc.78>:
            for (i=0; i<n; i++)
     762:	ce 15       	cp	r28, r14
     764:	df 05       	cpc	r29, r15
     766:	d1 f7       	brne	.-12     	; 0x75c <.L15>

00000768 <.L13>:
        }
    }


    return x;//el numero de bytes leidos?
}
     768:	81 2f       	mov	r24, r17
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17

00000770 <.Loc.82>:
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	08 95       	ret

0000077c <.L14>:
            scirbuf.uflags.bf.buff_lock = 1;
     77c:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>
     780:	84 60       	ori	r24, 0x04	; 4
     782:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <scirbuf+0x22>

00000786 <.Loc.85>:
            if (scirbuf.uflags.bf.ow == 1)
     786:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>

0000078a <.Loc.87>:
     78a:	81 ff       	sbrs	r24, 1
     78c:	04 c0       	rjmp	.+8      	; 0x796 <.L16>

0000078e <.Loc.88>:
                scirbuf.ir = scirbuf.iw;
     78e:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <scirbuf+0x21>

00000792 <.Loc.90>:
     792:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <scirbuf+0x20>

00000796 <.L16>:
            temp = SCIRBUF_BUFF_SIZE - scirbuf.ir;
     796:	d0 90 d2 05 	lds	r13, 0x05D2	; 0x8005d2 <scirbuf+0x20>

0000079a <.Loc.93>:
     79a:	00 e2       	ldi	r16, 0x20	; 32
     79c:	0d 19       	sub	r16, r13

0000079e <.LVL19>:
            if ( temp >= n)
     79e:	cc 2e       	mov	r12, r28

000007a0 <.Loc.95>:
     7a0:	7e 01       	movw	r14, r28
     7a2:	01 17       	cp	r16, r17
     7a4:	a0 f0       	brcs	.+40     	; 0x7ce <.L18>

000007a6 <.Loc.96>:
     7a6:	7e 01       	movw	r14, r28

000007a8 <.Loc.97>:
     7a8:	e1 0e       	add	r14, r17
     7aa:	f1 1c       	adc	r15, r1

000007ac <.L19>:
                    buff_out[x++] = scirbuf_read();
     7ac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <scirbuf_read>

000007b0 <.LVL23>:
     7b0:	89 93       	st	Y+, r24

000007b2 <.Loc.101>:
                for (i=0; i<n; i++)
     7b2:	ce 15       	cp	r28, r14
     7b4:	df 05       	cpc	r29, r15
     7b6:	d1 f7       	brne	.-12     	; 0x7ac <.L19>

000007b8 <.L20>:
            scirbuf.uflags.bf.buff_lock = 0;
     7b8:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>
     7bc:	8b 7f       	andi	r24, 0xFB	; 251
     7be:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <scirbuf+0x22>
     7c2:	d2 cf       	rjmp	.-92     	; 0x768 <.L13>

000007c4 <.L21>:
                    buff_out[x++] = scirbuf_read();
     7c4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <scirbuf_read>

000007c8 <.LVL27>:
     7c8:	f7 01       	movw	r30, r14
     7ca:	81 93       	st	Z+, r24
     7cc:	7f 01       	movw	r14, r30

000007ce <.L18>:
                for (i=0; i<temp; i++)
     7ce:	8e 2d       	mov	r24, r14
     7d0:	8c 19       	sub	r24, r12
     7d2:	80 17       	cp	r24, r16
     7d4:	b8 f3       	brcs	.-18     	; 0x7c4 <.L21>

000007d6 <.LVL29>:
                resto = n - temp; //lo q queda por leer
     7d6:	80 ee       	ldi	r24, 0xE0	; 224
     7d8:	8d 0d       	add	r24, r13
     7da:	18 0f       	add	r17, r24

000007dc <.Loc.113>:
     7dc:	10 0f       	add	r17, r16

000007de <.L22>:
                for (i=0; i<resto; i++)
     7de:	01 17       	cp	r16, r17
     7e0:	59 f3       	breq	.-42     	; 0x7b8 <.L20>

000007e2 <.Loc.115>:
                    buff_out[x++] = scirbuf_read();
     7e2:	7e 01       	movw	r14, r28
     7e4:	e0 0e       	add	r14, r16
     7e6:	f1 1c       	adc	r15, r1

000007e8 <.Loc.117>:
     7e8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <scirbuf_read>

000007ec <.LVL33>:
     7ec:	f7 01       	movw	r30, r14
     7ee:	80 83       	st	Z, r24

000007f0 <.Loc.119>:
     7f0:	0f 5f       	subi	r16, 0xFF	; 255

000007f2 <.Loc.121>:
     7f2:	f5 cf       	rjmp	.-22     	; 0x7de <.L22>

000007f4 <scirbuf_read_1byte>:
////////////////////////////////////////////////////////////////////////////////
uint8_t scirbuf_read_1byte(void)
{
    uint8_t buff_out;
    
    if (scirbuf.uflags.bf.ov == 0)
     7f4:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>

000007f8 <.Loc.126>:
     7f8:	80 ff       	sbrs	r24, 0

000007fa <.Loc.127>:
    {
        buff_out = scirbuf_read();
     7fa:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <scirbuf_read>

000007fe <.LVL36>:
    }
    else//ov=1
    {
        scirbuf.uflags.bf.buff_lock = 1;
     7fe:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>
     802:	84 60       	ori	r24, 0x04	; 4
     804:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <scirbuf+0x22>

00000808 <.Loc.131>:

	        if (scirbuf.uflags.bf.ow == 1)
     808:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>

0000080c <.Loc.133>:
     80c:	81 ff       	sbrs	r24, 1
     80e:	04 c0       	rjmp	.+8      	; 0x818 <.L31>

00000810 <.Loc.134>:
	        {
	            scirbuf.ir = scirbuf.iw;
     810:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <scirbuf+0x21>

00000814 <.Loc.136>:
     814:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <scirbuf+0x20>

00000818 <.L31>:
	        }
	        buff_out = scirbuf_read();
     818:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <scirbuf_read>

0000081c <.LVL37>:

        scirbuf.uflags.bf.buff_lock = 0;
     81c:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <scirbuf+0x22>
     820:	9b 7f       	andi	r25, 0xFB	; 251
     822:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <scirbuf+0x22>

00000826 <.Loc.141>:
    }
    return buff_out;
}
     826:	08 95       	ret

00000828 <rx_handler>:
////////////////////////////////////////////////////////////////////////////////
void rx_handler(void)//call from ISR
{
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29

00000832 <.Loc.144>:
    static uint8_t soft_buff[4];
    static int8_t level;
    uint8_t i;

    
	uint8_t char_rx  = UDR;
     832:	fc b0       	in	r15, 0x0c	; 12

00000834 <.LVL38>:
	//USART_Transmit(char_rx);

    if (scirbuf.uflags.bf.buff_lock == 1)
     834:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <scirbuf+0x22>

00000838 <.Loc.151>:
    {
        soft_buff[level++ & SOFTBUFF_SIZE_MASK] = char_rx;
     838:	c0 91 b1 05 	lds	r28, 0x05B1	; 0x8005b1 <level.1>

0000083c <.Loc.152>:
    if (scirbuf.uflags.bf.buff_lock == 1)
     83c:	82 ff       	sbrs	r24, 2
     83e:	11 c0       	rjmp	.+34     	; 0x862 <.L33>

00000840 <.Loc.153>:
        soft_buff[level++ & SOFTBUFF_SIZE_MASK] = char_rx;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	8c 0f       	add	r24, r28
     844:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <level.1>

00000848 <.Loc.155>:
     848:	c3 70       	andi	r28, 0x03	; 3
     84a:	dc 2f       	mov	r29, r28
     84c:	dd 0f       	add	r29, r29
     84e:	dd 0b       	sbc	r29, r29

00000850 <.Loc.156>:
     850:	c3 55       	subi	r28, 0x53	; 83
     852:	da 4f       	sbci	r29, 0xFA	; 250
     854:	f8 82       	st	Y, r15

00000856 <.Loc.157>:
            }
            level = 0x00;
        }
        scirbuf_write(char_rx);
    }
}
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15

00000860 <.Loc.158>:
     860:	08 95       	ret

00000862 <.L33>:
        if (level > 0)
     862:	1c 16       	cp	r1, r28
     864:	8c f4       	brge	.+34     	; 0x888 <.L35>

00000866 <.LVL41>:
            for (i=0; i<level; i++)
     866:	0d ea       	ldi	r16, 0xAD	; 173
     868:	15 e0       	ldi	r17, 0x05	; 5
     86a:	dc 2f       	mov	r29, r28
     86c:	dd 0f       	add	r29, r29
     86e:	dd 0b       	sbc	r29, r29
     870:	c3 55       	subi	r28, 0x53	; 83
     872:	da 4f       	sbci	r29, 0xFA	; 250

00000874 <.L36>:
                scirbuf_write(soft_buff[i]);
     874:	f8 01       	movw	r30, r16
     876:	81 91       	ld	r24, Z+
     878:	8f 01       	movw	r16, r30

0000087a <.Loc.163>:
     87a:	0e 94 56 03 	call	0x6ac	; 0x6ac <scirbuf_write>

0000087e <.LVL44>:
            for (i=0; i<level; i++)
     87e:	0c 17       	cp	r16, r28
     880:	1d 07       	cpc	r17, r29
     882:	c1 f7       	brne	.-16     	; 0x874 <.L36>

00000884 <.Loc.166>:
            level = 0x00;
     884:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <level.1>

00000888 <.L35>:
        scirbuf_write(char_rx);
     888:	8f 2d       	mov	r24, r15

0000088a <.Loc.169>:
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15

00000894 <.Loc.170>:
        scirbuf_write(char_rx);
     894:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <scirbuf_write>

00000898 <pinGetLevel_0>:


static uint8_t pinGetLevel_0(void)
{
	return ReadPin(PORTRxGETLEVEL_0, PINxGETLEVEL_0);
}
     898:	88 27       	eor	r24, r24
     89a:	b4 99       	sbic	0x16, 4	; 22
     89c:	83 95       	inc	r24
     89e:	08 95       	ret

000008a0 <pinGetLevel_init>:

void pinGetLevel_init(void)
{
	PinTo1(PORTWxGETLEVEL_0, PINxGETLEVEL_0);//Pull-up
     8a0:	c4 9a       	sbi	0x18, 4	; 24

000008a2 <.Loc.6>:
	ConfigInputPin(CONFIGIOxGETLEVEL_0, PINxGETLEVEL_0);
     8a2:	bc 98       	cbi	0x17, 4	; 23

000008a4 <.Loc.10>:
	pinGetLevel[0].readPinLevel = pinGetLevel_0;
     8a4:	8c e4       	ldi	r24, 0x4C	; 76
     8a6:	94 e0       	ldi	r25, 0x04	; 4
     8a8:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <pinGetLevel+0x2>
     8ac:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <pinGetLevel+0x3>

000008b0 <.LBB5>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(__builtin_ceil(__builtin_fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b0:	8f e9       	ldi	r24, 0x9F	; 159
     8b2:	9f e0       	ldi	r25, 0x0F	; 15

000008b4 <.L1^B1>:
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <.L1^B1>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <L0^A>

000008ba <L0^A>:
	...

000008bc <.LBB7>:

	__delay_ms(1);
	//Set initial level
	for (int i=0; i<PINGETLEVEL_NUMMAX; i++)
	{
		pinGetLevel[i].bf.level = pinGetLevel[i].readPinLevel();
     8bc:	e0 91 d7 05 	lds	r30, 0x05D7	; 0x8005d7 <pinGetLevel+0x2>
     8c0:	f0 91 d8 05 	lds	r31, 0x05D8	; 0x8005d8 <pinGetLevel+0x3>
     8c4:	09 95       	icall

000008c6 <.Loc.26>:
     8c6:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <pinGetLevel+0x1>

000008ca <.Loc.27>:
		pinGetLevel[i].bf.level_last = pinGetLevel[i].bf.level;
     8ca:	80 fb       	bst	r24, 0
     8cc:	91 f9       	bld	r25, 1

000008ce <.Loc.29>:

		#ifdef PINGETLEVEL_INITwCHANGED
		pinGetLevel[i].bf.changed = 1;//provocar un cambio inicial
     8ce:	80 fb       	bst	r24, 0
     8d0:	92 f9       	bld	r25, 2
     8d2:	89 2f       	mov	r24, r25
     8d4:	88 60       	ori	r24, 0x08	; 8
     8d6:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <pinGetLevel+0x1>

000008da <.LBE7>:
		#endif
	}
}
     8da:	08 95       	ret

000008dc <pinGetLevel_job>:
	    }
	}
}
*/
void pinGetLevel_job(void)//non-block
{
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29

000008e4 <.LBB8>:
	int8_t level_temp;

	for (int8_t i = 0; i< PINGETLEVEL_NUMMAX; i++)
	{
		if  (pinGetLevel[i].bf.sm0 == 0)
     8e4:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <pinGetLevel+0x1>

000008e8 <.Loc.41>:
     8e8:	80 ff       	sbrs	r24, 0
     8ea:	30 c0       	rjmp	.+96     	; 0x94c <.L4>

000008ec <.Loc.42>:
	            pinGetLevel[i].bf.sm0 = 1;
	        }
	    }
	    else if (pinGetLevel[i].bf.sm0 == 1)
	    {
            if (++pinGetLevel[i].counterDebounce == PINGETLEVEL_SCAN_KCOUNT_DEBOUNCE)//ms
     8ec:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <pinGetLevel>
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	98 0f       	add	r25, r24

000008f4 <.Loc.45>:
     8f4:	84 30       	cpi	r24, 0x04	; 4
     8f6:	39 f0       	breq	.+14     	; 0x906 <.L5>
     8f8:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <pinGetLevel>

000008fc <.L3>:

                pinGetLevel[i].bf.sm0 = 0;
            }
	    }
	}
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	08 95       	ret

00000906 <.L5>:
                pinGetLevel[i].counterDebounce = 0x0;
     906:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <pinGetLevel>

0000090a <.Loc.50>:
                level_temp = pinGetLevel[i].readPinLevel();
     90a:	e0 91 d7 05 	lds	r30, 0x05D7	; 0x8005d7 <pinGetLevel+0x2>
     90e:	f0 91 d8 05 	lds	r31, 0x05D8	; 0x8005d8 <pinGetLevel+0x3>
     912:	09 95       	icall

00000914 <.LVL7>:
                	pinGetLevel[i].bf.level_last = level_temp;
     914:	28 2f       	mov	r18, r24
     916:	21 70       	andi	r18, 0x01	; 1

00000918 <.Loc.54>:
                if (pinGetLevel[i].bf.level_last == level_temp)
     918:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <pinGetLevel+0x1>
     91c:	92 fb       	bst	r25, 2
     91e:	00 27       	eor	r16, r16
     920:	00 f9       	bld	r16, 0
     922:	10 e0       	ldi	r17, 0x00	; 0

00000924 <.Loc.55>:
     924:	08 2e       	mov	r0, r24
     926:	00 1c       	adc	r0, r0
     928:	00 08       	sbc	r0, r0
     92a:	80 17       	cp	r24, r16
     92c:	01 06       	cpc	r0, r17
     92e:	21 f4       	brne	.+8      	; 0x938 <.L11>

00000930 <.Loc.56>:
                	pinGetLevel[i].bf.level = level_temp;//pinGetLevel[i].bf.level_last;}
     930:	20 fb       	bst	r18, 0
     932:	91 f9       	bld	r25, 1

00000934 <.Loc.58>:
                	pinGetLevel[i].bf.changed = 1;//clear in app-level
     934:	98 60       	ori	r25, 0x08	; 8
     936:	02 c0       	rjmp	.+4      	; 0x93c <.L12>

00000938 <.L11>:
                	pinGetLevel[i].bf.level_last = level_temp;
     938:	20 fb       	bst	r18, 0
     93a:	92 f9       	bld	r25, 2

0000093c <.L12>:
                	pinGetLevel[i].bf.changed = 1;//clear in app-level
     93c:	90 93 d6 05 	sts	0x05D6, r25	; 0x8005d6 <pinGetLevel+0x1>

00000940 <.Loc.63>:
                pinGetLevel[i].bf.sm0 = 0;
     940:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <pinGetLevel+0x1>

00000944 <.Loc.65>:
     944:	8e 7f       	andi	r24, 0xFE	; 254

00000946 <.L13>:
	            pinGetLevel[i].bf.sm0 = 1;
     946:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <pinGetLevel+0x1>

0000094a <.Loc.67>:
}
     94a:	d8 cf       	rjmp	.-80     	; 0x8fc <.L3>

0000094c <.L4>:
	        level_temp = pinGetLevel[i].readPinLevel();
     94c:	e0 91 d7 05 	lds	r30, 0x05D7	; 0x8005d7 <pinGetLevel+0x2>
     950:	f0 91 d8 05 	lds	r31, 0x05D8	; 0x8005d8 <pinGetLevel+0x3>
     954:	09 95       	icall

00000956 <.Loc.71>:
	        if (pinGetLevel[i].bf.level_last != level_temp)
     956:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <pinGetLevel+0x1>
     95a:	92 fb       	bst	r25, 2
     95c:	cc 27       	eor	r28, r28
     95e:	c0 f9       	bld	r28, 0
     960:	d0 e0       	ldi	r29, 0x00	; 0

00000962 <.Loc.73>:
     962:	08 2e       	mov	r0, r24
     964:	00 1c       	adc	r0, r0
     966:	00 08       	sbc	r0, r0
     968:	8c 17       	cp	r24, r28
     96a:	0d 06       	cpc	r0, r29
     96c:	39 f2       	breq	.-114    	; 0x8fc <.L3>

0000096e <.Loc.74>:
	            pinGetLevel[i].bf.sm0 = 1;
     96e:	80 fb       	bst	r24, 0
     970:	88 27       	eor	r24, r24
     972:	82 f9       	bld	r24, 2

00000974 <.Loc.77>:
     974:	81 60       	ori	r24, 0x01	; 1
     976:	9a 7f       	andi	r25, 0xFA	; 250
     978:	89 2b       	or	r24, r25
     97a:	e5 cf       	rjmp	.-54     	; 0x946 <.L13>

0000097c <pid_pwm_set_pin>:

void pid_pwm_set_pin(struct PID *pid, int8_t pin)
{
	if (pin == 1)
	{
		PinTo1(*pid->pwm.io.port, pid->pwm.io.pin);
     97c:	dc 01       	movw	r26, r24
     97e:	9d 96       	adiw	r26, 0x2d	; 45
     980:	ed 91       	ld	r30, X+
     982:	fd 91       	ld	r31, X+
     984:	2c 91       	ld	r18, X
     986:	81 e0       	ldi	r24, 0x01	; 1

00000988 <.Loc.3>:
     988:	01 c0       	rjmp	.+2      	; 0x98c <.L2^B1>

0000098a <.L1^B1>:
     98a:	88 0f       	add	r24, r24

0000098c <.L2^B1>:
     98c:	2a 95       	dec	r18
     98e:	ea f7       	brpl	.-6      	; 0x98a <.L1^B1>
     990:	90 81       	ld	r25, Z

00000992 <.Loc.4>:
	if (pin == 1)
     992:	61 30       	cpi	r22, 0x01	; 1
     994:	19 f4       	brne	.+6      	; 0x99c <.L2>

00000996 <.Loc.5>:
		PinTo1(*pid->pwm.io.port, pid->pwm.io.pin);
     996:	89 2b       	or	r24, r25

00000998 <.L4>:
	}
	else
	{
		PinTo0(*pid->pwm.io.port, pid->pwm.io.pin);
     998:	80 83       	st	Z, r24

0000099a <.Loc.8>:
	}

}
     99a:	08 95       	ret

0000099c <.L2>:
		PinTo0(*pid->pwm.io.port, pid->pwm.io.pin);
     99c:	80 95       	com	r24
     99e:	89 23       	and	r24, r25
     9a0:	fb cf       	rjmp	.-10     	; 0x998 <.L4>

000009a2 <pid_pwm_stablish_levelpin>:
void pid_pwm_stablish_levelpin(struct PID *pid)
{
     9a2:	dc 01       	movw	r26, r24

000009a4 <.Loc.14>:
	pid->pwm.dc.ktop_uploaded_ms = pid->pwm.dc.ktop_ms;
     9a4:	90 96       	adiw	r26, 0x20	; 32
     9a6:	2d 91       	ld	r18, X+
     9a8:	3d 91       	ld	r19, X+

000009aa <.Loc.16>:
     9aa:	2d 93       	st	X+, r18
     9ac:	3d 93       	st	X+, r19

000009ae <.Loc.17>:
	if (pid->pwm.dc.ktop_uploaded_ms > 0)
	{
		PinTo1(*pid->pwm.io.port, pid->pwm.io.pin);
     9ae:	19 96       	adiw	r26, 0x09	; 9
     9b0:	ed 91       	ld	r30, X+
     9b2:	fd 91       	ld	r31, X+
     9b4:	4c 91       	ld	r20, X
     9b6:	81 e0       	ldi	r24, 0x01	; 1

000009b8 <.Loc.19>:
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <.L2^B2>

000009ba <.L1^B2>:
     9ba:	88 0f       	add	r24, r24

000009bc <.L2^B2>:
     9bc:	4a 95       	dec	r20
     9be:	ea f7       	brpl	.-6      	; 0x9ba <.L1^B2>
     9c0:	90 81       	ld	r25, Z

000009c2 <.Loc.20>:
	if (pid->pwm.dc.ktop_uploaded_ms > 0)
     9c2:	12 16       	cp	r1, r18
     9c4:	13 06       	cpc	r1, r19
     9c6:	1c f4       	brge	.+6      	; 0x9ce <.L6>

000009c8 <.Loc.21>:
		PinTo1(*pid->pwm.io.port, pid->pwm.io.pin);
     9c8:	89 2b       	or	r24, r25

000009ca <.L8>:
	}
	else
	{
		PinTo0(*pid->pwm.io.port, pid->pwm.io.pin);
     9ca:	80 83       	st	Z, r24

000009cc <.Loc.24>:
	}
}
     9cc:	08 95       	ret

000009ce <.L6>:
		PinTo0(*pid->pwm.io.port, pid->pwm.io.pin);
     9ce:	80 95       	com	r24
     9d0:	89 23       	and	r24, r25
     9d2:	fb cf       	rjmp	.-10     	; 0x9ca <.L8>

000009d4 <pid_get_output>:
Buscar a traves de Kp, que la salida del PID
este entre el rango de "10...0", para cualquier proceso
en donde >=10 es 100%, y 0=0%
**********************************************/
int16_t pid_get_output(struct PID* pid, int16_t error)
{
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <L0^A>

000009e2 <L0^A>:
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <L0^A>

000009e4 <L0^A>:
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <L0^A>

000009e6 <L0^A>:
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	8d 83       	std	Y+5, r24	; 0x05
     9ec:	9e 83       	std	Y+6, r25	; 0x06

000009ee <.Loc.32>:
	pid->algo.ei += error;
     9ee:	fc 01       	movw	r30, r24
     9f0:	e2 80       	ldd	r14, Z+2	; 0x02
     9f2:	f3 80       	ldd	r15, Z+3	; 0x03
     9f4:	e6 0e       	add	r14, r22
     9f6:	f7 1e       	adc	r15, r23
     9f8:	e2 82       	std	Z+2, r14	; 0x02
     9fa:	f3 82       	std	Z+3, r15	; 0x03

000009fc <.Loc.34>:
	//
	if (pid->algo.ei > pid->algo.kei_windup_max)
     9fc:	80 85       	ldd	r24, Z+8	; 0x08

000009fe <.Loc.36>:
     9fe:	91 85       	ldd	r25, Z+9	; 0x09

00000a00 <.Loc.37>:
     a00:	8e 15       	cp	r24, r14
     a02:	9f 05       	cpc	r25, r15
     a04:	24 f4       	brge	.+8      	; 0xa0e <.L10>

00000a06 <.L12>:
		pid->algo.ei = pid->algo.kei_windup_max;
	else if (pid->algo.ei < pid->algo.kei_windup_min)
		pid->algo.ei = pid->algo.kei_windup_min;
     a06:	82 83       	std	Z+2, r24	; 0x02
     a08:	93 83       	std	Z+3, r25	; 0x03
     a0a:	7c 01       	movw	r14, r24
     a0c:	07 c0       	rjmp	.+14     	; 0xa1c <.L11>

00000a0e <.L10>:
	else if (pid->algo.ei < pid->algo.kei_windup_min)
     a0e:	ed 81       	ldd	r30, Y+5	; 0x05

00000a10 <.Loc.42>:
     a10:	fe 81       	ldd	r31, Y+6	; 0x06
     a12:	82 85       	ldd	r24, Z+10	; 0x0a
     a14:	93 85       	ldd	r25, Z+11	; 0x0b

00000a16 <.Loc.43>:
     a16:	e8 16       	cp	r14, r24
     a18:	f9 06       	cpc	r15, r25
     a1a:	ac f3       	brlt	.-22     	; 0xa06 <.L12>

00000a1c <.L11>:
	//
	pid->algo.ed = error - pid->algo.eprevio;
     a1c:	ed 81       	ldd	r30, Y+5	; 0x05
     a1e:	fe 81       	ldd	r31, Y+6	; 0x06
     a20:	84 81       	ldd	r24, Z+4	; 0x04
     a22:	95 81       	ldd	r25, Z+5	; 0x05
     a24:	8b 01       	movw	r16, r22
     a26:	08 1b       	sub	r16, r24
     a28:	19 0b       	sbc	r17, r25

00000a2a <.Loc.46>:
     a2a:	06 83       	std	Z+6, r16	; 0x06
     a2c:	17 83       	std	Z+7, r17	; 0x07

00000a2e <.Loc.47>:
	pid->algo.eprevio = error;
     a2e:	64 83       	std	Z+4, r22	; 0x04
     a30:	75 83       	std	Z+5, r23	; 0x05

00000a32 <.Loc.49>:
	//
	int16_t pid_out = (pid->algo.kp * error) + (pid->algo.ki * pid->algo.ei) + (pid->algo.kd * pid->algo.ed);
     a32:	87 2f       	mov	r24, r23
     a34:	88 0f       	add	r24, r24
     a36:	88 0b       	sbc	r24, r24
     a38:	98 2f       	mov	r25, r24
     a3a:	0e 94 ed 19 	call	0x33da	; 0x33da <__floatsisf>

00000a3e <.LVL11>:
     a3e:	ed 81       	ldd	r30, Y+5	; 0x05
     a40:	fe 81       	ldd	r31, Y+6	; 0x06
     a42:	22 89       	ldd	r18, Z+18	; 0x12
     a44:	33 89       	ldd	r19, Z+19	; 0x13
     a46:	44 89       	ldd	r20, Z+20	; 0x14
     a48:	55 89       	ldd	r21, Z+21	; 0x15
     a4a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>

00000a4e <.LVL12>:
     a4e:	69 83       	std	Y+1, r22	; 0x01
     a50:	7a 83       	std	Y+2, r23	; 0x02
     a52:	8b 83       	std	Y+3, r24	; 0x03
     a54:	9c 83       	std	Y+4, r25	; 0x04

00000a56 <.Loc.53>:
     a56:	b7 01       	movw	r22, r14
     a58:	ff 0c       	add	r15, r15
     a5a:	88 0b       	sbc	r24, r24
     a5c:	98 2f       	mov	r25, r24
     a5e:	0e 94 ed 19 	call	0x33da	; 0x33da <__floatsisf>

00000a62 <.LVL13>:
     a62:	ed 81       	ldd	r30, Y+5	; 0x05
     a64:	fe 81       	ldd	r31, Y+6	; 0x06
     a66:	26 89       	ldd	r18, Z+22	; 0x16
     a68:	37 89       	ldd	r19, Z+23	; 0x17
     a6a:	40 8d       	ldd	r20, Z+24	; 0x18
     a6c:	51 8d       	ldd	r21, Z+25	; 0x19
     a6e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>

00000a72 <.LVL14>:
     a72:	9b 01       	movw	r18, r22
     a74:	ac 01       	movw	r20, r24

00000a76 <.Loc.54>:
     a76:	69 81       	ldd	r22, Y+1	; 0x01
     a78:	7a 81       	ldd	r23, Y+2	; 0x02
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__addsf3>

00000a82 <.LVL15>:
     a82:	69 83       	std	Y+1, r22	; 0x01
     a84:	7a 83       	std	Y+2, r23	; 0x02
     a86:	8b 83       	std	Y+3, r24	; 0x03
     a88:	9c 83       	std	Y+4, r25	; 0x04

00000a8a <.Loc.55>:
     a8a:	b8 01       	movw	r22, r16
     a8c:	11 0f       	add	r17, r17
     a8e:	88 0b       	sbc	r24, r24
     a90:	98 2f       	mov	r25, r24
     a92:	0e 94 ed 19 	call	0x33da	; 0x33da <__floatsisf>

00000a96 <.LVL16>:
     a96:	ed 81       	ldd	r30, Y+5	; 0x05
     a98:	fe 81       	ldd	r31, Y+6	; 0x06
     a9a:	22 8d       	ldd	r18, Z+26	; 0x1a
     a9c:	33 8d       	ldd	r19, Z+27	; 0x1b
     a9e:	44 8d       	ldd	r20, Z+28	; 0x1c
     aa0:	55 8d       	ldd	r21, Z+29	; 0x1d
     aa2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>

00000aa6 <.LVL17>:
     aa6:	9b 01       	movw	r18, r22
     aa8:	ac 01       	movw	r20, r24

00000aaa <.Loc.56>:
     aaa:	69 81       	ldd	r22, Y+1	; 0x01
     aac:	7a 81       	ldd	r23, Y+2	; 0x02
     aae:	8b 81       	ldd	r24, Y+3	; 0x03
     ab0:	9c 81       	ldd	r25, Y+4	; 0x04
     ab2:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__addsf3>

00000ab6 <.LVL18>:
     ab6:	0e 94 b5 19 	call	0x336a	; 0x336a <__fixsfsi>

00000aba <.LVL19>:

	return pid_out;
}
     aba:	cb 01       	movw	r24, r22
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <pid_find_ktop_ms>:
{
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	ec 01       	movw	r28, r24

00000adc <.Loc.61>:
	pid->pwm.dc.ktop_ms = pid_get_output(pid, error) * pid->algo.scaler_time_ms;
     adc:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <pid_get_output>

00000ae0 <.LVL21>:
     ae0:	48 89       	ldd	r20, Y+16	; 0x10
     ae2:	59 89       	ldd	r21, Y+17	; 0x11
     ae4:	84 9f       	mul	r24, r20
     ae6:	90 01       	movw	r18, r0
     ae8:	85 9f       	mul	r24, r21
     aea:	30 0d       	add	r19, r0
     aec:	94 9f       	mul	r25, r20
     aee:	30 0d       	add	r19, r0
     af0:	11 24       	eor	r1, r1

00000af2 <.Loc.64>:
     af2:	28 a3       	std	Y+32, r18	; 0x20
     af4:	39 a3       	std	Y+33, r19	; 0x21

00000af6 <.Loc.65>:
	if (pid->pwm.dc.ktop_ms > pid->algo.pid_out_max_ms)
     af6:	8c 85       	ldd	r24, Y+12	; 0x0c
     af8:	9d 85       	ldd	r25, Y+13	; 0x0d

00000afa <.Loc.67>:
     afa:	82 17       	cp	r24, r18
     afc:	93 07       	cpc	r25, r19
     afe:	1c f4       	brge	.+6      	; 0xb06 <.L14>

00000b00 <.L16>:
		{pid->pwm.dc.ktop_ms = pid->algo.pid_out_min_ms;}
     b00:	88 a3       	std	Y+32, r24	; 0x20
     b02:	99 a3       	std	Y+33, r25	; 0x21

00000b04 <.Loc.70>:
}
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <.L13>

00000b06 <.L14>:
	else if (pid->pwm.dc.ktop_ms < pid->algo.pid_out_min_ms)
     b06:	8e 85       	ldd	r24, Y+14	; 0x0e
     b08:	9f 85       	ldd	r25, Y+15	; 0x0f

00000b0a <.Loc.73>:
     b0a:	28 17       	cp	r18, r24
     b0c:	39 07       	cpc	r19, r25
     b0e:	c4 f3       	brlt	.-16     	; 0xb00 <.L16>

00000b10 <.L13>:
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28

00000b14 <.Loc.75>:
     b14:	08 95       	ret

00000b16 <pid_pwm_control>:
/******************************************
 *
 ******************************************/
void pid_pwm_control(struct PID* pid)
{
     b16:	fc 01       	movw	r30, r24

00000b18 <.Loc.78>:
	pid->pwm.dc.counter_ms++;
     b18:	86 8d       	ldd	r24, Z+30	; 0x1e

00000b1a <.Loc.80>:
     b1a:	97 8d       	ldd	r25, Z+31	; 0x1f
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	86 8f       	std	Z+30, r24	; 0x1e
     b20:	97 8f       	std	Z+31, r25	; 0x1f

00000b22 <.Loc.81>:

	/* inhibit with -1 */
	if (pid->pwm.timing.sm0 >= 0)
     b22:	44 a1       	ldd	r20, Z+36	; 0x24

00000b24 <.Loc.83>:
     b24:	47 fd       	sbrc	r20, 7
     b26:	10 c0       	rjmp	.+32     	; 0xb48 <.L18>

00000b28 <.Loc.84>:
	{
		if (pid->pwm.dc.ktop_uploaded_ms > 0)
     b28:	22 a1       	ldd	r18, Z+34	; 0x22
     b2a:	33 a1       	ldd	r19, Z+35	; 0x23

00000b2c <.Loc.86>:
     b2c:	12 16       	cp	r1, r18
     b2e:	13 06       	cpc	r1, r19
     b30:	5c f4       	brge	.+22     	; 0xb48 <.L18>

00000b32 <.Loc.87>:
		{
			if (pid->pwm.timing.sm0 == 0)
     b32:	41 30       	cpi	r20, 0x01	; 1
     b34:	f0 f4       	brcc	.+60     	; 0xb72 <.L19>

00000b36 <.Loc.89>:
			{
				if (pid->pwm.dc.counter_ms >= pid->pwm.timing.k_systemdelay_ton_ms )
     b36:	21 a5       	ldd	r18, Z+41	; 0x29
     b38:	32 a5       	ldd	r19, Z+42	; 0x2a
     b3a:	82 17       	cp	r24, r18
     b3c:	93 07       	cpc	r25, r19
     b3e:	20 f0       	brcs	.+8      	; 0xb48 <.L18>

00000b40 <.Loc.91>:
				{
					pid->pwm.dc.counter_ms = 0;
     b40:	16 8e       	std	Z+30, r1	; 0x1e
     b42:	17 8e       	std	Z+31, r1	; 0x1f

00000b44 <.Loc.93>:
					pid->pwm.timing.sm0++;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	84 a3       	std	Z+36, r24	; 0x24

00000b48 <.L18>:
			}
		}
	}
	//
	/* period */
	if (pid->pwm.dc.counter_ms >= (pid->pwm.timing.k_systemdelay_ton_ms + pid->algo.pid_out_max_ms + pid->pwm.timing.k_systemdelay_toff_ms) )
     b48:	81 a5       	ldd	r24, Z+41	; 0x29
     b4a:	92 a5       	ldd	r25, Z+42	; 0x2a
     b4c:	24 85       	ldd	r18, Z+12	; 0x0c
     b4e:	35 85       	ldd	r19, Z+13	; 0x0d
     b50:	82 0f       	add	r24, r18
     b52:	93 1f       	adc	r25, r19

00000b54 <.Loc.98>:
     b54:	23 a5       	ldd	r18, Z+43	; 0x2b
     b56:	34 a5       	ldd	r19, Z+44	; 0x2c
     b58:	82 0f       	add	r24, r18
     b5a:	93 1f       	adc	r25, r19

00000b5c <.Loc.99>:
     b5c:	26 8d       	ldd	r18, Z+30	; 0x1e
     b5e:	37 8d       	ldd	r19, Z+31	; 0x1f
     b60:	28 17       	cp	r18, r24
     b62:	39 07       	cpc	r19, r25
     b64:	e0 f0       	brcs	.+56     	; 0xb9e <.L17>

00000b66 <.Loc.100>:
	{
		pid->pwm.dc.counter_ms = 0;
     b66:	16 8e       	std	Z+30, r1	; 0x1e
     b68:	17 8e       	std	Z+31, r1	; 0x1f

00000b6a <.Loc.102>:
		//
		pid->pwm.timing.sm0 = 0;
     b6a:	14 a2       	std	Z+36, r1	; 0x24

00000b6c <.Loc.104>:
		//
		pid_pwm_stablish_levelpin(pid);
     b6c:	cf 01       	movw	r24, r30
     b6e:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <pid_pwm_stablish_levelpin>

00000b72 <.L19>:
			else if (pid->pwm.timing.sm0 == 1)
     b72:	51 f7       	brne	.-44     	; 0xb48 <.L18>

00000b74 <.Loc.107>:
				if (pid->pwm.dc.counter_ms >= pid->pwm.dc.ktop_uploaded_ms)
     b74:	82 17       	cp	r24, r18
     b76:	93 07       	cpc	r25, r19
     b78:	38 f3       	brcs	.-50     	; 0xb48 <.L18>

00000b7a <.Loc.109>:
					if (pid->pwm.dc.ktop_uploaded_ms < pid->algo.pid_out_max_ms)
     b7a:	84 85       	ldd	r24, Z+12	; 0x0c
     b7c:	95 85       	ldd	r25, Z+13	; 0x0d
     b7e:	28 17       	cp	r18, r24
     b80:	39 07       	cpc	r19, r25
     b82:	14 f7       	brge	.-60     	; 0xb48 <.L18>

00000b84 <.Loc.111>:
						PinTo0(*pid->pwm.io.port, pid->pwm.io.pin);
     b84:	a5 a5       	ldd	r26, Z+45	; 0x2d
     b86:	b6 a5       	ldd	r27, Z+46	; 0x2e
     b88:	2c 91       	ld	r18, X
     b8a:	37 a5       	ldd	r19, Z+47	; 0x2f
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <.L2^B3>

00000b90 <.L1^B3>:
     b90:	88 0f       	add	r24, r24

00000b92 <.L2^B3>:
     b92:	3a 95       	dec	r19
     b94:	ea f7       	brpl	.-6      	; 0xb90 <.L1^B3>
     b96:	80 95       	com	r24
     b98:	82 23       	and	r24, r18
     b9a:	8c 93       	st	X, r24
     b9c:	d5 cf       	rjmp	.-86     	; 0xb48 <.L18>

00000b9e <.L17>:
//		{
//			PinTo1(*pid->pwm.io.port, pid->pwm.io.pin);
//		}
		//
	}
}
     b9e:	08 95       	ret

00000ba0 <pid_job>:
{
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	ec 01       	movw	r28, r24

00000ba6 <.Loc.116>:
	pid_find_ktop_ms(pid, error);
     ba6:	0e 94 6b 05 	call	0xad6	; 0xad6 <pid_find_ktop_ms>

00000baa <.LVL27>:
	if (mainflag.sysTickMs)
     baa:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

00000bae <.Loc.119>:
     bae:	80 ff       	sbrs	r24, 0
     bb0:	11 c0       	rjmp	.+34     	; 0xbd4 <.L21>

00000bb2 <.Loc.120>:
		if (++pid->pwm.timing.counter_ticks_ms >= pid->pwm.timing.kmax_ticks_ms)
     bb2:	8d a1       	ldd	r24, Y+37	; 0x25
     bb4:	9e a1       	ldd	r25, Y+38	; 0x26
     bb6:	01 96       	adiw	r24, 0x01	; 1

00000bb8 <.Loc.122>:
     bb8:	8d a3       	std	Y+37, r24	; 0x25
     bba:	9e a3       	std	Y+38, r25	; 0x26
     bbc:	2f a1       	ldd	r18, Y+39	; 0x27
     bbe:	38 a5       	ldd	r19, Y+40	; 0x28
     bc0:	82 17       	cp	r24, r18
     bc2:	93 07       	cpc	r25, r19
     bc4:	38 f0       	brcs	.+14     	; 0xbd4 <.L21>

00000bc6 <.Loc.123>:
			pid->pwm.timing.counter_ticks_ms = 0x00;
     bc6:	1d a2       	std	Y+37, r1	; 0x25
     bc8:	1e a2       	std	Y+38, r1	; 0x26

00000bca <.Loc.125>:
			pid_pwm_control(pid);
     bca:	ce 01       	movw	r24, r28

00000bcc <.Loc.126>:
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28

00000bd0 <.Loc.127>:
			pid_pwm_control(pid);
     bd0:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <pid_pwm_control>

00000bd4 <.L21>:
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28

00000bd8 <.Loc.129>:
     bd8:	08 95       	ret

00000bda <indicator_setPortPin>:

volatile struct _indicator indicator;

void indicator_setPortPin(volatile unsigned char *Port8bits, int8_t pin)
{
	indicator.Port8bits = Port8bits;
     bda:	e9 ed       	ldi	r30, 0xD9	; 217
     bdc:	f5 e0       	ldi	r31, 0x05	; 5
     bde:	90 87       	std	Z+8, r25	; 0x08
     be0:	87 83       	std	Z+7, r24	; 0x07

00000be2 <.Loc.3>:
	indicator.pin = pin;
     be2:	61 87       	std	Z+9, r22	; 0x09

00000be4 <.Loc.5>:
}
     be4:	08 95       	ret

00000be6 <indicatorTimed_setKSysTickTime_ms>:
	indicator.KOff_MAX = KSysTickTimeOff_ms;
}
#else
void indicatorTimed_setKSysTickTime_ms(uint16_t KSysTickTime_ms)// div by SYSTICK_MS
{
	indicator.KOn_MAX = KSysTickTime_ms;
     be6:	90 93 dd 05 	sts	0x05DD, r25	; 0x8005dd <indicator+0x4>
     bea:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <indicator+0x3>

00000bee <.Loc.9>:
}
     bee:	08 95       	ret

00000bf0 <indicatorTimed_run>:
#endif

void indicatorTimed_run(void)//indicator
{
	indicator.sm0 = 1;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <indicator>

00000bf6 <.Loc.13>:
}
     bf6:	08 95       	ret

00000bf8 <indicatorTimed_stop>:
void indicatorTimed_stop(void)
{
	PinTo0(*indicator.Port8bits, indicator.pin);
     bf8:	e9 ed       	ldi	r30, 0xD9	; 217
     bfa:	f5 e0       	ldi	r31, 0x05	; 5
     bfc:	31 85       	ldd	r19, Z+9	; 0x09
     bfe:	a7 81       	ldd	r26, Z+7	; 0x07
     c00:	b0 85       	ldd	r27, Z+8	; 0x08
     c02:	2c 91       	ld	r18, X
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	01 c0       	rjmp	.+2      	; 0xc0a <.L2^B1>

00000c08 <.L1^B1>:
     c08:	88 0f       	add	r24, r24

00000c0a <.L2^B1>:
     c0a:	3a 95       	dec	r19
     c0c:	ea f7       	brpl	.-6      	; 0xc08 <.L1^B1>
     c0e:	80 95       	com	r24
     c10:	82 23       	and	r24, r18
     c12:	8c 93       	st	X, r24

00000c14 <.Loc.17>:
	indicator.sm0 = 0;
     c14:	10 82       	st	Z, r1

00000c16 <.Loc.20>:
}
     c16:	08 95       	ret

00000c18 <indicatorTimed_cycle_start>:
//
void indicatorTimed_cycle_start(void)
{
	indicator.sm0 = 3;
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <indicator>

00000c1e <.Loc.24>:
}
     c1e:	08 95       	ret

00000c20 <indicator_on>:
 * pero este job es por tiempo, deberia llamarse indicator_timing
 */

void indicator_on(void)
{
	PinTo1(*indicator.Port8bits, indicator.pin);
     c20:	e9 ed       	ldi	r30, 0xD9	; 217
     c22:	f5 e0       	ldi	r31, 0x05	; 5
     c24:	91 85       	ldd	r25, Z+9	; 0x09
     c26:	07 80       	ldd	r0, Z+7	; 0x07
     c28:	f0 85       	ldd	r31, Z+8	; 0x08
     c2a:	e0 2d       	mov	r30, r0
     c2c:	80 81       	ld	r24, Z
     c2e:	21 e0       	ldi	r18, 0x01	; 1
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <.L2^B2>

00000c32 <.L1^B2>:
     c32:	22 0f       	add	r18, r18

00000c34 <.L2^B2>:
     c34:	9a 95       	dec	r25
     c36:	ea f7       	brpl	.-6      	; 0xc32 <.L1^B2>
     c38:	82 2b       	or	r24, r18
     c3a:	80 83       	st	Z, r24

00000c3c <.Loc.28>:
}
     c3c:	08 95       	ret

00000c3e <indicator_off>:
void indicator_off(void)
{
	PinTo0(*indicator.Port8bits, indicator.pin);
     c3e:	e9 ed       	ldi	r30, 0xD9	; 217
     c40:	f5 e0       	ldi	r31, 0x05	; 5
     c42:	31 85       	ldd	r19, Z+9	; 0x09
     c44:	07 80       	ldd	r0, Z+7	; 0x07
     c46:	f0 85       	ldd	r31, Z+8	; 0x08
     c48:	e0 2d       	mov	r30, r0
     c4a:	20 81       	ld	r18, Z
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <.L2^B3>

00000c50 <.L1^B3>:
     c50:	88 0f       	add	r24, r24

00000c52 <.L2^B3>:
     c52:	3a 95       	dec	r19
     c54:	ea f7       	brpl	.-6      	; 0xc50 <.L1^B3>
     c56:	80 95       	com	r24
     c58:	82 23       	and	r24, r18
     c5a:	80 83       	st	Z, r24

00000c5c <.Loc.33>:
}
     c5c:	08 95       	ret

00000c5e <indicatorTimed_job>:
void indicatorTimed_job(void)
{
	//1 ON, run and stop automatically
	if (indicator.sm0 == 1)
     c5e:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <indicator>

00000c62 <.Loc.38>:
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	99 f5       	brne	.+102    	; 0xccc <.L9>

00000c66 <.Loc.39>:
	{
		PinTo1(*indicator.Port8bits, indicator.pin);
     c66:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <indicator+0x9>
     c6a:	e0 91 e0 05 	lds	r30, 0x05E0	; 0x8005e0 <indicator+0x7>
     c6e:	f0 91 e1 05 	lds	r31, 0x05E1	; 0x8005e1 <indicator+0x8>
     c72:	80 81       	ld	r24, Z
     c74:	21 e0       	ldi	r18, 0x01	; 1
     c76:	01 c0       	rjmp	.+2      	; 0xc7a <.L2^B4>

00000c78 <.L1^B4>:
     c78:	22 0f       	add	r18, r18

00000c7a <.L2^B4>:
     c7a:	9a 95       	dec	r25
     c7c:	ea f7       	brpl	.-6      	; 0xc78 <.L1^B4>
     c7e:	82 2b       	or	r24, r18
     c80:	80 83       	st	Z, r24

00000c82 <.Loc.41>:
		indicator.counter0 = 0;
     c82:	10 92 db 05 	sts	0x05DB, r1	; 0x8005db <indicator+0x2>
     c86:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <indicator+0x1>

00000c8a <.Loc.44>:
		indicator.sm0++;
     c8a:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <indicator>

00000c8e <.Loc.46>:
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
     c90:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <indicator>

00000c94 <.L10>:
		}
	}


	//Cycle, stop by user
	if (indicator.sm0 == 3)
     c94:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <indicator>

00000c98 <.Loc.49>:
     c98:	83 30       	cpi	r24, 0x03	; 3
     c9a:	d9 f5       	brne	.+118    	; 0xd12 <.L13>

00000c9c <.Loc.50>:
	{
		PinToggle(*indicator.Port8bits, indicator.pin);
     c9c:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <indicator+0x9>
     ca0:	e0 91 e0 05 	lds	r30, 0x05E0	; 0x8005e0 <indicator+0x7>
     ca4:	f0 91 e1 05 	lds	r31, 0x05E1	; 0x8005e1 <indicator+0x8>
     ca8:	80 81       	ld	r24, Z
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <.L2^B5>

00000cae <.L1^B5>:
     cae:	22 0f       	add	r18, r18

00000cb0 <.L2^B5>:
     cb0:	9a 95       	dec	r25
     cb2:	ea f7       	brpl	.-6      	; 0xcae <.L1^B5>
     cb4:	82 27       	eor	r24, r18
     cb6:	80 83       	st	Z, r24

00000cb8 <.Loc.52>:
		indicator.counter0 = 0;
     cb8:	10 92 db 05 	sts	0x05DB, r1	; 0x8005db <indicator+0x2>
     cbc:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <indicator+0x1>

00000cc0 <.Loc.55>:
		indicator.sm0++;
     cc0:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <indicator>

00000cc4 <.Loc.57>:
     cc4:	8f 5f       	subi	r24, 0xFF	; 255

00000cc6 <.L23>:
	{
		if (mainflag.sysTickMs)
		{
			if (++indicator.counter0 >= indicator.KOn_MAX)
			{
				indicator.sm0--;
     cc6:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <indicator>

00000cca <.L8>:
			}
		}
	}

}
     cca:	08 95       	ret

00000ccc <.L9>:
	else if (indicator.sm0 == 2)
     ccc:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <indicator>

00000cd0 <.Loc.62>:
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	01 f7       	brne	.-64     	; 0xc94 <.L10>

00000cd4 <.Loc.63>:
		if (mainflag.sysTickMs)
     cd4:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

00000cd8 <.Loc.65>:
     cd8:	80 ff       	sbrs	r24, 0
     cda:	dc cf       	rjmp	.-72     	; 0xc94 <.L10>

00000cdc <.Loc.66>:
			indicator.counter0++;
     cdc:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <indicator+0x1>
     ce0:	90 91 db 05 	lds	r25, 0x05DB	; 0x8005db <indicator+0x2>

00000ce4 <.Loc.68>:
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	90 93 db 05 	sts	0x05DB, r25	; 0x8005db <indicator+0x2>
     cea:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <indicator+0x1>

00000cee <.Loc.69>:
			if (indicator.counter0 >= indicator.KOn_MAX)
     cee:	20 91 da 05 	lds	r18, 0x05DA	; 0x8005da <indicator+0x1>
     cf2:	30 91 db 05 	lds	r19, 0x05DB	; 0x8005db <indicator+0x2>

00000cf6 <.Loc.71>:
     cf6:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <indicator+0x3>
     cfa:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <indicator+0x4>

00000cfe <.Loc.72>:
     cfe:	28 17       	cp	r18, r24
     d00:	39 07       	cpc	r19, r25
     d02:	40 f2       	brcs	.-112    	; 0xc94 <.L10>

00000d04 <.Loc.73>:
				indicator.counter0 = 0;
     d04:	10 92 db 05 	sts	0x05DB, r1	; 0x8005db <indicator+0x2>
     d08:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <indicator+0x1>

00000d0c <.Loc.75>:
				indicatorTimed_stop();
     d0c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <indicatorTimed_stop>

00000d10 <.LVL2>:
     d10:	c1 cf       	rjmp	.-126    	; 0xc94 <.L10>

00000d12 <.L13>:
	else if (indicator.sm0 == 4)
     d12:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <indicator>

00000d16 <.Loc.78>:
     d16:	84 30       	cpi	r24, 0x04	; 4
     d18:	c1 f6       	brne	.-80     	; 0xcca <.L8>

00000d1a <.Loc.79>:
		if (mainflag.sysTickMs)
     d1a:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

00000d1e <.Loc.81>:
     d1e:	80 ff       	sbrs	r24, 0
     d20:	d4 cf       	rjmp	.-88     	; 0xcca <.L8>

00000d22 <.Loc.82>:
			if (++indicator.counter0 >= indicator.KOn_MAX)
     d22:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <indicator+0x1>
     d26:	90 91 db 05 	lds	r25, 0x05DB	; 0x8005db <indicator+0x2>

00000d2a <.Loc.84>:
     d2a:	01 96       	adiw	r24, 0x01	; 1

00000d2c <.Loc.85>:
     d2c:	90 93 db 05 	sts	0x05DB, r25	; 0x8005db <indicator+0x2>
     d30:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <indicator+0x1>

00000d34 <.Loc.86>:
     d34:	20 91 dc 05 	lds	r18, 0x05DC	; 0x8005dc <indicator+0x3>
     d38:	30 91 dd 05 	lds	r19, 0x05DD	; 0x8005dd <indicator+0x4>

00000d3c <.Loc.87>:
     d3c:	82 17       	cp	r24, r18
     d3e:	93 07       	cpc	r25, r19
     d40:	20 f2       	brcs	.-120    	; 0xcca <.L8>

00000d42 <.Loc.88>:
				indicator.sm0--;
     d42:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <indicator>

00000d46 <.Loc.90>:
     d46:	81 50       	subi	r24, 0x01	; 1
     d48:	be cf       	rjmp	.-132    	; 0xcc6 <.L23>

00000d4a <keyRead_pin_key0>:

#ifdef iKEY
    static inline uint8_t keyRead_pin_key0(void)
    {
        return ReadPin(PORTRxKB_KEY0, PINxKB_KEY0);
    }
     d4a:	88 27       	eor	r24, r24
     d4c:	81 99       	sbic	0x10, 1	; 16
     d4e:	83 95       	inc	r24
     d50:	08 95       	ret

00000d52 <keyRead_pin_key1>:
    static inline uint8_t keyRead_pin_key1(void)
    {
        return ReadPin(PORTRxKB_KEY1, PINxKB_KEY1);
     d52:	80 b3       	in	r24, 0x10	; 16

00000d54 <.Loc.6>:
    }
     d54:	81 70       	andi	r24, 0x01	; 1
     d56:	08 95       	ret

00000d58 <keyRead_pin_key2>:
    static inline uint8_t keyRead_pin_key2(void)
    {
        return ReadPin(PORTRxKB_KEY2, PINxKB_KEY2);
    }
     d58:	88 27       	eor	r24, r24
     d5a:	b3 99       	sbic	0x16, 3	; 22
     d5c:	83 95       	inc	r24
     d5e:	08 95       	ret

00000d60 <keyRead_pin_key3>:
    static inline uint8_t keyRead_pin_key3(void)
    {
        return ReadPin(PORTRxKB_KEY3, PINxKB_KEY3);
    }
     d60:	88 27       	eor	r24, r24
     d62:	86 99       	sbic	0x10, 6	; 16
     d64:	83 95       	inc	r24
     d66:	08 95       	ret

00000d68 <keyRead_pin_key4>:
    static inline uint8_t keyRead_pin_key4(void)
    {
        return ReadPin(PORTRxKB_KEY4, PINxKB_KEY4);
    }
     d68:	88 27       	eor	r24, r24
     d6a:	c9 99       	sbic	0x19, 1	; 25
     d6c:	83 95       	inc	r24
     d6e:	08 95       	ret

00000d70 <keyRead_pin_key5>:
    static inline uint8_t keyRead_pin_key5(void)
	{
		return ReadPin(PORTRxKB_KEY5, PINxKB_KEY5);
     d70:	86 b3       	in	r24, 0x16	; 22

00000d72 <.Loc.19>:
	}
     d72:	81 70       	andi	r24, 0x01	; 1
     d74:	08 95       	ret

00000d76 <keyRead_pin_key6>:
    static inline uint8_t keyRead_pin_key6(void)
	{
		return ReadPin(PORTRxKB_KEY6, PINxKB_KEY6);
	}
     d76:	88 27       	eor	r24, r24
     d78:	cb 99       	sbic	0x19, 3	; 25
     d7a:	83 95       	inc	r24
     d7c:	08 95       	ret

00000d7e <ikb_setKeyProp>:

   
#endif // iKEY

void ikb_setKeyProp(uint8_t i, struct _key_prop prop)
{
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	00 d0       	rcall	.+0      	; 0xd84 <L0^A>

00000d84 <L0^A>:
     d84:	00 d0       	rcall	.+0      	; 0xd86 <L0^A>

00000d86 <L0^A>:
     d86:	00 d0       	rcall	.+0      	; 0xd88 <L0^A>

00000d88 <L0^A>:
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	29 83       	std	Y+1, r18	; 0x01
     d8e:	3a 83       	std	Y+2, r19	; 0x02
     d90:	4b 83       	std	Y+3, r20	; 0x03
     d92:	5c 83       	std	Y+4, r21	; 0x04
     d94:	6d 83       	std	Y+5, r22	; 0x05
     d96:	7e 83       	std	Y+6, r23	; 0x06

00000d98 <.Loc.25>:
    key[i].prop = prop;
     d98:	90 e1       	ldi	r25, 0x10	; 16
     d9a:	89 9f       	mul	r24, r25
     d9c:	d0 01       	movw	r26, r0
     d9e:	11 24       	eor	r1, r1
     da0:	ad 50       	subi	r26, 0x0D	; 13
     da2:	ba 4f       	sbci	r27, 0xFA	; 250
     da4:	86 e0       	ldi	r24, 0x06	; 6

00000da6 <.Loc.27>:
     da6:	fe 01       	movw	r30, r28
     da8:	31 96       	adiw	r30, 0x01	; 1

00000daa <.L0^B1>:
     daa:	01 90       	ld	r0, Z+
     dac:	0d 92       	st	X+, r0
     dae:	8a 95       	dec	r24
     db0:	e1 f7       	brne	.-8      	; 0xdaa <.L0^B1>

00000db2 <.Loc.28>:
}
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <ikb_init>:
void ikb_init(void)
{
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 d0       	rcall	.+0      	; 0xdcc <L0^A>

00000dcc <L0^A>:
     dcc:	00 d0       	rcall	.+0      	; 0xdce <L0^A>

00000dce <L0^A>:
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <L0^A>

00000dd0 <L0^A>:
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62

00000dd4 <.Loc.30>:
//        PinTo1(PORTWxKB_KEY6, PINxKB_KEY6);
//        PinTo1(PORTWxKB_KEY7, PINxKB_KEY7);
//        PinTo1(PORTWxKB_KEY8, PINxKB_KEY8);


        ConfigInputPin(CONFIGIOxKB_KEY0, PINxKB_KEY0);
     dd4:	89 98       	cbi	0x11, 1	; 17

00000dd6 <.Loc.33>:
        ConfigInputPin(CONFIGIOxKB_KEY1, PINxKB_KEY1);
     dd6:	88 98       	cbi	0x11, 0	; 17

00000dd8 <.Loc.36>:
        ConfigInputPin(CONFIGIOxKB_KEY2, PINxKB_KEY2);
     dd8:	bb 98       	cbi	0x17, 3	; 23

00000dda <.Loc.39>:
        ConfigInputPin(CONFIGIOxKB_KEY3, PINxKB_KEY3);
     dda:	8e 98       	cbi	0x11, 6	; 17

00000ddc <.Loc.42>:
        ConfigInputPin(CONFIGIOxKB_KEY4, PINxKB_KEY4);
     ddc:	d1 98       	cbi	0x1a, 1	; 26

00000dde <.Loc.45>:
        ConfigInputPin(CONFIGIOxKB_KEY5, PINxKB_KEY5);
     dde:	b8 98       	cbi	0x17, 0	; 23

00000de0 <.Loc.48>:
		ConfigInputPin(CONFIGIOxKB_KEY6, PINxKB_KEY6);
     de0:	d3 98       	cbi	0x1a, 3	; 26

00000de2 <.Loc.51>:

        key[0].keyRead = keyRead_pin_key0;
     de2:	85 ea       	ldi	r24, 0xA5	; 165
     de4:	96 e0       	ldi	r25, 0x06	; 6
     de6:	90 93 eb 05 	sts	0x05EB, r25	; 0x8005eb <key+0x1>
     dea:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <key>

00000dee <.Loc.54>:
        key[1].keyRead = keyRead_pin_key1;
     dee:	89 ea       	ldi	r24, 0xA9	; 169
     df0:	96 e0       	ldi	r25, 0x06	; 6
     df2:	90 93 fb 05 	sts	0x05FB, r25	; 0x8005fb <key+0x11>
     df6:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <key+0x10>

00000dfa <.Loc.56>:
        key[2].keyRead = keyRead_pin_key2;
     dfa:	8c ea       	ldi	r24, 0xAC	; 172
     dfc:	96 e0       	ldi	r25, 0x06	; 6
     dfe:	90 93 0b 06 	sts	0x060B, r25	; 0x80060b <key+0x21>
     e02:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <key+0x20>

00000e06 <.Loc.58>:
        key[3].keyRead = keyRead_pin_key3;
     e06:	80 eb       	ldi	r24, 0xB0	; 176
     e08:	96 e0       	ldi	r25, 0x06	; 6
     e0a:	90 93 1b 06 	sts	0x061B, r25	; 0x80061b <key+0x31>
     e0e:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <key+0x30>

00000e12 <.Loc.60>:
        key[4].keyRead = keyRead_pin_key4;
     e12:	84 eb       	ldi	r24, 0xB4	; 180
     e14:	96 e0       	ldi	r25, 0x06	; 6
     e16:	90 93 2b 06 	sts	0x062B, r25	; 0x80062b <key+0x41>
     e1a:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <key+0x40>

00000e1e <.Loc.62>:
        key[5].keyRead = keyRead_pin_key5;
     e1e:	88 eb       	ldi	r24, 0xB8	; 184
     e20:	96 e0       	ldi	r25, 0x06	; 6
     e22:	90 93 3b 06 	sts	0x063B, r25	; 0x80063b <key+0x51>
     e26:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <key+0x50>

00000e2a <.Loc.64>:
		key[6].keyRead = keyRead_pin_key6;
     e2a:	8b eb       	ldi	r24, 0xBB	; 187
     e2c:	96 e0       	ldi	r25, 0x06	; 6
     e2e:	90 93 4b 06 	sts	0x064B, r25	; 0x80064b <key+0x61>
     e32:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <key+0x60>

00000e36 <.Loc.66>:


    #endif // iKEY

    //++--by default init with onKeyPressed = 1
    struct _key_prop prop = {0};
     e36:	fe 01       	movw	r30, r28
     e38:	31 96       	adiw	r30, 0x01	; 1
     e3a:	86 e0       	ldi	r24, 0x06	; 6
     e3c:	df 01       	movw	r26, r30

00000e3e <.L0^B2>:
     e3e:	1d 92       	st	X+, r1
     e40:	8a 95       	dec	r24
     e42:	e9 f7       	brne	.-6      	; 0xe3e <.L0^B2>

00000e44 <.Loc.68>:
    prop = propEmpty;
    prop.uFlag.f.onKeyPressed = 1;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	81 60       	ori	r24, 0x01	; 1
     e48:	89 83       	std	Y+1, r24	; 0x01

00000e4a <.LVL2>:
    for (i=0; i< KB_NUM_KEYS; i++)
     e4a:	10 e0       	ldi	r17, 0x00	; 0

00000e4c <.L10>:
        {ikb_setKeyProp(i, prop);}
     e4c:	29 81       	ldd	r18, Y+1	; 0x01
     e4e:	3a 81       	ldd	r19, Y+2	; 0x02
     e50:	4b 81       	ldd	r20, Y+3	; 0x03
     e52:	5c 81       	ldd	r21, Y+4	; 0x04
     e54:	6d 81       	ldd	r22, Y+5	; 0x05
     e56:	7e 81       	ldd	r23, Y+6	; 0x06
     e58:	81 2f       	mov	r24, r17
     e5a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <ikb_setKeyProp>

00000e5e <.LVL4>:
    for (i=0; i< KB_NUM_KEYS; i++)
     e5e:	1f 5f       	subi	r17, 0xFF	; 255

00000e60 <.Loc.76>:
     e60:	17 30       	cpi	r17, 0x07	; 7
     e62:	a1 f7       	brne	.-24     	; 0xe4c <.L10>

00000e64 <.Loc.77>:
    //--++
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17

00000e76 <.Loc.78>:
     e76:	08 95       	ret

00000e78 <ikb_get_AtTimeExpired_BeforeOrAfter>:
{
    ikey_clear_all_flag();
}
uint8_t ikb_get_AtTimeExpired_BeforeOrAfter(uint8_t k)
{
    return key[k].statusFlag.atTimeExpired_beforeOrAfter;
     e78:	90 e1       	ldi	r25, 0x10	; 16
     e7a:	89 9f       	mul	r24, r25
     e7c:	f0 01       	movw	r30, r0
     e7e:	11 24       	eor	r1, r1
     e80:	e7 50       	subi	r30, 0x07	; 7
     e82:	fa 4f       	sbci	r31, 0xFA	; 250
     e84:	80 81       	ld	r24, Z

00000e86 <.Loc.82>:
}
     e86:	82 fb       	bst	r24, 2
     e88:	88 27       	eor	r24, r24
     e8a:	80 f9       	bld	r24, 0
     e8c:	08 95       	ret

00000e8e <ikb_key_is_ready2read>:
uint8_t ikb_key_is_ready2read(uint8_t k)
{
    return key[k].statusFlag.readyToRead;
     e8e:	90 e1       	ldi	r25, 0x10	; 16
     e90:	89 9f       	mul	r24, r25
     e92:	f0 01       	movw	r30, r0
     e94:	11 24       	eor	r1, r1
     e96:	e7 50       	subi	r30, 0x07	; 7
     e98:	fa 4f       	sbci	r31, 0xFA	; 250
     e9a:	80 81       	ld	r24, Z

00000e9c <.Loc.86>:
}
     e9c:	86 95       	lsr	r24
     e9e:	81 70       	andi	r24, 0x01	; 1
     ea0:	08 95       	ret

00000ea2 <ikb_set_ready2read>:
void ikb_set_ready2read(uint8_t k)
{
    key[k].statusFlag.readyToRead = 1;
     ea2:	90 e1       	ldi	r25, 0x10	; 16
     ea4:	89 9f       	mul	r24, r25
     ea6:	f0 01       	movw	r30, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	e7 50       	subi	r30, 0x07	; 7
     eac:	fa 4f       	sbci	r31, 0xFA	; 250
     eae:	80 81       	ld	r24, Z

00000eb0 <.Loc.90>:
     eb0:	82 60       	ori	r24, 0x02	; 2
     eb2:	80 83       	st	Z, r24

00000eb4 <.Loc.91>:
}
     eb4:	08 95       	ret

00000eb6 <ikb_key_was_read>:
void ikb_key_was_read(uint8_t k)
{
    key[k].statusFlag.readyToRead = 0;
     eb6:	90 e1       	ldi	r25, 0x10	; 16
     eb8:	89 9f       	mul	r24, r25
     eba:	f0 01       	movw	r30, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	e7 50       	subi	r30, 0x07	; 7
     ec0:	fa 4f       	sbci	r31, 0xFA	; 250
     ec2:	80 81       	ld	r24, Z

00000ec4 <.Loc.95>:
     ec4:	8d 7f       	andi	r24, 0xFD	; 253
     ec6:	80 83       	st	Z, r24

00000ec8 <.Loc.96>:
}
     ec8:	08 95       	ret

00000eca <ikb_execfunct>:
void ikb_execfunct(uint8_t k)
{
    key[k].keyDo();
     eca:	90 e1       	ldi	r25, 0x10	; 16
     ecc:	89 9f       	mul	r24, r25
     ece:	f0 01       	movw	r30, r0
     ed0:	11 24       	eor	r1, r1
     ed2:	e6 51       	subi	r30, 0x16	; 22
     ed4:	fa 4f       	sbci	r31, 0xFA	; 250
     ed6:	02 80       	ldd	r0, Z+2	; 0x02
     ed8:	f3 81       	ldd	r31, Z+3	; 0x03
     eda:	e0 2d       	mov	r30, r0

00000edc <.Loc.100>:
     edc:	09 94       	ijmp

00000ede <ikb_getKeyState>:
}
//#define KB_KEY_STATE_PRESSED 1
//#define KB_KEY_STATE_RELEASED 0
int8_t ikb_getKeyState(int8_t k)
{
	return key[k].statusFlag.state;
     ede:	90 e1       	ldi	r25, 0x10	; 16
     ee0:	89 02       	muls	r24, r25
     ee2:	f0 01       	movw	r30, r0
     ee4:	11 24       	eor	r1, r1
     ee6:	e7 50       	subi	r30, 0x07	; 7
     ee8:	fa 4f       	sbci	r31, 0xFA	; 250
     eea:	80 81       	ld	r24, Z

00000eec <.Loc.105>:
}
     eec:	81 70       	andi	r24, 0x01	; 1
     eee:	08 95       	ret

00000ef0 <ikb_getKeyStartPressed>:

int8_t ikb_getKeyStartPressed(int8_t k)
{
	return key[k].statusFlag.startPress;
     ef0:	90 e1       	ldi	r25, 0x10	; 16
     ef2:	89 02       	muls	r24, r25
     ef4:	f0 01       	movw	r30, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	e7 50       	subi	r30, 0x07	; 7
     efa:	fa 4f       	sbci	r31, 0xFA	; 250
     efc:	80 81       	ld	r24, Z

00000efe <.Loc.109>:
}
     efe:	85 fb       	bst	r24, 5
     f00:	88 27       	eor	r24, r24
     f02:	80 f9       	bld	r24, 0
     f04:	08 95       	ret

00000f06 <ikb_clearKeyStartPressed>:
void ikb_clearKeyStartPressed(int8_t k)
{
	key[k].statusFlag.startPress = 0;
     f06:	90 e1       	ldi	r25, 0x10	; 16
     f08:	89 02       	muls	r24, r25
     f0a:	f0 01       	movw	r30, r0
     f0c:	11 24       	eor	r1, r1
     f0e:	e7 50       	subi	r30, 0x07	; 7
     f10:	fa 4f       	sbci	r31, 0xFA	; 250
     f12:	80 81       	ld	r24, Z

00000f14 <.Loc.113>:
     f14:	8f 7d       	andi	r24, 0xDF	; 223
     f16:	80 83       	st	Z, r24

00000f18 <.Loc.114>:
}
     f18:	08 95       	ret

00000f1a <ikey_scan>:


#define IKEY_SCAN_SETUP_TIMEuS 5//us

void ikey_scan(void)
{
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29

00000f26 <.LVL23>:
     f26:	96 e0       	ldi	r25, 0x06	; 6
     f28:	e9 2e       	mov	r14, r25
     f2a:	f1 2c       	mov	r15, r1

00000f2c <.L29>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(__builtin_ceil(__builtin_fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f2c:	8a e1       	ldi	r24, 0x1A	; 26

00000f2e <.L1^B1>:
     f2e:	8a 95       	dec	r24
     f30:	f1 f7       	brne	.-4      	; 0xf2e <.L1^B1>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <L0^A>

00000f34 <L0^A>:
    int8_t k = KB_NUM_KEYS-1;
    do
    {
        __delay_us(IKEY_SCAN_SETUP_TIMEuS);
        
        if (key[k].sm0 == 0)
     f34:	87 01       	movw	r16, r14
     f36:	02 95       	swap	r16
     f38:	12 95       	swap	r17
     f3a:	10 7f       	andi	r17, 0xF0	; 240
     f3c:	10 27       	eor	r17, r16
     f3e:	00 7f       	andi	r16, 0xF0	; 240
     f40:	10 27       	eor	r17, r16
     f42:	e8 01       	movw	r28, r16
     f44:	c6 51       	subi	r28, 0x16	; 22
     f46:	da 4f       	sbci	r29, 0xFA	; 250
     f48:	8c 81       	ldd	r24, Y+4	; 0x04

00000f4a <.Loc.130>:
     f4a:	81 11       	cpse	r24, r1
     f4c:	06 c0       	rjmp	.+12     	; 0xf5a <.L21>

00000f4e <.Loc.131>:
        {
            if (key[k].keyRead() == KB_KEY_PINLEVEL_PRESSED)
     f4e:	e8 81       	ld	r30, Y
     f50:	f9 81       	ldd	r31, Y+1	; 0x01

00000f52 <.Loc.133>:
     f52:	09 95       	icall

00000f54 <.Loc.134>:
     f54:	81 15       	cp	r24, r1

00000f56 <.L34>:
                }
            }
        }
        else if (key[k].sm0 == 2)
        {
            if (key[k].keyRead() == KB_KEY_PINLEVEL_RELEASED)
     f56:	d9 f4       	brne	.+54     	; 0xf8e <.L23>
     f58:	17 c0       	rjmp	.+46     	; 0xf88 <.L31>

00000f5a <.L21>:
        else if (key[k].sm0 == 1)
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04

00000f5c <.Loc.138>:
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	11 f5       	brne	.+68     	; 0xfa4 <.L24>

00000f60 <.Loc.139>:
            if (++key[k].counter0 == KB_KEY_SCAN_COUNT_DEBOUNCE)
     f60:	8d 81       	ldd	r24, Y+5	; 0x05

00000f62 <.Loc.141>:
     f62:	8f 5f       	subi	r24, 0xFF	; 255

00000f64 <.Loc.142>:
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	91 f4       	brne	.+36     	; 0xf8e <.L23>

00000f6a <.Loc.143>:
                key[k].counter0 = 0x00;
     f6a:	1d 82       	std	Y+5, r1	; 0x05

00000f6c <.Loc.145>:
                if (key[k].keyRead() != KB_KEY_PINLEVEL_PRESSED)
     f6c:	e8 81       	ld	r30, Y
     f6e:	f9 81       	ldd	r31, Y+1	; 0x01

00000f70 <.Loc.147>:
     f70:	09 95       	icall

00000f72 <.Loc.148>:
     f72:	81 15       	cp	r24, r1
     f74:	19 f0       	breq	.+6      	; 0xf7c <.L26>

00000f76 <.L35>:
            {
                key[k].counter0 = 0x00;

                if (key[k].keyRead() != KB_KEY_PINLEVEL_RELEASED)
                {
                    key[k].sm0--;
     f76:	8c 81       	ldd	r24, Y+4	; 0x04

00000f78 <.Loc.151>:
     f78:	81 50       	subi	r24, 0x01	; 1
     f7a:	08 c0       	rjmp	.+16     	; 0xf8c <.L32>

00000f7c <.L26>:
                    key[k].statusFlag.state = KB_KEY_STATE_PRESSED;
     f7c:	f8 01       	movw	r30, r16
     f7e:	e7 50       	subi	r30, 0x07	; 7
     f80:	fa 4f       	sbci	r31, 0xFA	; 250
     f82:	80 81       	ld	r24, Z
     f84:	81 60       	ori	r24, 0x01	; 1
     f86:	80 83       	st	Z, r24

00000f88 <.L31>:
                    key[k].sm0++;
     f88:	8c 81       	ldd	r24, Y+4	; 0x04

00000f8a <.Loc.156>:
     f8a:	8f 5f       	subi	r24, 0xFF	; 255

00000f8c <.L32>:
     f8c:	8c 83       	std	Y+4, r24	; 0x04

00000f8e <.L23>:
                    key[k].sm0 = 0x00;
                }
            }
        }
    
    }while (--k >= 0);
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	e8 1a       	sub	r14, r24
     f92:	f1 08       	sbc	r15, r1
     f94:	58 f6       	brcc	.-106    	; 0xf2c <.L29>

00000f96 <.Loc.159>:
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14

00000fa2 <.Loc.160>:
     fa2:	08 95       	ret

00000fa4 <.L24>:
        else if (key[k].sm0 == 2)
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04

00000fa6 <.Loc.163>:
     fa6:	82 30       	cpi	r24, 0x02	; 2
     fa8:	29 f4       	brne	.+10     	; 0xfb4 <.L27>

00000faa <.Loc.164>:
            if (key[k].keyRead() == KB_KEY_PINLEVEL_RELEASED)
     faa:	e8 81       	ld	r30, Y
     fac:	f9 81       	ldd	r31, Y+1	; 0x01

00000fae <.Loc.166>:
     fae:	09 95       	icall

00000fb0 <.Loc.167>:
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	d1 cf       	rjmp	.-94     	; 0xf56 <.L34>

00000fb4 <.L27>:
        else if (key[k].sm0 == 3)
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04

00000fb6 <.Loc.170>:
     fb6:	83 30       	cpi	r24, 0x03	; 3
     fb8:	51 f7       	brne	.-44     	; 0xf8e <.L23>

00000fba <.Loc.171>:
            if (++key[k].counter0 == KB_KEY_SCAN_COUNT_DEBOUNCE)
     fba:	8d 81       	ldd	r24, Y+5	; 0x05

00000fbc <.Loc.173>:
     fbc:	8f 5f       	subi	r24, 0xFF	; 255

00000fbe <.Loc.174>:
     fbe:	8d 83       	std	Y+5, r24	; 0x05
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	29 f7       	brne	.-54     	; 0xf8e <.L23>

00000fc4 <.Loc.175>:
                key[k].counter0 = 0x00;
     fc4:	1d 82       	std	Y+5, r1	; 0x05

00000fc6 <.Loc.177>:
                if (key[k].keyRead() != KB_KEY_PINLEVEL_RELEASED)
     fc6:	e8 81       	ld	r30, Y
     fc8:	f9 81       	ldd	r31, Y+1	; 0x01

00000fca <.Loc.179>:
     fca:	09 95       	icall

00000fcc <.Loc.180>:
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	99 f6       	brne	.-90     	; 0xf76 <.L35>

00000fd0 <.Loc.181>:
                    key[k].statusFlag.state = KB_KEY_STATE_RELEASED;
     fd0:	f8 01       	movw	r30, r16
     fd2:	e7 50       	subi	r30, 0x07	; 7
     fd4:	fa 4f       	sbci	r31, 0xFA	; 250
     fd6:	80 81       	ld	r24, Z
     fd8:	8e 7f       	andi	r24, 0xFE	; 254
     fda:	80 83       	st	Z, r24

00000fdc <.Loc.183>:
                    key[k].sm0 = 0x00;
     fdc:	1c 82       	std	Y+4, r1	; 0x04
     fde:	d7 cf       	rjmp	.-82     	; 0xf8e <.L23>

00000fe0 <ikb_inReptt>:
    _STAGE_END_PARSING_,
};

int8_t ikb_inReptt(int8_t k)
{
	if (key[k].sm1 == _STAGE_REPTT_)
     fe0:	90 e1       	ldi	r25, 0x10	; 16
     fe2:	89 02       	muls	r24, r25
     fe4:	f0 01       	movw	r30, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	e6 51       	subi	r30, 0x16	; 22
     fea:	fa 4f       	sbci	r31, 0xFA	; 250
     fec:	96 81       	ldd	r25, Z+6	; 0x06

00000fee <.Loc.188>:
     fee:	81 e0       	ldi	r24, 0x01	; 1

00000ff0 <.Loc.189>:
     ff0:	98 30       	cpi	r25, 0x08	; 8
     ff2:	09 f4       	brne	.+2      	; 0xff6 <.L37>
     ff4:	80 e0       	ldi	r24, 0x00	; 0

00000ff6 <.L37>:
		return 0;
	else
		return 1;
}
     ff6:	08 95       	ret

00000ff8 <ikey_parsing>:

void ikey_parsing(void)
{
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29

00001000 <.LVL36>:
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0

00001004 <.Loc.196>:
        if (key[k].sm1 == _STAGE_REPTT_ )
        {
            if ( ++key[k].counter1 >= key[k].prop.repttTh.breakTime)
            {
                key[k].counter1 =0;
                key[k].sm1 = _STAGE_REPTT_1_;
    1004:	49 e0       	ldi	r20, 0x09	; 9

00001006 <.Loc.197>:
        if (key[k].sm1 == _STAGE_REPTT_1_)	//ping-pong between 1<->2
        {
            if (key[k].statusFlag.readyToRead == KBAPP_ALREADYREAD)			//ya leyo?
            {
                key[k].statusFlag.readyToRead = KBAPP_READY2READ;				//Repopulate again
                key[k].sm1 = _STAGE_REPTT_2_;
    1006:	ca e0       	ldi	r28, 0x0A	; 10

00001008 <.Loc.198>:
        if (key[k].sm1 == _STAGE_ONKEYRELEASED_ )
        {
            if (key[k].statusFlag.state == KB_KEY_STATE_RELEASED)	//ya solto?
            {
                key[k].statusFlag.readyToRead = KBAPP_READY2READ;							//Populate Key to app.
                key[k].sm1 = _STAGE_ISKEY_READFROMAPP_;		//esperar x leer
    1008:	53 e0       	ldi	r21, 0x03	; 3

0000100a <.Loc.199>:
        if (key[k].sm1 == _STAGE_ISKEY_RELEASED2_)		//added 2019
        {
            if (key[k].statusFlag.state == KB_KEY_STATE_RELEASED)					
            {
                key[k].statusFlag.readyToRead = KBAPP_ALREADYREAD;
                key[k].sm1 = _STAGE_END_PARSING_;
    100a:	62 e0       	ldi	r22, 0x02	; 2
    100c:	7b e0       	ldi	r23, 0x0B	; 11

0000100e <.L73>:
        if ( key[k].sm1 == _STAGE_START_PARSING_ )
    100e:	c9 01       	movw	r24, r18
    1010:	82 95       	swap	r24
    1012:	92 95       	swap	r25
    1014:	90 7f       	andi	r25, 0xF0	; 240
    1016:	98 27       	eor	r25, r24
    1018:	80 7f       	andi	r24, 0xF0	; 240
    101a:	98 27       	eor	r25, r24
    101c:	fc 01       	movw	r30, r24
    101e:	e6 51       	subi	r30, 0x16	; 22
    1020:	fa 4f       	sbci	r31, 0xFA	; 250
    1022:	a6 81       	ldd	r26, Z+6	; 0x06

00001024 <.Loc.202>:
    1024:	a1 11       	cpse	r26, r1
    1026:	40 c0       	rjmp	.+128    	; 0x10a8 <.L40>

00001028 <.LBB8>:
    if (key[k].prop.numGroup > NO_GROUP_X)	//esta agrupado ?
    1028:	a6 85       	ldd	r26, Z+14	; 0x0e

0000102a <.Loc.207>:
    102a:	a1 15       	cp	r26, r1
    102c:	69 f0       	breq	.+26     	; 0x1048 <.L41>

0000102e <.Loc.208>:
        if (group_x[key[k].prop.numGroup] == GROUP_LOCKED)
    102e:	e6 85       	ldd	r30, Z+14	; 0x0e
    1030:	f0 e0       	ldi	r31, 0x00	; 0

00001032 <.Loc.210>:
    1032:	ed 51       	subi	r30, 0x1D	; 29
    1034:	fa 4f       	sbci	r31, 0xFA	; 250

00001036 <.Loc.211>:
    1036:	e0 81       	ld	r30, Z
    1038:	e1 30       	cpi	r30, 0x01	; 1
    103a:	31 f4       	brne	.+12     	; 0x1048 <.L41>

0000103c <.Loc.212>:
            if ( !key[k].statusFlag.ownerOfGroup)	//Si no es quien gano la propiedad...
    103c:	fc 01       	movw	r30, r24
    103e:	e7 50       	subi	r30, 0x07	; 7
    1040:	fa 4f       	sbci	r31, 0xFA	; 250
    1042:	e0 81       	ld	r30, Z

00001044 <.Loc.214>:
    1044:	e3 ff       	sbrs	r30, 3
    1046:	30 c0       	rjmp	.+96     	; 0x10a8 <.L40>

00001048 <.L41>:
                if (key[k].statusFlag.state == KB_KEY_STATE_PRESSED)
    1048:	dc 01       	movw	r26, r24
    104a:	a7 50       	subi	r26, 0x07	; 7
    104c:	ba 4f       	sbci	r27, 0xFA	; 250
    104e:	ec 91       	ld	r30, X
    1050:	1e 2f       	mov	r17, r30
    1052:	11 70       	andi	r17, 0x01	; 1

00001054 <.Loc.218>:
    1054:	e0 ff       	sbrs	r30, 0
    1056:	28 c0       	rjmp	.+80     	; 0x10a8 <.L40>

00001058 <.Loc.219>:
                    if (key[k].prop.uFlag.f.onKeyPressed)
    1058:	fc 01       	movw	r30, r24
    105a:	ed 50       	subi	r30, 0x0D	; 13
    105c:	fa 4f       	sbci	r31, 0xFA	; 250
    105e:	d0 81       	ld	r29, Z

00001060 <.Loc.221>:
    1060:	d0 ff       	sbrs	r29, 0
    1062:	53 c1       	rjmp	.+678    	; 0x130a <.L43>

00001064 <.Loc.222>:
                        key[k].statusFlag.readyToRead = KBAPP_READY2READ;	//Populate Key to app.
    1064:	dc 91       	ld	r29, X
    1066:	d2 60       	ori	r29, 0x02	; 2
    1068:	dc 93       	st	X, r29

0000106a <.Loc.224>:
                        if (key[k].prop.uFlag.f.reptt)
    106a:	a0 81       	ld	r26, Z
    106c:	fc 01       	movw	r30, r24
    106e:	e6 51       	subi	r30, 0x16	; 22
    1070:	fa 4f       	sbci	r31, 0xFA	; 250

00001072 <.Loc.226>:
    1072:	a1 ff       	sbrs	r26, 1
    1074:	03 c0       	rjmp	.+6      	; 0x107c <.L44>

00001076 <.Loc.227>:
                            key[k].sm1 = _STAGE_REPTT_;
    1076:	a8 e0       	ldi	r26, 0x08	; 8

00001078 <.L90>:
                        key[k].sm1 = _STAGE_ONKEYRELEASED_;
    1078:	a6 83       	std	Z+6, r26	; 0x06
    107a:	01 c0       	rjmp	.+2      	; 0x107e <.L45>

0000107c <.L44>:
                            key[k].sm1 = _STAGE_ISKEY_RELEASED_;
    107c:	16 83       	std	Z+6, r17	; 0x06

0000107e <.L45>:
                    key[k].statusFlag.inProcessing = 1;
    107e:	dc 01       	movw	r26, r24
    1080:	a7 50       	subi	r26, 0x07	; 7
    1082:	ba 4f       	sbci	r27, 0xFA	; 250
    1084:	ec 91       	ld	r30, X
    1086:	e0 61       	ori	r30, 0x10	; 16
    1088:	ec 93       	st	X, r30

0000108a <.Loc.234>:
                    if (key[k].prop.numGroup > NO_GROUP_X)
    108a:	fc 01       	movw	r30, r24
    108c:	e6 51       	subi	r30, 0x16	; 22
    108e:	fa 4f       	sbci	r31, 0xFA	; 250
    1090:	d6 85       	ldd	r29, Z+14	; 0x0e

00001092 <.Loc.236>:
    1092:	d1 15       	cp	r29, r1
    1094:	49 f0       	breq	.+18     	; 0x10a8 <.L40>

00001096 <.Loc.237>:
                        group_x[ key[k].prop.numGroup ] = GROUP_LOCKED;
    1096:	e6 85       	ldd	r30, Z+14	; 0x0e
    1098:	f0 e0       	ldi	r31, 0x00	; 0

0000109a <.Loc.239>:
    109a:	ed 51       	subi	r30, 0x1D	; 29
    109c:	fa 4f       	sbci	r31, 0xFA	; 250
    109e:	d1 e0       	ldi	r29, 0x01	; 1
    10a0:	d0 83       	st	Z, r29

000010a2 <.Loc.240>:
                        key[k].statusFlag.ownerOfGroup = 1;
    10a2:	ec 91       	ld	r30, X
    10a4:	e8 60       	ori	r30, 0x08	; 8
    10a6:	ec 93       	st	X, r30

000010a8 <.L40>:
        if ( (key[k].sm1 >= _STAGE_REPTT_ ) && (key[k].sm1 <= _STAGE_REPTT_2_))
    10a8:	fc 01       	movw	r30, r24
    10aa:	e6 51       	subi	r30, 0x16	; 22
    10ac:	fa 4f       	sbci	r31, 0xFA	; 250
    10ae:	a6 81       	ldd	r26, Z+6	; 0x06

000010b0 <.Loc.244>:
    10b0:	a8 30       	cpi	r26, 0x08	; 8
    10b2:	68 f0       	brcs	.+26     	; 0x10ce <.L49>

000010b4 <.Loc.245>:
    10b4:	a6 81       	ldd	r26, Z+6	; 0x06

000010b6 <.Loc.246>:
    10b6:	ab 30       	cpi	r26, 0x0B	; 11
    10b8:	50 f4       	brcc	.+20     	; 0x10ce <.L49>

000010ba <.Loc.247>:
            if (key[k].statusFlag.state == KB_KEY_STATE_RELEASED)			//ya solto?
    10ba:	dc 01       	movw	r26, r24
    10bc:	a7 50       	subi	r26, 0x07	; 7
    10be:	ba 4f       	sbci	r27, 0xFA	; 250
    10c0:	ac 91       	ld	r26, X

000010c2 <.Loc.249>:
    10c2:	a0 fd       	sbrc	r26, 0
    10c4:	04 c0       	rjmp	.+8      	; 0x10ce <.L49>

000010c6 <.Loc.250>:
                key[k].counter1 = 0;				//stop timmer
    10c6:	10 86       	std	Z+8, r1	; 0x08
    10c8:	17 82       	std	Z+7, r1	; 0x07

000010ca <.Loc.252>:
                key[k].sm1 = _STAGE_ISKEY_READFROMAPP_;
    10ca:	a3 e0       	ldi	r26, 0x03	; 3
    10cc:	a6 83       	std	Z+6, r26	; 0x06

000010ce <.L49>:
        if (key[k].sm1 == _STAGE_REPTT_ )
    10ce:	fc 01       	movw	r30, r24
    10d0:	e6 51       	subi	r30, 0x16	; 22
    10d2:	fa 4f       	sbci	r31, 0xFA	; 250
    10d4:	a6 81       	ldd	r26, Z+6	; 0x06

000010d6 <.Loc.256>:
    10d6:	a8 30       	cpi	r26, 0x08	; 8
    10d8:	69 f4       	brne	.+26     	; 0x10f4 <.L51>

000010da <.Loc.257>:
            if ( ++key[k].counter1 >= key[k].prop.repttTh.breakTime)
    10da:	a7 81       	ldd	r26, Z+7	; 0x07
    10dc:	b0 85       	ldd	r27, Z+8	; 0x08

000010de <.Loc.259>:
    10de:	11 96       	adiw	r26, 0x01	; 1

000010e0 <.Loc.260>:
    10e0:	b0 87       	std	Z+8, r27	; 0x08
    10e2:	a7 83       	std	Z+7, r26	; 0x07

000010e4 <.Loc.261>:
    10e4:	02 85       	ldd	r16, Z+10	; 0x0a
    10e6:	13 85       	ldd	r17, Z+11	; 0x0b

000010e8 <.Loc.262>:
    10e8:	a0 17       	cp	r26, r16
    10ea:	b1 07       	cpc	r27, r17
    10ec:	18 f0       	brcs	.+6      	; 0x10f4 <.L51>

000010ee <.Loc.263>:
                key[k].counter1 =0;
    10ee:	10 86       	std	Z+8, r1	; 0x08
    10f0:	17 82       	std	Z+7, r1	; 0x07

000010f2 <.Loc.265>:
                key[k].sm1 = _STAGE_REPTT_1_;
    10f2:	46 83       	std	Z+6, r20	; 0x06

000010f4 <.L51>:
        if (key[k].sm1 == _STAGE_REPTT_1_)	//ping-pong between 1<->2
    10f4:	dc 01       	movw	r26, r24
    10f6:	a6 51       	subi	r26, 0x16	; 22
    10f8:	ba 4f       	sbci	r27, 0xFA	; 250
    10fa:	16 96       	adiw	r26, 0x06	; 6
    10fc:	ec 91       	ld	r30, X
    10fe:	16 97       	sbiw	r26, 0x06	; 6

00001100 <.Loc.269>:
    1100:	e9 30       	cpi	r30, 0x09	; 9
    1102:	59 f4       	brne	.+22     	; 0x111a <.L53>

00001104 <.Loc.270>:
            if (key[k].statusFlag.readyToRead == KBAPP_ALREADYREAD)			//ya leyo?
    1104:	fc 01       	movw	r30, r24
    1106:	e7 50       	subi	r30, 0x07	; 7
    1108:	fa 4f       	sbci	r31, 0xFA	; 250
    110a:	d0 81       	ld	r29, Z

0000110c <.Loc.272>:
    110c:	d1 fd       	sbrc	r29, 1
    110e:	05 c0       	rjmp	.+10     	; 0x111a <.L53>

00001110 <.Loc.273>:
                key[k].statusFlag.readyToRead = KBAPP_READY2READ;				//Repopulate again
    1110:	d0 81       	ld	r29, Z
    1112:	d2 60       	ori	r29, 0x02	; 2
    1114:	d0 83       	st	Z, r29

00001116 <.Loc.275>:
                key[k].sm1 = _STAGE_REPTT_2_;
    1116:	16 96       	adiw	r26, 0x06	; 6
    1118:	cc 93       	st	X, r28

0000111a <.L53>:
        if (key[k].sm1 == _STAGE_REPTT_2_)	//ping-pong 2<->1
    111a:	fc 01       	movw	r30, r24
    111c:	e6 51       	subi	r30, 0x16	; 22
    111e:	fa 4f       	sbci	r31, 0xFA	; 250
    1120:	a6 81       	ldd	r26, Z+6	; 0x06

00001122 <.Loc.279>:
    1122:	aa 30       	cpi	r26, 0x0A	; 10
    1124:	69 f4       	brne	.+26     	; 0x1140 <.L55>

00001126 <.Loc.280>:
            if ( ++key[k].counter1 >= key[k].prop.repttTh.period)
    1126:	a7 81       	ldd	r26, Z+7	; 0x07
    1128:	b0 85       	ldd	r27, Z+8	; 0x08

0000112a <.Loc.282>:
    112a:	11 96       	adiw	r26, 0x01	; 1

0000112c <.Loc.283>:
    112c:	b0 87       	std	Z+8, r27	; 0x08
    112e:	a7 83       	std	Z+7, r26	; 0x07

00001130 <.Loc.284>:
    1130:	04 85       	ldd	r16, Z+12	; 0x0c
    1132:	15 85       	ldd	r17, Z+13	; 0x0d

00001134 <.Loc.285>:
    1134:	a0 17       	cp	r26, r16
    1136:	b1 07       	cpc	r27, r17
    1138:	18 f0       	brcs	.+6      	; 0x1140 <.L55>

0000113a <.Loc.286>:
                key[k].counter1 = 0;
    113a:	10 86       	std	Z+8, r1	; 0x08
    113c:	17 82       	std	Z+7, r1	; 0x07

0000113e <.Loc.288>:
                key[k].sm1 = _STAGE_REPTT_1_;
    113e:	46 83       	std	Z+6, r20	; 0x06

00001140 <.L55>:
        if (key[k].sm1 == _STAGE_ONKEYRELEASED_ )
    1140:	dc 01       	movw	r26, r24
    1142:	a6 51       	subi	r26, 0x16	; 22
    1144:	ba 4f       	sbci	r27, 0xFA	; 250
    1146:	16 96       	adiw	r26, 0x06	; 6
    1148:	ec 91       	ld	r30, X
    114a:	16 97       	sbiw	r26, 0x06	; 6

0000114c <.Loc.292>:
    114c:	e6 30       	cpi	r30, 0x06	; 6
    114e:	59 f4       	brne	.+22     	; 0x1166 <.L57>

00001150 <.Loc.293>:
            if (key[k].statusFlag.state == KB_KEY_STATE_RELEASED)	//ya solto?
    1150:	fc 01       	movw	r30, r24
    1152:	e7 50       	subi	r30, 0x07	; 7
    1154:	fa 4f       	sbci	r31, 0xFA	; 250
    1156:	d0 81       	ld	r29, Z

00001158 <.Loc.295>:
    1158:	d0 fd       	sbrc	r29, 0
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <.L57>

0000115c <.Loc.296>:
                key[k].statusFlag.readyToRead = KBAPP_READY2READ;							//Populate Key to app.
    115c:	d0 81       	ld	r29, Z
    115e:	d2 60       	ori	r29, 0x02	; 2
    1160:	d0 83       	st	Z, r29

00001162 <.Loc.298>:
                key[k].sm1 = _STAGE_ISKEY_READFROMAPP_;		//esperar x leer
    1162:	16 96       	adiw	r26, 0x06	; 6
    1164:	5c 93       	st	X, r21

00001166 <.L57>:
        if (key[k].sm1 == _STAGE_WHILEPRESSING_ )   //added 2019
    1166:	fc 01       	movw	r30, r24
    1168:	e6 51       	subi	r30, 0x16	; 22
    116a:	fa 4f       	sbci	r31, 0xFA	; 250
    116c:	a6 81       	ldd	r26, Z+6	; 0x06

0000116e <.Loc.302>:
    116e:	a7 30       	cpi	r26, 0x07	; 7
    1170:	39 f4       	brne	.+14     	; 0x1180 <.L58>

00001172 <.Loc.303>:
            key[k].statusFlag.readyToRead = KBAPP_READY2READ;	//Populate Key to app.
    1172:	dc 01       	movw	r26, r24
    1174:	a7 50       	subi	r26, 0x07	; 7
    1176:	ba 4f       	sbci	r27, 0xFA	; 250
    1178:	dc 91       	ld	r29, X
    117a:	d2 60       	ori	r29, 0x02	; 2
    117c:	dc 93       	st	X, r29

0000117e <.Loc.305>:
            key[k].sm1 = _STAGE_ISKEY_RELEASED2_;
    117e:	66 83       	std	Z+6, r22	; 0x06

00001180 <.L58>:
        if (key[k].sm1 == _STAGE_FIREATIMEEXPIRED_ )
    1180:	fc 01       	movw	r30, r24
    1182:	e6 51       	subi	r30, 0x16	; 22
    1184:	fa 4f       	sbci	r31, 0xFA	; 250
    1186:	a6 81       	ldd	r26, Z+6	; 0x06

00001188 <.Loc.309>:
    1188:	a4 30       	cpi	r26, 0x04	; 4
    118a:	a1 f5       	brne	.+104    	; 0x11f4 <.L60>

0000118c <.Loc.310>:
            key[k].counter1++;
    118c:	a7 81       	ldd	r26, Z+7	; 0x07
    118e:	b0 85       	ldd	r27, Z+8	; 0x08

00001190 <.Loc.312>:
    1190:	11 96       	adiw	r26, 0x01	; 1
    1192:	b0 87       	std	Z+8, r27	; 0x08
    1194:	a7 83       	std	Z+7, r26	; 0x07

00001196 <.Loc.313>:
            if (key[k].statusFlag.state == KB_KEY_STATE_RELEASED)	//ya solto?
    1196:	dc 01       	movw	r26, r24
    1198:	a7 50       	subi	r26, 0x07	; 7
    119a:	ba 4f       	sbci	r27, 0xFA	; 250
    119c:	dc 91       	ld	r29, X

0000119e <.Loc.315>:
    119e:	d0 fd       	sbrc	r29, 0
    11a0:	0f c0       	rjmp	.+30     	; 0x11c0 <.L61>

000011a2 <.Loc.316>:
                if (key[k].counter1 <= (_FIRE_AT_TIME_THRESHOLD_) )	//USANDO UN SOLO CONTADOR,
    11a2:	07 81       	ldd	r16, Z+7	; 0x07
    11a4:	10 85       	ldd	r17, Z+8	; 0x08

000011a6 <.Loc.318>:
    11a6:	03 33       	cpi	r16, 0x33	; 51
    11a8:	11 05       	cpc	r17, r1
    11aa:	50 f4       	brcc	.+20     	; 0x11c0 <.L61>

000011ac <.Loc.319>:
                    key[k].counter1	= 0;							//PUES SE USA EN TIEMPOS DIFERENTES
    11ac:	10 86       	std	Z+8, r1	; 0x08
    11ae:	17 82       	std	Z+7, r1	; 0x07

000011b0 <.Loc.321>:
                    key[k].statusFlag.readyToRead = KBAPP_READY2READ;
    11b0:	dc 91       	ld	r29, X
    11b2:	d2 60       	ori	r29, 0x02	; 2
    11b4:	dc 93       	st	X, r29

000011b6 <.Loc.323>:
                    key[k].statusFlag.atTimeExpired_beforeOrAfter = KB_BEFORE_THR;
    11b6:	dc 91       	ld	r29, X
    11b8:	db 7f       	andi	r29, 0xFB	; 251
    11ba:	dc 93       	st	X, r29

000011bc <.Loc.325>:
                    key[k].sm1 = _STAGE_ISKEY_READFROMAPP_;		//Go directly to wait for read key from high-level application
    11bc:	a3 e0       	ldi	r26, 0x03	; 3
    11be:	a6 83       	std	Z+6, r26	; 0x06

000011c0 <.L61>:
            if (key[k].counter1 > (_FIRE_AT_TIME_THRESHOLD_) )
    11c0:	fc 01       	movw	r30, r24
    11c2:	e6 51       	subi	r30, 0x16	; 22
    11c4:	fa 4f       	sbci	r31, 0xFA	; 250
    11c6:	a7 81       	ldd	r26, Z+7	; 0x07
    11c8:	b0 85       	ldd	r27, Z+8	; 0x08

000011ca <.Loc.329>:
    11ca:	d3 97       	sbiw	r26, 0x33	; 51
    11cc:	98 f0       	brcs	.+38     	; 0x11f4 <.L60>

000011ce <.Loc.330>:
                key[k].counter1 = 0x0000;
    11ce:	10 86       	std	Z+8, r1	; 0x08
    11d0:	17 82       	std	Z+7, r1	; 0x07

000011d2 <.Loc.332>:
                key[k].statusFlag.readyToRead = KBAPP_READY2READ;
    11d2:	dc 01       	movw	r26, r24
    11d4:	a7 50       	subi	r26, 0x07	; 7
    11d6:	ba 4f       	sbci	r27, 0xFA	; 250
    11d8:	dc 91       	ld	r29, X
    11da:	d2 60       	ori	r29, 0x02	; 2
    11dc:	dc 93       	st	X, r29

000011de <.Loc.334>:
                key[k].statusFlag.atTimeExpired_beforeOrAfter = KB_AFTER_THR;	//queda senializado
    11de:	dc 91       	ld	r29, X
    11e0:	d4 60       	ori	r29, 0x04	; 4
    11e2:	dc 93       	st	X, r29

000011e4 <.Loc.336>:
                if (!key[k].prop.uFlag.f.reptt)							//x No Reptt
    11e4:	dc 01       	movw	r26, r24
    11e6:	ad 50       	subi	r26, 0x0D	; 13
    11e8:	ba 4f       	sbci	r27, 0xFA	; 250
    11ea:	ac 91       	ld	r26, X

000011ec <.Loc.338>:
    11ec:	a1 fd       	sbrc	r26, 1
    11ee:	ab c0       	rjmp	.+342    	; 0x1346 <.L63>

000011f0 <.Loc.339>:
                    key[k].sm1 = _STAGE_ISKEY_RELEASED_;   //wait for key is release
    11f0:	a1 e0       	ldi	r26, 0x01	; 1

000011f2 <.L92>:
                    key[k].sm1 = _STAGE_REPTT_2_;
    11f2:	a6 83       	std	Z+6, r26	; 0x06

000011f4 <.L60>:
        if (key[k].sm1 == _STAGE_FIREATIMEEXPIRED_2_)//nueva opcion 2017
    11f4:	fc 01       	movw	r30, r24
    11f6:	e6 51       	subi	r30, 0x16	; 22
    11f8:	fa 4f       	sbci	r31, 0xFA	; 250
    11fa:	a6 81       	ldd	r26, Z+6	; 0x06

000011fc <.Loc.344>:
    11fc:	a5 30       	cpi	r26, 0x05	; 5
    11fe:	89 f5       	brne	.+98     	; 0x1262 <.L65>

00001200 <.Loc.345>:
            key[k].counter1++;
    1200:	a7 81       	ldd	r26, Z+7	; 0x07
    1202:	b0 85       	ldd	r27, Z+8	; 0x08

00001204 <.Loc.347>:
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	b0 87       	std	Z+8, r27	; 0x08
    1208:	a7 83       	std	Z+7, r26	; 0x07

0000120a <.Loc.348>:
            if (key[k].statusFlag.state == KB_KEY_STATE_RELEASED) //ya solto?
    120a:	dc 01       	movw	r26, r24
    120c:	a7 50       	subi	r26, 0x07	; 7
    120e:	ba 4f       	sbci	r27, 0xFA	; 250
    1210:	dc 91       	ld	r29, X

00001212 <.Loc.350>:
    1212:	d0 fd       	sbrc	r29, 0
    1214:	0f c0       	rjmp	.+30     	; 0x1234 <.L66>

00001216 <.Loc.351>:
                if (key[k].counter1 <= (_FIRE_AT_TIME_THRESHOLD_)) //primer threshold
    1216:	07 81       	ldd	r16, Z+7	; 0x07
    1218:	10 85       	ldd	r17, Z+8	; 0x08

0000121a <.Loc.353>:
    121a:	03 33       	cpi	r16, 0x33	; 51
    121c:	11 05       	cpc	r17, r1
    121e:	50 f4       	brcc	.+20     	; 0x1234 <.L66>

00001220 <.Loc.354>:
                    key[k].counter1 = 0; //PUES SE USA EN TIEMPOS DIFERENTES
    1220:	10 86       	std	Z+8, r1	; 0x08
    1222:	17 82       	std	Z+7, r1	; 0x07

00001224 <.Loc.356>:
                    key[k].statusFlag.readyToRead = KBAPP_READY2READ;
    1224:	dc 91       	ld	r29, X
    1226:	d2 60       	ori	r29, 0x02	; 2
    1228:	dc 93       	st	X, r29

0000122a <.Loc.358>:
                    key[k].statusFlag.atTimeExpired_beforeOrAfter = KB_BEFORE_THR;
    122a:	dc 91       	ld	r29, X
    122c:	db 7f       	andi	r29, 0xFB	; 251
    122e:	dc 93       	st	X, r29

00001230 <.Loc.360>:
                    key[k].sm1 = _STAGE_ISKEY_READFROMAPP_; //Go directly to wait for read key from high-level application
    1230:	a3 e0       	ldi	r26, 0x03	; 3
    1232:	a6 83       	std	Z+6, r26	; 0x06

00001234 <.L66>:
            if (key[k].counter1 >= (_FIRE_AT_TIME_THRESHOLD2_))
    1234:	dc 01       	movw	r26, r24
    1236:	a6 51       	subi	r26, 0x16	; 22
    1238:	ba 4f       	sbci	r27, 0xFA	; 250
    123a:	17 96       	adiw	r26, 0x07	; 7
    123c:	ed 91       	ld	r30, X+
    123e:	fd 91       	ld	r31, X+
    1240:	19 97       	sbiw	r26, 0x09	; 9

00001242 <.Loc.364>:
    1242:	eb 34       	cpi	r30, 0x4B	; 75
    1244:	f1 05       	cpc	r31, r1
    1246:	68 f0       	brcs	.+26     	; 0x1262 <.L65>

00001248 <.Loc.365>:
                key[k].counter1 = 0x0000;
    1248:	19 96       	adiw	r26, 0x09	; 9
    124a:	1e 92       	st	-X, r1
    124c:	1e 92       	st	-X, r1

0000124e <.Loc.367>:
                key[k].statusFlag.readyToRead = KBAPP_READY2READ;
    124e:	fc 01       	movw	r30, r24
    1250:	e7 50       	subi	r30, 0x07	; 7
    1252:	fa 4f       	sbci	r31, 0xFA	; 250
    1254:	d0 81       	ld	r29, Z
    1256:	d2 60       	ori	r29, 0x02	; 2
    1258:	d0 83       	st	Z, r29

0000125a <.Loc.369>:
                key[k].statusFlag.atTimeExpired_beforeOrAfter = KB_AFTER_THR; //queda senializado
    125a:	d0 81       	ld	r29, Z
    125c:	d4 60       	ori	r29, 0x04	; 4
    125e:	d0 83       	st	Z, r29

00001260 <.Loc.371>:
                key[k].sm1 = _STAGE_ISKEY_RELEASED2_; //wait for key is release
    1260:	6e 93       	st	-X, r22

00001262 <.L65>:
        if (key[k].sm1 == _STAGE_ISKEY_RELEASED_)		//MODO->FireOnKeyPressed + no Repetitibilidad 	//MODO->solo esperar que suelte
    1262:	fc 01       	movw	r30, r24
    1264:	e6 51       	subi	r30, 0x16	; 22
    1266:	fa 4f       	sbci	r31, 0xFA	; 250
    1268:	a6 81       	ldd	r26, Z+6	; 0x06

0000126a <.Loc.375>:
    126a:	a1 30       	cpi	r26, 0x01	; 1
    126c:	31 f4       	brne	.+12     	; 0x127a <.L68>

0000126e <.Loc.376>:
            if (key[k].statusFlag.state == KB_KEY_STATE_RELEASED)						//ya solto?
    126e:	dc 01       	movw	r26, r24
    1270:	a7 50       	subi	r26, 0x07	; 7
    1272:	ba 4f       	sbci	r27, 0xFA	; 250
    1274:	ac 91       	ld	r26, X

00001276 <.Loc.378>:
    1276:	a0 ff       	sbrs	r26, 0

00001278 <.Loc.379>:
                key[k].sm1 = _STAGE_ISKEY_READFROMAPP_;   //esperar x leer
    1278:	56 83       	std	Z+6, r21	; 0x06

0000127a <.L68>:
        if (key[k].sm1 == _STAGE_ISKEY_RELEASED2_)		//added 2019
    127a:	dc 01       	movw	r26, r24
    127c:	a6 51       	subi	r26, 0x16	; 22
    127e:	ba 4f       	sbci	r27, 0xFA	; 250
    1280:	16 96       	adiw	r26, 0x06	; 6
    1282:	ec 91       	ld	r30, X
    1284:	16 97       	sbiw	r26, 0x06	; 6

00001286 <.Loc.383>:
    1286:	e2 30       	cpi	r30, 0x02	; 2
    1288:	59 f4       	brne	.+22     	; 0x12a0 <.L69>

0000128a <.Loc.384>:
            if (key[k].statusFlag.state == KB_KEY_STATE_RELEASED)					
    128a:	fc 01       	movw	r30, r24
    128c:	e7 50       	subi	r30, 0x07	; 7
    128e:	fa 4f       	sbci	r31, 0xFA	; 250
    1290:	d0 81       	ld	r29, Z

00001292 <.Loc.386>:
    1292:	d0 fd       	sbrc	r29, 0
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <.L69>

00001296 <.Loc.387>:
                key[k].statusFlag.readyToRead = KBAPP_ALREADYREAD;
    1296:	d0 81       	ld	r29, Z
    1298:	dd 7f       	andi	r29, 0xFD	; 253
    129a:	d0 83       	st	Z, r29

0000129c <.Loc.389>:
                key[k].sm1 = _STAGE_END_PARSING_;
    129c:	16 96       	adiw	r26, 0x06	; 6
    129e:	7c 93       	st	X, r23

000012a0 <.L69>:
            }
        }
        //_________________________________________________________________________________________
        if (key[k].sm1 == _STAGE_ISKEY_READFROMAPP_)
    12a0:	fc 01       	movw	r30, r24
    12a2:	e6 51       	subi	r30, 0x16	; 22
    12a4:	fa 4f       	sbci	r31, 0xFA	; 250
    12a6:	a6 81       	ldd	r26, Z+6	; 0x06

000012a8 <.Loc.393>:
    12a8:	a3 30       	cpi	r26, 0x03	; 3
    12aa:	31 f4       	brne	.+12     	; 0x12b8 <.L70>

000012ac <.Loc.394>:
        {
            if (key[k].statusFlag.readyToRead == KBAPP_ALREADYREAD)	//ya leyo? //added 2019: || (terminate_key) la app. mata el proceso...
    12ac:	dc 01       	movw	r26, r24
    12ae:	a7 50       	subi	r26, 0x07	; 7
    12b0:	ba 4f       	sbci	r27, 0xFA	; 250
    12b2:	ac 91       	ld	r26, X

000012b4 <.Loc.396>:
    12b4:	a1 ff       	sbrs	r26, 1

000012b6 <.Loc.397>:
            {
                key[k].sm1 = _STAGE_END_PARSING_;
    12b6:	76 83       	std	Z+6, r23	; 0x06

000012b8 <.L70>:
            }
        }
        //_________________________________________________________________________________________
        if (key[k].sm1 == _STAGE_END_PARSING_)
    12b8:	fc 01       	movw	r30, r24
    12ba:	e6 51       	subi	r30, 0x16	; 22
    12bc:	fa 4f       	sbci	r31, 0xFA	; 250
    12be:	a6 81       	ldd	r26, Z+6	; 0x06

000012c0 <.Loc.401>:
    12c0:	ab 30       	cpi	r26, 0x0B	; 11
    12c2:	c1 f4       	brne	.+48     	; 0x12f4 <.L71>

000012c4 <.Loc.402>:
        {
            if (key[k].prop.numGroup > NO_GROUP_X)	//forma grupo?
    12c4:	a6 85       	ldd	r26, Z+14	; 0x0e

000012c6 <.Loc.404>:
    12c6:	a1 15       	cp	r26, r1
    12c8:	59 f0       	breq	.+22     	; 0x12e0 <.L72>

000012ca <.Loc.405>:
            {
                group_x[key[k].prop.numGroup] = GROUP_UNLOCKED;
    12ca:	e6 85       	ldd	r30, Z+14	; 0x0e
    12cc:	f0 e0       	ldi	r31, 0x00	; 0

000012ce <.Loc.407>:
    12ce:	ed 51       	subi	r30, 0x1D	; 29
    12d0:	fa 4f       	sbci	r31, 0xFA	; 250
    12d2:	10 82       	st	Z, r1

000012d4 <.Loc.408>:
                key[k].statusFlag.ownerOfGroup = 0;
    12d4:	fc 01       	movw	r30, r24
    12d6:	e7 50       	subi	r30, 0x07	; 7
    12d8:	fa 4f       	sbci	r31, 0xFA	; 250
    12da:	a0 81       	ld	r26, Z
    12dc:	a7 7f       	andi	r26, 0xF7	; 247
    12de:	a0 83       	st	Z, r26

000012e0 <.L72>:
            }

            key[k].sm1 = _STAGE_START_PARSING_;
    12e0:	fc 01       	movw	r30, r24
    12e2:	e6 51       	subi	r30, 0x16	; 22
    12e4:	fa 4f       	sbci	r31, 0xFA	; 250
    12e6:	16 82       	std	Z+6, r1	; 0x06

000012e8 <.Loc.412>:

            //Add++
            key[k].statusFlag.inProcessing = 0;
    12e8:	fc 01       	movw	r30, r24
    12ea:	e7 50       	subi	r30, 0x07	; 7
    12ec:	fa 4f       	sbci	r31, 0xFA	; 250
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 7e       	andi	r24, 0xEF	; 239
    12f2:	80 83       	st	Z, r24

000012f4 <.L71>:
    for (k=0; k < KB_NUM_KEYS; k++)
    12f4:	2f 5f       	subi	r18, 0xFF	; 255
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255

000012f8 <.Loc.416>:
    12f8:	27 30       	cpi	r18, 0x07	; 7
    12fa:	31 05       	cpc	r19, r1
    12fc:	09 f0       	breq	.+2      	; 0x1300 <.Loc.417>

000012fe <L0^A>:
    12fe:	87 ce       	rjmp	.-754    	; 0x100e <.L73>

00001300 <.Loc.417>:
            //++
        }
    }
}
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	08 95       	ret

0000130a <.L43>:
                    else if ( key[k].prop.uFlag.f.onKeyReleased)
    130a:	d0 81       	ld	r29, Z

0000130c <.Loc.420>:
    130c:	d2 ff       	sbrs	r29, 2
    130e:	05 c0       	rjmp	.+10     	; 0x131a <.L46>

00001310 <.Loc.421>:
                        key[k].sm1 = _STAGE_ONKEYRELEASED_;
    1310:	a6 e0       	ldi	r26, 0x06	; 6

00001312 <.L91>:
    1312:	fc 01       	movw	r30, r24
    1314:	e6 51       	subi	r30, 0x16	; 22
    1316:	fa 4f       	sbci	r31, 0xFA	; 250
    1318:	af ce       	rjmp	.-674    	; 0x1078 <.L90>

0000131a <.L46>:
                    else if ( key[k].prop.uFlag.f.whilePressing)
    131a:	d0 81       	ld	r29, Z

0000131c <.Loc.425>:
    131c:	d3 ff       	sbrs	r29, 3
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <.L47>

00001320 <.Loc.426>:
                        key[k].sm1 = _STAGE_WHILEPRESSING_;
    1320:	a7 e0       	ldi	r26, 0x07	; 7
    1322:	f7 cf       	rjmp	.-18     	; 0x1312 <.L91>

00001324 <.L47>:
                    else if (key[k].prop.uFlag.f.atTimeExpired)
    1324:	d0 81       	ld	r29, Z

00001326 <.Loc.430>:
    1326:	d4 ff       	sbrs	r29, 4
    1328:	02 c0       	rjmp	.+4      	; 0x132e <.L48>

0000132a <.Loc.431>:
                        key[k].sm1 = _STAGE_FIREATIMEEXPIRED_;
    132a:	a4 e0       	ldi	r26, 0x04	; 4
    132c:	f2 cf       	rjmp	.-28     	; 0x1312 <.L91>

0000132e <.L48>:
                    else if (key[k].prop.uFlag.f.atTimeExpired2)
    132e:	e0 81       	ld	r30, Z

00001330 <.Loc.435>:
    1330:	e5 ff       	sbrs	r30, 5
    1332:	a5 ce       	rjmp	.-694    	; 0x107e <.L45>

00001334 <.Loc.436>:
                        key[k].sm1 = _STAGE_FIREATIMEEXPIRED_2_;
    1334:	d5 e0       	ldi	r29, 0x05	; 5
    1336:	fc 01       	movw	r30, r24
    1338:	e6 51       	subi	r30, 0x16	; 22
    133a:	fa 4f       	sbci	r31, 0xFA	; 250
    133c:	d6 83       	std	Z+6, r29	; 0x06

0000133e <.Loc.438>:
                        key[k].statusFlag.startPress = 1;//clear in app if necessary
    133e:	ec 91       	ld	r30, X
    1340:	e0 62       	ori	r30, 0x20	; 32
    1342:	ec 93       	st	X, r30
    1344:	9c ce       	rjmp	.-712    	; 0x107e <.L45>

00001346 <.L63>:
                    key[k].sm1 = _STAGE_REPTT_2_;
    1346:	aa e0       	ldi	r26, 0x0A	; 10
    1348:	54 cf       	rjmp	.-344    	; 0x11f2 <.L92>

0000134a <ikb_job>:
    ikey_scan();
    134a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <ikey_scan>

0000134e <.LVL42>:
    ikey_parsing();
    134e:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <ikey_parsing>

00001352 <ikey_is_all_hw_released>:
int8_t ikey_is_all_hw_released(void)//hardware release
{
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0

00001356 <.L96>:
    uint8_t i;
    for (i=0; i<KB_NUM_KEYS; i++)
    {
        if (key[i].statusFlag.state == KB_KEY_STATE_PRESSED)
    1356:	fc 01       	movw	r30, r24
    1358:	e2 95       	swap	r30
    135a:	f2 95       	swap	r31
    135c:	f0 7f       	andi	r31, 0xF0	; 240
    135e:	fe 27       	eor	r31, r30
    1360:	e0 7f       	andi	r30, 0xF0	; 240
    1362:	fe 27       	eor	r31, r30
    1364:	e7 50       	subi	r30, 0x07	; 7
    1366:	fa 4f       	sbci	r31, 0xFA	; 250
    1368:	20 81       	ld	r18, Z

0000136a <.Loc.452>:
    136a:	20 fd       	sbrc	r18, 0
    136c:	06 c0       	rjmp	.+12     	; 0x137a <.L97>

0000136e <.Loc.453>:
    for (i=0; i<KB_NUM_KEYS; i++)
    136e:	01 96       	adiw	r24, 0x01	; 1

00001370 <.Loc.455>:
    1370:	87 30       	cpi	r24, 0x07	; 7
    1372:	91 05       	cpc	r25, r1
    1374:	81 f7       	brne	.-32     	; 0x1356 <.L96>

00001376 <.Loc.456>:
        {
            return 0;
        }
    }
    return 1;
    1376:	81 e0       	ldi	r24, 0x01	; 1

00001378 <.Loc.457>:
    1378:	08 95       	ret

0000137a <.L97>:
            return 0;
    137a:	80 e0       	ldi	r24, 0x00	; 0

0000137c <.Loc.459>:
}
    137c:	08 95       	ret

0000137e <ikey_clear_all_flag>:

void ikey_clear_all_flag(void)//clear ReadyToRead
{
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0

00001382 <.L100>:
    uint8_t i;
    for (i=0; i<KB_NUM_KEYS; i++)
    {
        //if (key[i].statusFlag.ReadyToRead)
            key[i].statusFlag.readyToRead = 0;
    1382:	fc 01       	movw	r30, r24
    1384:	e2 95       	swap	r30
    1386:	f2 95       	swap	r31
    1388:	f0 7f       	andi	r31, 0xF0	; 240
    138a:	fe 27       	eor	r31, r30
    138c:	e0 7f       	andi	r30, 0xF0	; 240
    138e:	fe 27       	eor	r31, r30
    1390:	e7 50       	subi	r30, 0x07	; 7
    1392:	fa 4f       	sbci	r31, 0xFA	; 250
    1394:	20 81       	ld	r18, Z
    1396:	2d 7f       	andi	r18, 0xFD	; 253
    1398:	20 83       	st	Z, r18

0000139a <.Loc.467>:
    for (i=0; i<KB_NUM_KEYS; i++)
    139a:	01 96       	adiw	r24, 0x01	; 1

0000139c <.Loc.469>:
    139c:	87 30       	cpi	r24, 0x07	; 7
    139e:	91 05       	cpc	r25, r1
    13a0:	81 f7       	brne	.-32     	; 0x1382 <.L100>

000013a2 <.Loc.470>:
    }
}
    13a2:	08 95       	ret

000013a4 <ikb_flush>:
    ikey_clear_all_flag();
    13a4:	0c 94 bf 09 	jmp	0x137e	; 0x137e <ikey_clear_all_flag>

000013a8 <ikey_is_all_process_finished>:

int8_t ikey_is_all_process_finished(void)
{
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0

000013ac <.L105>:
    uint8_t i;
    for (i=0; i<KB_NUM_KEYS; i++)
    {
        if (key[i].statusFlag.inProcessing == 1)
    13ac:	fc 01       	movw	r30, r24
    13ae:	e2 95       	swap	r30
    13b0:	f2 95       	swap	r31
    13b2:	f0 7f       	andi	r31, 0xF0	; 240
    13b4:	fe 27       	eor	r31, r30
    13b6:	e0 7f       	andi	r30, 0xF0	; 240
    13b8:	fe 27       	eor	r31, r30
    13ba:	e7 50       	subi	r30, 0x07	; 7
    13bc:	fa 4f       	sbci	r31, 0xFA	; 250
    13be:	20 81       	ld	r18, Z

000013c0 <.Loc.480>:
    13c0:	24 fd       	sbrc	r18, 4
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <.L106>

000013c4 <.Loc.481>:
    for (i=0; i<KB_NUM_KEYS; i++)
    13c4:	01 96       	adiw	r24, 0x01	; 1

000013c6 <.Loc.483>:
    13c6:	87 30       	cpi	r24, 0x07	; 7
    13c8:	91 05       	cpc	r25, r1
    13ca:	81 f7       	brne	.-32     	; 0x13ac <.L105>

000013cc <.Loc.484>:
        {
            return 0;
        }
    }
    return 1;
    13cc:	81 e0       	ldi	r24, 0x01	; 1

000013ce <.Loc.485>:
    13ce:	08 95       	ret

000013d0 <.L106>:
            return 0;
    13d0:	80 e0       	ldi	r24, 0x00	; 0

000013d2 <.Loc.487>:
}
    13d2:	08 95       	ret

000013d4 <groupDig_setStrDig>:
	const char *strDig;
}groupDig;

void groupDig_setStrDig(const char *str)
{
	groupDig.strDig = str;
    13d4:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <groupDig+0xf>
    13d8:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <groupDig+0x10>

000013dc <.Loc.3>:
}
    13dc:	08 95       	ret

000013de <error_job>:
struct _error e_reset;

unsigned char disp7s_data_array_saved[DISP7S_TOTAL_NUMMAX];

int8_t error_job(void)
{
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	2c 97       	sbiw	r28, 0x0c	; 12
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61

000013f6 <.Loc.1>:
	int8_t counter;
	unsigned char str[10];//cambiar a char_arr

	//+++++++++++++++++++++++++++++++++++++++++++++++++
	//+++++++++++++++++++++++++++++++++++++++++++++++++
	if (e.f.indicator == 0)
    13f6:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <e+0x3>
    13fa:	90 91 85 06 	lds	r25, 0x0685	; 0x800685 <e+0x5>

000013fe <.Loc.5>:
    13fe:	80 fd       	sbrc	r24, 0
    1400:	7c c0       	rjmp	.+248    	; 0x14fa <.L2>

00001402 <.LBB2>:
	{
		for (int i=0; i<ERROR_SIZE; i++)
		{
			if (e.sensor[i].code > 0)//existe algun error?
    1402:	19 16       	cp	r1, r25
    1404:	44 f0       	brlt	.+16     	; 0x1416 <.L3>

00001406 <.Loc.10>:
    1406:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <e+0x7>
    140a:	18 16       	cp	r1, r24
    140c:	24 f0       	brlt	.+8      	; 0x1416 <.L3>

0000140e <.Loc.13>:
    140e:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <e+0x9>
    1412:	18 16       	cp	r1, r24
    1414:	cc f4       	brge	.+50     	; 0x1448 <.L4>

00001416 <.L3>:
			{
				e.f.indicator = 1;
    1416:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <e+0x3>
    141a:	81 60       	ori	r24, 0x01	; 1
    141c:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <e+0x3>

00001420 <.Loc.19>:
				//

				indicatorTimed_setKSysTickTime_ms(150/SYSTICK_MS);
    1420:	86 e9       	ldi	r24, 0x96	; 150
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

00001428 <.LVL4>:
				indicatorTimed_cycle_start();
    1428:	0e 94 0c 06 	call	0xc18	; 0xc18 <indicatorTimed_cycle_start>

0000142c <.LVL5>:
				//
				pid_pwm_set_pin(&mypid0, 0);
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	8a e2       	ldi	r24, 0x2A	; 42
    1430:	97 e0       	ldi	r25, 0x07	; 7
    1432:	0e 94 be 04 	call	0x97c	; 0x97c <pid_pwm_set_pin>

00001436 <.LBB3>:
				//

				for (int x=0; x<DISP7S_TOTAL_NUMMAX; x++)
				{
					disp7s_data_array_saved[x] = disp7s_data_array[x];
    1436:	88 e0       	ldi	r24, 0x08	; 8
    1438:	e2 e2       	ldi	r30, 0x22	; 34
    143a:	f7 e0       	ldi	r31, 0x07	; 7
    143c:	ae e6       	ldi	r26, 0x6E	; 110
    143e:	b6 e0       	ldi	r27, 0x06	; 6

00001440 <.L0^B1>:
    1440:	01 90       	ld	r0, Z+
    1442:	0d 92       	st	X+, r0
    1444:	8a 95       	dec	r24
    1446:	e1 f7       	brne	.-8      	; 0x1440 <.L0^B1>

00001448 <.L4>:
		}
	}
	//+++++++++++++++++++++++++++++++++++++++++
	//+++++++++++++++++++++++++++++++++++++++++

	if (e.sensor[e.idx].sm0 == 0)
    1448:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <e>

0000144c <.Loc.29>:
    144c:	e8 2f       	mov	r30, r24
    144e:	ee 0f       	add	r30, r30
    1450:	ff 0b       	sbc	r31, r31
    1452:	ec 57       	subi	r30, 0x7C	; 124
    1454:	f9 4f       	sbci	r31, 0xF9	; 249
    1456:	90 81       	ld	r25, Z

00001458 <.Loc.30>:
    1458:	91 30       	cpi	r25, 0x01	; 1
    145a:	08 f0       	brcs	.+2      	; 0x145e <.Loc.31>

0000145c <L0^A>:
    145c:	7b c0       	rjmp	.+246    	; 0x1554 <.L8>

0000145e <.Loc.31>:
	{
		if (e.sensor[e.idx].code > 0)//hay error
    145e:	e8 2f       	mov	r30, r24
    1460:	ee 0f       	add	r30, r30
    1462:	ff 0b       	sbc	r31, r31
    1464:	e0 58       	subi	r30, 0x80	; 128
    1466:	f9 4f       	sbci	r31, 0xF9	; 249

00001468 <.Loc.33>:
    1468:	95 81       	ldd	r25, Z+5	; 0x05
    146a:	19 16       	cp	r1, r25
    146c:	0c f0       	brlt	.+2      	; 0x1470 <.Loc.34>

0000146e <L0^A>:
    146e:	96 c0       	rjmp	.+300    	; 0x159c <.L28>

00001470 <.Loc.34>:
		{
			//[Err  text]
			disp7s_clear_all();
    1470:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <disp7s_clear_all>

00001474 <.LVL8>:
			strncpy(str,DIPS7S_MSG_ERROR,BASKET_DISP_MAX_CHARS_PERBASKET);
    1474:	44 e0       	ldi	r20, 0x04	; 4
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	65 eb       	ldi	r22, 0xB5	; 181
    147a:	74 e0       	ldi	r23, 0x04	; 4
    147c:	8e 01       	movw	r16, r28
    147e:	0f 5f       	subi	r16, 0xFF	; 255
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	c8 01       	movw	r24, r16
    1484:	0e 94 21 1b 	call	0x3642	; 0x3642 <strncpy>

00001488 <.LVL9>:
			disp7s_update_data_array(str, BASKETLEFT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    1488:	44 e0       	ldi	r20, 0x04	; 4
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	c8 01       	movw	r24, r16
    148e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00001492 <.LVL10>:

			if (e.idx == ERROR_IDX_THERMOCOUPLE)
    1492:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <e>
    1496:	0b 87       	std	Y+11, r16	; 0x0b
    1498:	1c 87       	std	Y+12, r17	; 0x0c

0000149a <.Loc.39>:
			{
				strncpy(str,DIPS7S_MSG_THERMOCOUPLE_NC,BASKET_DISP_MAX_CHARS_PERBASKET);
    149a:	44 e0       	ldi	r20, 0x04	; 4
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	61 eb       	ldi	r22, 0xB1	; 177
    14a0:	74 e0       	ldi	r23, 0x04	; 4

000014a2 <.Loc.40>:
			if (e.idx == ERROR_IDX_THERMOCOUPLE)
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	30 f0       	brcs	.+12     	; 0x14b2 <.L25>

000014a6 <.Loc.41>:
			}
			else if (e.idx == ERROR_IDX_THERMOPILE)
    14a6:	09 f0       	breq	.+2      	; 0x14aa <.Loc.43>

000014a8 <L0^A>:
    14a8:	4d c0       	rjmp	.+154    	; 0x1544 <.L12>

000014aa <.Loc.43>:
			{
				strncpy(str,DIPS7S_MSG_THERMOPILE,BASKET_DISP_MAX_CHARS_PERBASKET);
    14aa:	44 e0       	ldi	r20, 0x04	; 4
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	6d ea       	ldi	r22, 0xAD	; 173
    14b0:	74 e0       	ldi	r23, 0x04	; 4

000014b2 <.L25>:
			}
			else if (e.idx == ERROR_IDX_HIGHLIMIT)
			{
				strncpy(str,DIPS7S_MSG_HIGHLIMIT,BASKET_DISP_MAX_CHARS_PERBASKET);
    14b2:	c8 01       	movw	r24, r16
    14b4:	0e 94 21 1b 	call	0x3642	; 0x3642 <strncpy>

000014b8 <.L11>:
			}
			disp7s_update_data_array(str, BASKETRIGHT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    14b8:	44 e0       	ldi	r20, 0x04	; 4
    14ba:	64 e0       	ldi	r22, 0x04	; 4
    14bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    14be:	9c 85       	ldd	r25, Y+12	; 0x0c
    14c0:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

000014c4 <.LVL12>:


			e.sensor[e.idx].sm0++;
    14c4:	e0 91 80 06 	lds	r30, 0x0680	; 0x800680 <e>

000014c8 <.Loc.48>:
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 0b       	sbc	r31, r31
    14cc:	ec 57       	subi	r30, 0x7C	; 124
    14ce:	f9 4f       	sbci	r31, 0xF9	; 249
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 5f       	subi	r24, 0xFF	; 255
    14d4:	80 83       	st	Z, r24

000014d6 <.Loc.49>:
			e.timer = 0x00000;
    14d6:	10 92 81 06 	sts	0x0681, r1	; 0x800681 <e+0x1>
    14da:	10 92 82 06 	sts	0x0682, r1	; 0x800682 <e+0x2>

000014de <.L13>:
			}
			//
		}

	}
	return e.f.indicator;
    14de:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <e+0x3>

000014e2 <.Loc.53>:
}
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	2c 96       	adiw	r28, 0x0c	; 12
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <.L2>:
			if (e.sensor[i].code == 0)
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	91 11       	cpse	r25, r1
    14fe:	80 e0       	ldi	r24, 0x00	; 0

00001500 <.Loc.56>:
    1500:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <e+0x7>
    1504:	91 11       	cpse	r25, r1
    1506:	01 c0       	rjmp	.+2      	; 0x150a <.L6>

00001508 <.Loc.60>:
				counter++;
    1508:	8f 5f       	subi	r24, 0xFF	; 255

0000150a <.L6>:
			if (e.sensor[i].code == 0)
    150a:	90 91 89 06 	lds	r25, 0x0689	; 0x800689 <e+0x9>
    150e:	91 11       	cpse	r25, r1
    1510:	9b cf       	rjmp	.-202    	; 0x1448 <.L4>

00001512 <.LBE4>:
		if (counter == ERROR_SIZE)
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	09 f0       	breq	.+2      	; 0x1518 <.Loc.71>

00001516 <L0^A>:
    1516:	98 cf       	rjmp	.-208    	; 0x1448 <.L4>

00001518 <.Loc.71>:
			indicatorTimed_stop();
    1518:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <indicatorTimed_stop>

0000151c <.LVL17>:
			e.f.indicator = 0;
    151c:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <e+0x3>
    1520:	8e 7f       	andi	r24, 0xFE	; 254
    1522:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <e+0x3>

00001526 <.LBB5>:
				disp7s_data_array[x] = disp7s_data_array_saved[x];
    1526:	88 e0       	ldi	r24, 0x08	; 8
    1528:	ee e6       	ldi	r30, 0x6E	; 110
    152a:	f6 e0       	ldi	r31, 0x06	; 6
    152c:	a2 e2       	ldi	r26, 0x22	; 34
    152e:	b7 e0       	ldi	r27, 0x07	; 7

00001530 <.L0^B2>:
    1530:	01 90       	ld	r0, Z+
    1532:	0d 92       	st	X+, r0
    1534:	8a 95       	dec	r24
    1536:	e1 f7       	brne	.-8      	; 0x1530 <.L0^B2>

00001538 <.LBE5>:
			cli();
    1538:	f8 94       	cli

0000153a <.Loc.80>:
			WDTCR=0x18;
    153a:	88 e1       	ldi	r24, 0x18	; 24
    153c:	81 bd       	out	0x21, r24	; 33

0000153e <.Loc.82>:
			WDTCR=0x08;
    153e:	88 e0       	ldi	r24, 0x08	; 8
    1540:	81 bd       	out	0x21, r24	; 33

00001542 <.L7>:
			while(1);
    1542:	ff cf       	rjmp	.-2      	; 0x1542 <.L7>

00001544 <.L12>:
			else if (e.idx == ERROR_IDX_HIGHLIMIT)
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	09 f0       	breq	.+2      	; 0x154a <.Loc.88>

00001548 <L0^A>:
    1548:	b7 cf       	rjmp	.-146    	; 0x14b8 <.L11>

0000154a <.Loc.88>:
				strncpy(str,DIPS7S_MSG_HIGHLIMIT,BASKET_DISP_MAX_CHARS_PERBASKET);
    154a:	44 e0       	ldi	r20, 0x04	; 4
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	69 ea       	ldi	r22, 0xA9	; 169
    1550:	74 e0       	ldi	r23, 0x04	; 4
    1552:	af cf       	rjmp	.-162    	; 0x14b2 <.L25>

00001554 <.L8>:
	else if (e.sensor[e.idx].sm0 == 1)
    1554:	21 f6       	brne	.-120    	; 0x14de <.L13>

00001556 <.Loc.91>:
		if (e.sensor[e.idx].code == 0)//ya no hay error
    1556:	a8 2f       	mov	r26, r24
    1558:	aa 0f       	add	r26, r26
    155a:	bb 0b       	sbc	r27, r27
    155c:	a0 58       	subi	r26, 0x80	; 128
    155e:	b9 4f       	sbci	r27, 0xF9	; 249

00001560 <.Loc.93>:
    1560:	15 96       	adiw	r26, 0x05	; 5
    1562:	9c 91       	ld	r25, X
    1564:	91 11       	cpse	r25, r1
    1566:	02 c0       	rjmp	.+4      	; 0x156c <.L16>

00001568 <.Loc.94>:
			e.sensor[e.idx].sm0 = 0x00;
    1568:	10 82       	st	Z, r1
    156a:	b9 cf       	rjmp	.-142    	; 0x14de <.L13>

0000156c <.L16>:
			if (mainflag.sysTickMs)
    156c:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <mainflag>

00001570 <.Loc.98>:
    1570:	90 ff       	sbrs	r25, 0
    1572:	b5 cf       	rjmp	.-150    	; 0x14de <.L13>

00001574 <.Loc.100>:
				if (++e.timer >= (1000/SYSTICK_MS))
    1574:	20 91 81 06 	lds	r18, 0x0681	; 0x800681 <e+0x1>
    1578:	30 91 82 06 	lds	r19, 0x0682	; 0x800682 <e+0x2>
    157c:	2f 5f       	subi	r18, 0xFF	; 255
    157e:	3f 4f       	sbci	r19, 0xFF	; 255

00001580 <.Loc.101>:
    1580:	28 3e       	cpi	r18, 0xE8	; 232
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	39 07       	cpc	r19, r25
    1586:	28 f4       	brcc	.+10     	; 0x1592 <.L17>
    1588:	20 93 81 06 	sts	0x0681, r18	; 0x800681 <e+0x1>
    158c:	30 93 82 06 	sts	0x0682, r19	; 0x800682 <e+0x2>
    1590:	a6 cf       	rjmp	.-180    	; 0x14de <.L13>

00001592 <.L17>:
					e.timer = 0x0;
    1592:	10 92 81 06 	sts	0x0681, r1	; 0x800681 <e+0x1>
    1596:	10 92 82 06 	sts	0x0682, r1	; 0x800682 <e+0x2>

0000159a <.Loc.104>:
					e.sensor[e.idx].sm0 = 0;	//dejar habilitado para la siguiente pasada el mismo
    159a:	10 82       	st	Z, r1

0000159c <.L28>:
					if (++e.idx >= ERROR_SIZE)//avanza a ver el siguiente error
    159c:	8f 5f       	subi	r24, 0xFF	; 255

0000159e <.Loc.108>:
    159e:	83 30       	cpi	r24, 0x03	; 3
    15a0:	1c f4       	brge	.+6      	; 0x15a8 <.L18>
    15a2:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <e>
    15a6:	9b cf       	rjmp	.-202    	; 0x14de <.L13>

000015a8 <.L18>:
						{e.idx = 0x00;}
    15a8:	10 92 80 06 	sts	0x0680, r1	; 0x800680 <e>
    15ac:	98 cf       	rjmp	.-208    	; 0x14de <.L13>

000015ae <blink_set>:

struct _blink *blink;

void blink_set(struct _blink *b)
{
	blink = b;//set address
    15ae:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <blink>
    15b2:	90 93 8b 06 	sts	0x068B, r25	; 0x80068b <blink+0x1>

000015b6 <.Loc.3>:
}
    15b6:	08 95       	ret

000015b8 <blink_reset>:

void blink_reset(int8_t BLINK_TOGGLE_STATE)
{
	blink->timerBlink = 0x00;
    15b8:	e0 91 8a 06 	lds	r30, 0x068A	; 0x80068a <blink>
    15bc:	f0 91 8b 06 	lds	r31, 0x068B	; 0x80068b <blink+0x1>

000015c0 <.Loc.7>:
    15c0:	10 82       	st	Z, r1
    15c2:	11 82       	std	Z+1, r1	; 0x01

000015c4 <.Loc.10>:
	blink->bf.update = 1;//BLINK_UPDATE;
	//blink->bf.toggle = !BLINK_TOGGLE_BLANK;//mejor q sea 0
	blink->bf.toggle = BLINK_TOGGLE_STATE;
    15c4:	81 70       	andi	r24, 0x01	; 1

000015c6 <.Loc.11>:
    15c6:	82 60       	ori	r24, 0x02	; 2
    15c8:	94 81       	ldd	r25, Z+4	; 0x04
    15ca:	9c 7f       	andi	r25, 0xFC	; 252
    15cc:	89 2b       	or	r24, r25
    15ce:	84 83       	std	Z+4, r24	; 0x04

000015d0 <.Loc.12>:
}
    15d0:	08 95       	ret

000015d2 <blink_timing>:

void blink_timing(void)
{
	if (++blink->timerBlink >= blink->timerBlink_K)
    15d2:	e0 91 8a 06 	lds	r30, 0x068A	; 0x80068a <blink>
    15d6:	f0 91 8b 06 	lds	r31, 0x068B	; 0x80068b <blink+0x1>

000015da <.Loc.16>:
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	01 96       	adiw	r24, 0x01	; 1

000015e0 <.Loc.17>:
    15e0:	80 83       	st	Z, r24
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	22 81       	ldd	r18, Z+2	; 0x02
    15e6:	33 81       	ldd	r19, Z+3	; 0x03
    15e8:	82 17       	cp	r24, r18
    15ea:	93 07       	cpc	r25, r19
    15ec:	50 f0       	brcs	.+20     	; 0x1602 <.L3>

000015ee <.Loc.18>:
	{
		blink->timerBlink = 0x00;
    15ee:	10 82       	st	Z, r1
    15f0:	11 82       	std	Z+1, r1	; 0x01

000015f2 <.Loc.20>:
		//
		blink->bf.toggle = !blink->bf.toggle;
    15f2:	94 81       	ldd	r25, Z+4	; 0x04
    15f4:	89 2f       	mov	r24, r25
    15f6:	80 95       	com	r24
    15f8:	81 70       	andi	r24, 0x01	; 1
    15fa:	82 60       	ori	r24, 0x02	; 2
    15fc:	9c 7f       	andi	r25, 0xFC	; 252
    15fe:	89 2b       	or	r24, r25
    1600:	84 83       	std	Z+4, r24	; 0x04

00001602 <.L3>:
		blink->bf.update = 1;//BLINK_UPDATE;
	}
}
    1602:	08 95       	ret

00001604 <ADC_set_channel>:
*/

void ADC_set_channel(uint8_t channel)
{
	//ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
	ADMUX = (ADMUX & 0xE0) | (channel & 0x1F);
    1604:	97 b1       	in	r25, 0x07	; 7
    1606:	8f 71       	andi	r24, 0x1F	; 31

00001608 <.Loc.3>:
    1608:	90 7e       	andi	r25, 0xE0	; 224
    160a:	89 2b       	or	r24, r25

0000160c <.Loc.4>:
    160c:	87 b9       	out	0x07, r24	; 7

0000160e <.Loc.5>:
}
    160e:	08 95       	ret

00001610 <ADC_set_reference>:
The ADC has a separate analog supply voltage pin, AV CC . AV CC must not differ more than ±0.3V from
V CC . See section ADC Noise Canceler on how to connect this pin.
*/
void ADC_set_reference(uint8_t ref)
{
	ADMUX = (ADMUX & 0x3F) | ((ref & 0x03) << 6);
    1610:	97 b1       	in	r25, 0x07	; 7

00001612 <.Loc.9>:
    1612:	82 95       	swap	r24

00001614 <.Loc.10>:
    1614:	88 0f       	add	r24, r24
    1616:	88 0f       	add	r24, r24
    1618:	80 7c       	andi	r24, 0xC0	; 192
    161a:	9f 73       	andi	r25, 0x3F	; 63
    161c:	89 2b       	or	r24, r25

0000161e <.Loc.11>:
    161e:	87 b9       	out	0x07, r24	; 7

00001620 <.Loc.12>:
}
    1620:	08 95       	ret

00001622 <ADC_set_prescaler>:
200kHz to get maximum resolution. If a lower resolution than 10 bits is needed, the input clock frequency
to the ADC can be higher than 200kHz to get a higher sample rate.
*/
void ADC_set_prescaler(uint8_t prescaler)
{
	ADCSRA = (ADCSRA & 0xF8) | prescaler;
    1622:	96 b1       	in	r25, 0x06	; 6
    1624:	98 7f       	andi	r25, 0xF8	; 248
    1626:	89 2b       	or	r24, r25

00001628 <.Loc.16>:
    1628:	86 b9       	out	0x06, r24	; 6

0000162a <.Loc.17>:
}
    162a:	08 95       	ret

0000162c <ADC_enable>:

void ADC_enable(void)
{
	BitTo1(ADCSRA, ADEN);
    162c:	37 9a       	sbi	0x06, 7	; 6

0000162e <.Loc.21>:
}
    162e:	08 95       	ret

00001630 <ADC_disable>:

void ADC_disable(void)
{
	BitTo0(ADCSRA, ADEN);
    1630:	37 98       	cbi	0x06, 7	; 6

00001632 <.Loc.26>:
}
    1632:	08 95       	ret

00001634 <ADC_setBit_startConversion_On>:
void ADC_setBit_startConversion_On(void)
{
	BitTo1(ADCSRA, ADSC);
    1634:	36 9a       	sbi	0x06, 6	; 6

00001636 <.Loc.31>:
}
    1636:	08 95       	ret

00001638 <ADC_setBit_startConversion_Off>:
void ADC_setBit_startConversion_Off(void)
{
	BitTo0(ADCSRA, ADSC);
    1638:	36 98       	cbi	0x06, 6	; 6

0000163a <.Loc.36>:
}
    163a:	08 95       	ret

0000163c <ADC_set_adjust>:

void ADC_set_adjust(uint8_t adj)
{
	if (adj == ADC_ADJUST_RIGHT)
    163c:	81 11       	cpse	r24, r1
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <.L9>

00001640 <.Loc.41>:
	{
		BitTo0(ADMUX, ADLAR);
    1640:	3d 98       	cbi	0x07, 5	; 7

00001642 <.Loc.43>:
    1642:	08 95       	ret

00001644 <.L9>:
	}
	else
	{
		BitTo1(ADMUX, ADLAR);
    1644:	3d 9a       	sbi	0x07, 5	; 7

00001646 <.Loc.46>:
	}
}
    1646:	08 95       	ret

00001648 <ADC_get_resultH>:
uint8_t ADC_get_resultH(void)
{
	return ADCH;
    1648:	85 b1       	in	r24, 0x05	; 5

0000164a <.Loc.51>:
}
    164a:	08 95       	ret

0000164c <ADC_get_resultL>:

uint8_t ADC_get_resultL(void)
{
	return ADCL;
    164c:	84 b1       	in	r24, 0x04	; 4

0000164e <.Loc.55>:
}
    164e:	08 95       	ret

00001650 <ADC_setAutoTrigger_enabled>:
void ADC_setAutoTrigger_enabled(void)
{
	BitTo1(ADCSRA, ADATE);
    1650:	35 9a       	sbi	0x06, 5	; 6

00001652 <.Loc.59>:
}
    1652:	08 95       	ret

00001654 <ADC_setAutoTrigger_disabled>:
void ADC_setAutoTrigger_disabled(void)
{
	BitTo0(ADCSRA, ADATE);
    1654:	35 98       	cbi	0x06, 5	; 6

00001656 <.Loc.64>:
}
    1656:	08 95       	ret

00001658 <ADC_setAutoTrigger_source>:
void ADC_setAutoTrigger_source(uint8_t trigger_source)
{
	#if defined (__AVR_ATmega32__)  || defined (__AVR_ATmega32A__)
		SFIOR = (SFIOR & 0x0F) | (trigger_source << 5);
    1658:	90 b7       	in	r25, 0x30	; 48

0000165a <.Loc.69>:
    165a:	82 95       	swap	r24

0000165c <.Loc.70>:
    165c:	88 0f       	add	r24, r24
    165e:	80 7e       	andi	r24, 0xE0	; 224
    1660:	9f 70       	andi	r25, 0x0F	; 15
    1662:	89 2b       	or	r24, r25

00001664 <.Loc.71>:
    1664:	80 bf       	out	0x30, r24	; 48

00001666 <.Loc.72>:
	#else //(__AVR_ATmega328P__)
		ADCSRB =  (ADCSRB & 0xF8) | trigger_source;
	#endif

}
    1666:	08 95       	ret

00001668 <ADC_init>:
void ADC_init(int8_t trigger_source, int8_t reference, int8_t preescaler)
{
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	00 d0       	rcall	.+0      	; 0x166e <L0^A>

0000166e <L0^A>:
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	86 2f       	mov	r24, r22

00001676 <.Loc.75>:
    1676:	4a 83       	std	Y+2, r20	; 0x02

00001678 <.Loc.76>:
	//ADC_set_reference(ADC_REF_AREF);//Aref tied +VDD
	//ADC_set_reference(ADC_REF_AVCC);//
	//ADC_set_reference(ADC_REF_INTERNAL_2_56V);//

	ADC_set_reference(reference);
    1678:	0e 94 08 0b 	call	0x1610	; 0x1610 <ADC_set_reference>

0000167c <.LVL11>:

	//ADC_set_prescaler(ADC_PRESCALER_128);
	ADC_set_prescaler(preescaler);
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	0e 94 11 0b 	call	0x1622	; 0x1622 <ADC_set_prescaler>

00001682 <.LVL12>:

	//

	if (trigger_source == ADC_AUTOTRIGGER_SOURCE_DISABLED)
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	8f 3f       	cpi	r24, 0xFF	; 255
    1686:	41 f4       	brne	.+16     	; 0x1698 <.L17>

00001688 <.Loc.80>:
	{
		ADC_setAutoTrigger_disabled();//BitTo0(ADCSRA, ADATE);
    1688:	0e 94 2a 0b 	call	0x1654	; 0x1654 <ADC_setAutoTrigger_disabled>

0000168c <.L18>:

	}
	//
	//ADC_set_adjust(ADC_ADJUST_RIGHT);//by default
	ADC_enable();
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28

00001694 <.Loc.83>:
	ADC_enable();
    1694:	0c 94 16 0b 	jmp	0x162c	; 0x162c <ADC_enable>

00001698 <.L17>:
		ADC_setAutoTrigger_enabled();//BitTo1(ADCSRA, ADATE);
    1698:	0e 94 28 0b 	call	0x1650	; 0x1650 <ADC_setAutoTrigger_enabled>

0000169c <.LVL15>:
		ADC_setAutoTrigger_source(trigger_source);
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <ADC_setAutoTrigger_source>

000016a2 <.LVL16>:
    16a2:	f4 cf       	rjmp	.-24     	; 0x168c <.L18>

000016a4 <ADC_start_conv>:
{
	#if defined (__AVR_ATmega328P__)
		BitTo0(MCUCR, PRADC);//Writing a logic one to this bit shuts down the ADC
	#endif

	ADC_set_channel(channel);
    16a4:	0e 94 02 0b 	call	0x1604	; 0x1604 <ADC_set_channel>

000016a8 <.LVL18>:

/* MEJOR ES CAMBIAR A ADIF
 * Poll (wait) for the Interrupt Flag (ADIF) bit in the ADCSRA register to be set, indicating that the
conversion is completed.
 */
	ADC_setBit_startConversion_On();//BitTo1(ADCSRA, ADSC);
    16a8:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <ADC_setBit_startConversion_On>

000016ac <ADC_start_and_wait_conv>:
}

void ADC_start_and_wait_conv(uint8_t channel)
{
	ADC_start_conv(channel);
    16ac:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <ADC_start_conv>

000016b0 <.L21>:
//	while (ADCSRA & (1<<ADSC))
//		{;}

	//wait for conversion to finish
	while(!(ADCSRA & (1 << ADIF)))
    16b0:	34 9b       	sbis	0x06, 4	; 6
    16b2:	fe cf       	rjmp	.-4      	; 0x16b0 <.L21>

000016b4 <.Loc.94>:
		{;}
	ADCSRA |= (1 << ADIF); //reset as required
    16b4:	34 9a       	sbi	0x06, 4	; 6

000016b6 <.Loc.96>:

}
    16b6:	08 95       	ret

000016b8 <ADC_read>:
//uint16_t ADC_get_new_fullresult_block(uint8_t channel)
uint16_t ADC_read(uint8_t channel)
{
	uint8_t resultL;

	if (!(ADCSRA & (1<<ADATE)))
    16b8:	35 99       	sbic	0x06, 5	; 6
    16ba:	11 c0       	rjmp	.+34     	; 0x16de <.L25>

000016bc <.Loc.101>:
	{
		ADC_start_and_wait_conv(channel);//blocking
    16bc:	0e 94 56 0b 	call	0x16ac	; 0x16ac <ADC_start_and_wait_conv>

000016c0 <.L26>:
	return ADCL;
    16c0:	24 b1       	in	r18, 0x04	; 4

000016c2 <.LBE8>:
	}

	//Leer primero la parte baja ADCL para bloquear su parte alta y leer con consistencia
	resultL = ADC_get_resultL();

	if (ADMUX & (1<<ADLAR))//left?
    16c2:	3d 9b       	sbis	0x07, 5	; 7
    16c4:	11 c0       	rjmp	.+34     	; 0x16e8 <.L28>

000016c6 <.LBB10>:
	return ADCH;
    16c6:	85 b1       	in	r24, 0x05	; 5

000016c8 <.LBE10>:
	{
		return (((uint16_t)ADC_get_resultH())<<2) + (resultL>>6);
    16c8:	34 e0       	ldi	r19, 0x04	; 4
    16ca:	83 9f       	mul	r24, r19
    16cc:	c0 01       	movw	r24, r0
    16ce:	11 24       	eor	r1, r1

000016d0 <.Loc.115>:
    16d0:	22 95       	swap	r18

000016d2 <.Loc.116>:
    16d2:	26 95       	lsr	r18
    16d4:	26 95       	lsr	r18
    16d6:	23 70       	andi	r18, 0x03	; 3

000016d8 <.L32>:

	}
	else //right by default
	{
		return (((uint16_t)ADC_get_resultH())<<8) + resultL;
    16d8:	82 0f       	add	r24, r18
    16da:	91 1d       	adc	r25, r1

000016dc <.Loc.118>:
	}
}
    16dc:	08 95       	ret

000016de <.L25>:
		BitTo1(ADCSRA ,ADIF); //Clear flag for new conversion
    16de:	34 9a       	sbi	0x06, 4	; 6

000016e0 <.L27>:
		while (!(ADCSRA & (1<<ADIF)))
    16e0:	34 9b       	sbis	0x06, 4	; 6
    16e2:	fe cf       	rjmp	.-4      	; 0x16e0 <.L27>

000016e4 <.Loc.125>:
		BitTo1(ADCSRA ,ADIF);
    16e4:	34 9a       	sbi	0x06, 4	; 6
    16e6:	ec cf       	rjmp	.-40     	; 0x16c0 <.L26>

000016e8 <.L28>:
	return ADCH;
    16e8:	85 b1       	in	r24, 0x05	; 5

000016ea <.LBE12>:
		return (((uint16_t)ADC_get_resultH())<<8) + resultL;
    16ea:	98 2f       	mov	r25, r24
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	f4 cf       	rjmp	.-24     	; 0x16d8 <.L32>

000016f0 <T_rtd>:
// output: T_rtd() = corresponding temperature of RTD
// Calculates temperature of RTD as a function of resistance via
// a piecewise linear approximation method.

float T_rtd (float r)
{
    16f0:	cf 92       	push	r12
    16f2:	df 92       	push	r13
    16f4:	ef 92       	push	r14
    16f6:	ff 92       	push	r15
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <L0^A>

000016fe <L0^A>:
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <L0^A>

00001700 <L0^A>:
    1700:	00 d0       	rcall	.+0      	; 0x1702 <L0^A>

00001702 <L0^A>:
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	69 83       	std	Y+1, r22	; 0x01
    1708:	7a 83       	std	Y+2, r23	; 0x02
    170a:	8b 83       	std	Y+3, r24	; 0x03
    170c:	9c 83       	std	Y+4, r25	; 0x04

0000170e <.Loc.2>:
  float t;
  int i;
  i=(r-RMIN)/RSEG;       // determine which coefficients to use
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	48 ec       	ldi	r20, 0xC8	; 200
    1714:	52 e4       	ldi	r21, 0x42	; 66
    1716:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__subsf3>

0000171a <.LVL2>:
    171a:	2f ea       	ldi	r18, 0xAF	; 175
    171c:	30 ed       	ldi	r19, 0xD0	; 208
    171e:	4f ea       	ldi	r20, 0xAF	; 175
    1720:	5e e3       	ldi	r21, 0x3E	; 62
    1722:	0e 94 43 19 	call	0x3286	; 0x3286 <__divsf3>

00001726 <.LVL3>:
    1726:	0e 94 b5 19 	call	0x336a	; 0x336a <__fixsfsi>

0000172a <.LVL4>:
    172a:	6d 83       	std	Y+5, r22	; 0x05
    172c:	7e 83       	std	Y+6, r23	; 0x06

0000172e <.Loc.9>:
  if (i<0)               // if input is under-range..
    i=0;                 // ..then use lowest coefficients
  else if (i>NSEG-1)     // if input is over-range..
    172e:	6f 3f       	cpi	r22, 0xFF	; 255
    1730:	71 05       	cpc	r23, r1
    1732:	0c f4       	brge	.+2      	; 0x1736 <L0^A+0x2>

00001734 <L0^A>:
    1734:	61 c0       	rjmp	.+194    	; 0x17f8 <.L2>
    1736:	8e ef       	ldi	r24, 0xFE	; 254
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	1e 82       	std	Y+6, r1	; 0x06

0000173c <.L3>:
    i=NSEG-1;            // ..then use highest coefficients

  //t = pgm_read_float(C_rtd[i]) + (r-(RMIN+RSEG*i))*(pgm_read_float(C_rtd[i+1])-pgm_read_float(C_rtd[i]))/RSEG;
  t = C_rtd[i]+(r-(RMIN+RSEG*i))*(C_rtd[i+1]-C_rtd[i])/RSEG;
    173c:	ed 81       	ldd	r30, Y+5	; 0x05
    173e:	fe 81       	ldd	r31, Y+6	; 0x06
    1740:	ee 0f       	add	r30, r30
    1742:	ff 1f       	adc	r31, r31
    1744:	ee 0f       	add	r30, r30
    1746:	ff 1f       	adc	r31, r31
    1748:	ef 55       	subi	r30, 0x5F	; 95
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	c0 80       	ld	r12, Z
    174e:	d1 80       	ldd	r13, Z+1	; 0x01
    1750:	e2 80       	ldd	r14, Z+2	; 0x02
    1752:	f3 80       	ldd	r15, Z+3	; 0x03

00001754 <.LVL6>:
    1754:	2d 81       	ldd	r18, Y+5	; 0x05
    1756:	3e 81       	ldd	r19, Y+6	; 0x06
    1758:	b9 01       	movw	r22, r18
    175a:	33 0f       	add	r19, r19
    175c:	88 0b       	sbc	r24, r24
    175e:	98 2f       	mov	r25, r24
    1760:	0e 94 ed 19 	call	0x33da	; 0x33da <__floatsisf>

00001764 <.LVL7>:
    1764:	2f ea       	ldi	r18, 0xAF	; 175
    1766:	30 ed       	ldi	r19, 0xD0	; 208
    1768:	4f ea       	ldi	r20, 0xAF	; 175
    176a:	5e e3       	ldi	r21, 0x3E	; 62
    176c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>

00001770 <.LVL8>:
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	48 ec       	ldi	r20, 0xC8	; 200
    1776:	52 e4       	ldi	r21, 0x42	; 66
    1778:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__addsf3>

0000177c <.LVL9>:
    177c:	9b 01       	movw	r18, r22
    177e:	ac 01       	movw	r20, r24

00001780 <.Loc.15>:
    1780:	69 81       	ldd	r22, Y+1	; 0x01
    1782:	7a 81       	ldd	r23, Y+2	; 0x02
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__subsf3>

0000178c <.LVL10>:
    178c:	69 83       	std	Y+1, r22	; 0x01

0000178e <.Loc.16>:
    178e:	7a 83       	std	Y+2, r23	; 0x02
    1790:	8b 83       	std	Y+3, r24	; 0x03
    1792:	9c 83       	std	Y+4, r25	; 0x04

00001794 <.Loc.17>:
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	9e 81       	ldd	r25, Y+6	; 0x06
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	8b 55       	subi	r24, 0x5B	; 91
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	8d 83       	std	Y+5, r24	; 0x05

000017a6 <.Loc.18>:
    17a6:	9e 83       	std	Y+6, r25	; 0x06

000017a8 <.Loc.19>:
    17a8:	96 01       	movw	r18, r12
    17aa:	a7 01       	movw	r20, r14
    17ac:	fc 01       	movw	r30, r24
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__subsf3>

000017ba <.LVL13>:
    17ba:	9b 01       	movw	r18, r22
    17bc:	ac 01       	movw	r20, r24

000017be <.Loc.20>:
    17be:	69 81       	ldd	r22, Y+1	; 0x01
    17c0:	7a 81       	ldd	r23, Y+2	; 0x02
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>

000017ca <.LVL14>:
    17ca:	2f ea       	ldi	r18, 0xAF	; 175
    17cc:	30 ed       	ldi	r19, 0xD0	; 208
    17ce:	4f ea       	ldi	r20, 0xAF	; 175
    17d0:	5e e3       	ldi	r21, 0x3E	; 62
    17d2:	0e 94 43 19 	call	0x3286	; 0x3286 <__divsf3>

000017d6 <.LVL15>:
    17d6:	96 01       	movw	r18, r12
    17d8:	a7 01       	movw	r20, r14
    17da:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__addsf3>

000017de <.LVL16>:

  return (t);
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	cf 90       	pop	r12
    17f6:	08 95       	ret

000017f8 <.L2>:
  if (i<0)               // if input is under-range..
    17f8:	ed 81       	ldd	r30, Y+5	; 0x05
    17fa:	fe 81       	ldd	r31, Y+6	; 0x06
    17fc:	f7 ff       	sbrs	r31, 7
    17fe:	9e cf       	rjmp	.-196    	; 0x173c <.L3>
    1800:	1d 82       	std	Y+5, r1	; 0x05
    1802:	1e 82       	std	Y+6, r1	; 0x06
    1804:	9b cf       	rjmp	.-202    	; 0x173c <.L3>

00001806 <MAX6675_formatText3dig>:
Format with 4 digits 999 sin grados ni C
*****************************************************/


void MAX6675_formatText3dig(int16_t temperatura, unsigned char *str_out)
{
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	8c 01       	movw	r16, r24
    1810:	eb 01       	movw	r28, r22

00001812 <.Loc.27>:
	//1. clear the basket display
	disp7s_blank_displays(str_out, 0, BASKET_DISP_MAX_CHARS_PERBASKET);
    1812:	44 e0       	ldi	r20, 0x04	; 4
    1814:	60 e0       	ldi	r22, 0x00	; 0

00001816 <.Loc.28>:
    1816:	ce 01       	movw	r24, r28

00001818 <.Loc.29>:
    1818:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <disp7s_blank_displays>

0000181c <.LVL21>:

	if (temperatura == MAX6675_THERMOCOUPLED_OPEN)
    181c:	0f 3f       	cpi	r16, 0xFF	; 255
    181e:	10 07       	cpc	r17, r16
    1820:	61 f4       	brne	.+24     	; 0x183a <.L5>

00001822 <.Loc.32>:
	{
		str_out[0] = D7S_DATA_n | (1<< D7S_DP);
    1822:	87 e1       	ldi	r24, 0x17	; 23
    1824:	88 83       	st	Y, r24

00001826 <.Loc.34>:
		str_out[1] = D7S_DATA_c;
    1826:	89 e1       	ldi	r24, 0x19	; 25
    1828:	89 83       	std	Y+1, r24	; 0x01

0000182a <.L6>:
		//	str_out[idx++] = DISP7_NUMERIC_ARR[bcd[i]];
		//}
		str_out[BASKET_DISP_MAX_CHARS_PERBASKET-1] = D7S_DATA_GRADE_CENTIGRADE;
	}
	//fix right basket: upsidedown displays
	disp7s_fix_upsidedown_display(&str_out[2]);
    182a:	ce 01       	movw	r24, r28
    182c:	02 96       	adiw	r24, 0x02	; 2

0000182e <.Loc.37>:
}
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28

00001832 <.Loc.38>:
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16

00001836 <.Loc.39>:
	disp7s_fix_upsidedown_display(&str_out[2]);
    1836:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <disp7s_fix_upsidedown_display>

0000183a <.L5>:
	else if (temperatura>999)
    183a:	08 3e       	cpi	r16, 0xE8	; 232
    183c:	83 e0       	ldi	r24, 0x03	; 3
    183e:	18 07       	cpc	r17, r24
    1840:	3c f0       	brlt	.+14     	; 0x1850 <.L7>

00001842 <.Loc.42>:
		str_out[0] = D7S_DATA_o;
    1842:	8b e1       	ldi	r24, 0x1B	; 27
    1844:	88 83       	st	Y, r24

00001846 <.Loc.44>:
		str_out[1] = D7S_DATA_u;
    1846:	8b e0       	ldi	r24, 0x0B	; 11
    1848:	89 83       	std	Y+1, r24	; 0x01

0000184a <.Loc.46>:
		str_out[2] = D7S_DATA_t;
    184a:	89 e3       	ldi	r24, 0x39	; 57
    184c:	8a 83       	std	Y+2, r24	; 0x02
    184e:	ed cf       	rjmp	.-38     	; 0x182a <.L6>

00001850 <.L7>:
		integer_to_arraybcd_msb_lsb_paddingleft_blank(temperatura, str_out, BASKET_DISP_MAX_CHARS_PERBASKET-1 );
    1850:	43 e0       	ldi	r20, 0x03	; 3
    1852:	be 01       	movw	r22, r28
    1854:	c8 01       	movw	r24, r16
    1856:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <integer_to_arraybcd_msb_lsb_paddingleft_blank>

0000185a <.LVL25>:
		str_out[BASKET_DISP_MAX_CHARS_PERBASKET-1] = D7S_DATA_GRADE_CENTIGRADE;
    185a:	80 ef       	ldi	r24, 0xF0	; 240
    185c:	8b 83       	std	Y+3, r24	; 0x03
    185e:	e5 cf       	rjmp	.-54     	; 0x182a <.L6>

00001860 <smoothAlg_nonblock_job>:
	}
	return 0;
}

int8_t smoothAlg_nonblock_job(int16_t *temperature)
{
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	2a 97       	sbiw	r28, 0x0a	; 10
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	89 87       	std	Y+9, r24	; 0x09
    1876:	9a 87       	std	Y+10, r25	; 0x0a

00001878 <.Loc.53>:
	float smoothAnswer;

	if (smoothAlg_nonblock(&smoothAlg_temp, smoothVector, TEMPERATURE_SMOOTHALG_MAXSIZE, &smoothAnswer))
    1878:	9e 01       	movw	r18, r28
    187a:	2f 5f       	subi	r18, 0xFF	; 255
    187c:	3f 4f       	sbci	r19, 0xFF	; 255
    187e:	4c e3       	ldi	r20, 0x3C	; 60
    1880:	50 e0       	ldi	r21, 0x00	; 0
    1882:	60 ea       	ldi	r22, 0xA0	; 160
    1884:	76 e0       	ldi	r23, 0x06	; 6
    1886:	8f e8       	ldi	r24, 0x8F	; 143
    1888:	96 e0       	ldi	r25, 0x06	; 6

0000188a <.Loc.56>:
    188a:	0e 94 09 02 	call	0x412	; 0x412 <smoothAlg_nonblock>

0000188e <.LVL28>:
    188e:	81 15       	cp	r24, r1
    1890:	81 f1       	breq	.+96     	; 0x18f2 <.L8>

00001892 <.Loc.58>:
	{
		if (smoothAnswer > 0.0f)
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	ab 81       	ldd	r26, Y+3	; 0x03
    1898:	bc 81       	ldd	r27, Y+4	; 0x04
    189a:	8d 83       	std	Y+5, r24	; 0x05
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	af 83       	std	Y+7, r26	; 0x07
    18a0:	b8 87       	std	Y+8, r27	; 0x08

000018a2 <.Loc.60>:
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	9a 01       	movw	r18, r20
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 9d 1a 	call	0x353a	; 0x353a <__gesf2>

000018b0 <.LVL29>:
    18b0:	18 16       	cp	r1, r24
    18b2:	44 f5       	brge	.+80     	; 0x1904 <.L17>

000018b4 <.LBB2>:
		{

			float Rtd = (smoothAnswer*0.097852f)+ INA326_R_OPPOSITE;
    18b4:	21 ea       	ldi	r18, 0xA1	; 161
    18b6:	36 e6       	ldi	r19, 0x66	; 102
    18b8:	48 ec       	ldi	r20, 0xC8	; 200
    18ba:	5d e3       	ldi	r21, 0x3D	; 61
    18bc:	6d 81       	ldd	r22, Y+5	; 0x05
    18be:	7e 81       	ldd	r23, Y+6	; 0x06
    18c0:	8f 81       	ldd	r24, Y+7	; 0x07
    18c2:	98 85       	ldd	r25, Y+8	; 0x08
    18c4:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>

000018c8 <.LVL30>:
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	48 ec       	ldi	r20, 0xC8	; 200
    18ce:	52 e4       	ldi	r21, 0x42	; 66
    18d0:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__addsf3>

000018d4 <.LVL31>:
			//float Rtd = (smoothAnswer*0.097948f)+ INA326_R_OPPOSITE;
			//Rtd *= 1.021f;//factor de correccion /tarjeta A
			//Rtd *= 1.00f;//factor de correccion //tarjeta B
			Rtd *= 1.015f;//factor de correccion //tarjeta B
    18d4:	25 e8       	ldi	r18, 0x85	; 133
    18d6:	3b ee       	ldi	r19, 0xEB	; 235
    18d8:	41 e8       	ldi	r20, 0x81	; 129
    18da:	5f e3       	ldi	r21, 0x3F	; 63
    18dc:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>

000018e0 <.LVL32>:

			*temperature = (int)T_rtd(Rtd);
    18e0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <T_rtd>

000018e4 <.LVL33>:
    18e4:	0e 94 b5 19 	call	0x336a	; 0x336a <__fixsfsi>

000018e8 <.LVL34>:
    18e8:	a9 85       	ldd	r26, Y+9	; 0x09
    18ea:	ba 85       	ldd	r27, Y+10	; 0x0a
    18ec:	6d 93       	st	X+, r22
    18ee:	7d 93       	st	X+, r23

000018f0 <.L12>:
		}
		else
		{
			*temperature = 0;
		}
		return 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1

000018f2 <.L8>:
	}
	return 0;
}
    18f2:	2a 96       	adiw	r28, 0x0a	; 10
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	08 95       	ret

00001904 <.L17>:
			*temperature = 0;
    1904:	e9 85       	ldd	r30, Y+9	; 0x09
    1906:	fa 85       	ldd	r31, Y+10	; 0x0a
    1908:	10 82       	st	Z, r1
    190a:	11 82       	std	Z+1, r1	; 0x01
    190c:	f1 cf       	rjmp	.-30     	; 0x18f0 <.L12>

0000190e <temperature_job>:

int temperature_filtered_smoothed;
int8_t temperature_job(void)
{
    190e:	cf 93       	push	r28

00001910 <.LVL36>:
	int8_t codret = 0;
	static int8_t sm0;
	if (sm0 == 0)
    1910:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <sm0.0>
    1914:	81 11       	cpse	r24, r1
    1916:	21 c0       	rjmp	.+66     	; 0x195a <.L19>

00001918 <.LBB5>:
	uint8_t adclow = ADCL;
    1918:	44 b1       	in	r20, 0x04	; 4

0000191a <.LVL37>:
	uint16_t adc16 = (((uint16_t)ADCH)<<8) + adclow;
    191a:	25 b1       	in	r18, 0x05	; 5

0000191c <.LVL38>:
	smoothVector[job_captureTemperature.counter0] = adc16;
    191c:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <job_captureTemperature+0x1>
    1920:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <job_captureTemperature+0x2>

00001924 <.Loc.87>:
    1924:	fc 01       	movw	r30, r24
    1926:	ee 0f       	add	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	e0 56       	subi	r30, 0x60	; 96
    192c:	f9 4f       	sbci	r31, 0xF9	; 249
    192e:	40 83       	st	Z, r20
    1930:	21 83       	std	Z+1, r18	; 0x01

00001932 <.Loc.88>:
	if (++job_captureTemperature.counter0 >= TEMPERATURE_SMOOTHALG_MAXSIZE)
    1932:	01 96       	adiw	r24, 0x01	; 1

00001934 <.Loc.90>:
    1934:	8c 33       	cpi	r24, 0x3C	; 60
    1936:	91 05       	cpc	r25, r1
    1938:	40 f4       	brcc	.+16     	; 0x194a <.L20>
    193a:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <job_captureTemperature+0x1>
    193e:	90 93 60 07 	sts	0x0760, r25	; 0x800760 <job_captureTemperature+0x2>

00001942 <.L22>:
	int8_t codret = 0;
    1942:	c0 e0       	ldi	r28, 0x00	; 0

00001944 <.L18>:
			sm0 = 0x00;
			codret = 1;	//fin del proceso
		}
	}
	return codret;
}
    1944:	8c 2f       	mov	r24, r28
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <.L20>:
		job_captureTemperature.counter0 = 0x00;
    194a:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <job_captureTemperature+0x1>
    194e:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <job_captureTemperature+0x2>

00001952 <.Loc.96>:
			sm0++;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <sm0.0>
    1958:	f4 cf       	rjmp	.-24     	; 0x1942 <.L22>

0000195a <.L19>:
		if (smoothAlg_nonblock_job( &temperature_filtered_smoothed ))
    195a:	8d e8       	ldi	r24, 0x8D	; 141
    195c:	96 e0       	ldi	r25, 0x06	; 6
    195e:	0e 94 30 0c 	call	0x1860	; 0x1860 <smoothAlg_nonblock_job>

00001962 <.LVL43>:
    1962:	c8 2f       	mov	r28, r24

00001964 <.Loc.102>:
    1964:	81 15       	cp	r24, r1
    1966:	69 f3       	breq	.-38     	; 0x1942 <.L22>

00001968 <.Loc.103>:
			if (pgrmode.bf.unitTemperature == FAHRENHEIT)
    1968:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <pgrmode>

0000196c <.Loc.105>:
    196c:	80 fd       	sbrc	r24, 0
    196e:	1c c0       	rjmp	.+56     	; 0x19a8 <.L24>

00001970 <.Loc.106>:
				temperature_filtered_smoothed = (temperature_filtered_smoothed*1.8f) + 32;//TCtemperature = (TCtemperature*(9.0f/5)) + 32;
    1970:	60 91 8d 06 	lds	r22, 0x068D	; 0x80068d <temperature_filtered_smoothed>
    1974:	70 91 8e 06 	lds	r23, 0x068E	; 0x80068e <temperature_filtered_smoothed+0x1>
    1978:	87 2f       	mov	r24, r23
    197a:	88 0f       	add	r24, r24
    197c:	88 0b       	sbc	r24, r24
    197e:	98 2f       	mov	r25, r24
    1980:	0e 94 ed 19 	call	0x33da	; 0x33da <__floatsisf>

00001984 <.LVL44>:
    1984:	26 e6       	ldi	r18, 0x66	; 102
    1986:	36 e6       	ldi	r19, 0x66	; 102
    1988:	46 ee       	ldi	r20, 0xE6	; 230
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>

00001990 <.LVL45>:
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	52 e4       	ldi	r21, 0x42	; 66
    1998:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__addsf3>

0000199c <.LVL46>:
    199c:	0e 94 b5 19 	call	0x336a	; 0x336a <__fixsfsi>

000019a0 <.LVL47>:
    19a0:	60 93 8d 06 	sts	0x068D, r22	; 0x80068d <temperature_filtered_smoothed>
    19a4:	70 93 8e 06 	sts	0x068E, r23	; 0x80068e <temperature_filtered_smoothed+0x1>

000019a8 <.L24>:
			sm0 = 0x00;
    19a8:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <sm0.0>

000019ac <.Loc.112>:
	return codret;
    19ac:	cb cf       	rjmp	.-106    	; 0x1944 <.L18>

000019ae <InitSPI_MASTER>:
	{
		//ConfigOutputPin(CONFIGIOxSPI_MOSI, PINxKB_SPI_MOSI);
		//ConfigOutputPin(CONFIGIOxSPI_SCK, PINxKB_SPI_SCK);
		//ConfigOutputPin(CONFIGIOxSPI_CS, PINxKB_SPI_CS);

		DDRB |= (1<<7) | (1<< 4) | (1<< 5);
    19ae:	87 b3       	in	r24, 0x17	; 23

000019b0 <.Loc.2>:
    19b0:	80 6b       	ori	r24, 0xB0	; 176
    19b2:	87 bb       	out	0x17, r24	; 23

000019b4 <.Loc.3>:

        //SPCR = (1<<SPE) | (MSB_LSB_FIRST<< DORD) | (1<<MSTR) | (0<<CPOL) | (1<<CPHA) | (SPR1SPR0_SCK_FOSC_128);
        SPCR = (0<<SPE) | (MSB_LSB_FIRST<< DORD) | (1<<MSTR) | (0<<CPOL) | (1<<CPHA) | (SPR1SPR0_SCK_FOSC_128);
    19b4:	87 e1       	ldi	r24, 0x17	; 23
    19b6:	8d b9       	out	0x0d, r24	; 13

000019b8 <.Loc.5>:

       // SPSR = DOUBLE_SPI_SPEED_BIT << SPI2X;

	}//End fx()
    19b8:	08 95       	ret

000019ba <SPI_MSTR_ExchangeData>:

    uint8_t SPI_MSTR_ExchangeData(uint8_t DATASPI)
    {
        SPDR = DATASPI;
    19ba:	8f b9       	out	0x0f, r24	; 15

000019bc <.L3>:

        //Esperar por data transmitida
        while ( !(SPSR & (1<<SPIF) ) )   //1º Read Status register
    19bc:	77 9b       	sbis	0x0e, 7	; 14
    19be:	fe cf       	rjmp	.-4      	; 0x19bc <.L3>

000019c0 <.Loc.12>:
        {;}

        return  SPDR;               //2º leer SPDR -> Clear flag
    19c0:	8f b1       	in	r24, 0x0f	; 15

000019c2 <.Loc.14>:
    }
    19c2:	08 95       	ret

000019c4 <MAX6675_getFloatTmprCelsius>:
    1023.75-> ((2^12) -1)
    x -> temp_read

****************************************************************/
float MAX6675_getFloatTmprCelsius(void)
{
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17

000019c8 <.LVL0>:
    uint8_t spi_h;
    uint8_t spi_l;
    uint16_t temp_read  = 0x0000;
    //
    PinTo0(PORTWxSPI_CS,PINxKB_SPI_CS);
    19c8:	97 98       	cbi	0x12, 7	; 18

000019ca <.LBB10>:
    19ca:	25 e0       	ldi	r18, 0x05	; 5

000019cc <.L1^B1>:
    19cc:	2a 95       	dec	r18
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <.L1^B1>
	...

000019d2 <.LBE10>:
    _delay_us(1);//Tcss = 100ns

    	spi_h = SPI_MSTR_ExchangeData(DUMMY_BYTE_BY_EXCHANGE);
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MSTR_ExchangeData>

000019d8 <.LVL3>:
    19d8:	08 2f       	mov	r16, r24

000019da <.LVL4>:
        spi_l = SPI_MSTR_ExchangeData(DUMMY_BYTE_BY_EXCHANGE);
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MSTR_ExchangeData>

000019e0 <.LBB12>:
    19e0:	3a e1       	ldi	r19, 0x1A	; 26

000019e2 <.L1^B2>:
    19e2:	3a 95       	dec	r19
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <.L1^B2>
    19e6:	00 c0       	rjmp	.+0      	; 0x19e8 <L0^A>

000019e8 <L0^A>:

	_delay_us(5);//Ttr = 100ns >5us asegura q sea por completo los ul
    PinTo1(PORTWxSPI_CS,PINxKB_SPI_CS);
    19e8:	97 9a       	sbi	0x12, 7	; 18

000019ea <.Loc.31>:

    //
    if (spi_l & 0x04)
    19ea:	82 fd       	sbrc	r24, 2
    19ec:	23 c0       	rjmp	.+70     	; 0x1a34 <.L3>

000019ee <.Loc.34>:
    {
        return -1;//disconnected
    }
    else
    {
        temp_read = (spi_h<<8) | (spi_l);
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 2f       	mov	r19, r16
    19f2:	b9 01       	movw	r22, r18

000019f4 <.Loc.36>:
        temp_read = temp_read>>3;
    19f4:	83 e0       	ldi	r24, 0x03	; 3

000019f6 <.L1^B3>:
    19f6:	76 95       	lsr	r23
    19f8:	67 95       	ror	r22
    19fa:	8a 95       	dec	r24
    19fc:	e1 f7       	brne	.-8      	; 0x19f6 <.L1^B3>

000019fe <.Loc.39>:

        //return ( (temp_read * 1023.75)/ (4095) );
        //return ( (temp_read * MAX6675_TMPR_MAX)/ ((1<<12) -1) );
        return ( (temp_read * MAX6675_TMPR_MAX)/ (4095) );
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__floatunsisf>

00001a06 <.LVL9>:
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 ef       	ldi	r19, 0xF0	; 240
    1a0a:	4f e7       	ldi	r20, 0x7F	; 127
    1a0c:	54 e4       	ldi	r21, 0x44	; 68
    1a0e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>

00001a12 <.LVL10>:
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 ef       	ldi	r19, 0xF0	; 240
    1a16:	4f e7       	ldi	r20, 0x7F	; 127
    1a18:	55 e4       	ldi	r21, 0x45	; 69
    1a1a:	0e 94 43 19 	call	0x3286	; 0x3286 <__divsf3>

00001a1e <.LVL11>:
    1a1e:	56 2f       	mov	r21, r22
    1a20:	47 2f       	mov	r20, r23
    1a22:	38 2f       	mov	r19, r24
    1a24:	29 2f       	mov	r18, r25

00001a26 <.L1>:
    }
}
    1a26:	65 2f       	mov	r22, r21
    1a28:	74 2f       	mov	r23, r20
    1a2a:	83 2f       	mov	r24, r19
    1a2c:	92 2f       	mov	r25, r18
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16

00001a32 <.Loc.43>:
    1a32:	08 95       	ret

00001a34 <.L3>:
        return -1;//disconnected
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	50 e0       	ldi	r21, 0x00	; 0
    1a38:	2f eb       	ldi	r18, 0xBF	; 191
    1a3a:	30 e8       	ldi	r19, 0x80	; 128
    1a3c:	f4 cf       	rjmp	.-24     	; 0x1a26 <.L1>

00001a3e <MAX6675_get12bitsTemp>:
 * or
 * 12 bits (not signed by hardware)
 ***********************************************************/
#include "../main.h"
int16_t MAX6675_get12bitsTemp(void)
{
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	0f 92       	push	r0
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62

00001a4c <.LVL15>:
    uint8_t spi_h;
    uint8_t spi_l;
    uint16_t temp_read  = 0x0000;
    //
    PinTo0(PORTWxSPI_CS,PINxKB_SPI_CS);
    1a4c:	97 98       	cbi	0x12, 7	; 18

00001a4e <.LBB14>:
    1a4e:	85 e0       	ldi	r24, 0x05	; 5

00001a50 <.L1^B4>:
    1a50:	8a 95       	dec	r24
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <.L1^B4>
	...

00001a56 <.LBE14>:
    _delay_us(1);//Tcss = 100ns

    uint8_t dummy;
    	if ( ReadPin(PORTRxBUZZER,PINxBUZZER) == 1)
    1a56:	88 27       	eor	r24, r24
    1a58:	b5 99       	sbic	0x16, 5	; 22
    1a5a:	83 95       	inc	r24
    1a5c:	81 95       	neg	r24
    1a5e:	89 83       	std	Y+1, r24	; 0x01

00001a60 <.LVL18>:
    	}
    	else
    	{
    		dummy = 0x00;
    	}
BitTo1(SPCR,SPE);
    1a60:	6e 9a       	sbi	0x0d, 6	; 13

00001a62 <.Loc.66>:

    	spi_h = SPI_MSTR_ExchangeData(dummy);
    1a62:	89 81       	ldd	r24, Y+1	; 0x01

00001a64 <.Loc.69>:
    1a64:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MSTR_ExchangeData>

00001a68 <.LVL20>:
    1a68:	08 2f       	mov	r16, r24

00001a6a <.LVL21>:
		spi_l = SPI_MSTR_ExchangeData(dummy);
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MSTR_ExchangeData>

00001a70 <.LBB16>:
    1a70:	9a e1       	ldi	r25, 0x1A	; 26

00001a72 <.L1^B5>:
    1a72:	9a 95       	dec	r25
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <.L1^B5>
    1a76:	00 c0       	rjmp	.+0      	; 0x1a78 <L0^A>

00001a78 <L0^A>:
    	//spi_h = SPI_MSTR_ExchangeData(DUMMY_BYTE_BY_EXCHANGE);
        //spi_l = SPI_MSTR_ExchangeData(DUMMY_BYTE_BY_EXCHANGE);


        _delay_us(5);//Ttr = 100ns >5us asegura q sea por completo los ul
BitTo0(SPCR,SPE);
    1a78:	6e 98       	cbi	0x0d, 6	; 13

00001a7a <.Loc.83>:
        PinTo1(PORTWxSPI_CS,PINxKB_SPI_CS);
    1a7a:	97 9a       	sbi	0x12, 7	; 18

00001a7c <.Loc.86>:
    //
    if (spi_l & 0x04)
    1a7c:	82 fd       	sbrc	r24, 2
    1a7e:	0c c0       	rjmp	.+24     	; 0x1a98 <.L6>

00001a80 <.Loc.89>:
    {
        return MAX6675_THERMOCOUPLED_OPEN;//disconnected
    }
    else
    {
        temp_read = (spi_h<<8) | (spi_l);
    1a80:	90 2f       	mov	r25, r16

00001a82 <.Loc.91>:
        temp_read = temp_read>>3;
    1a82:	23 e0       	ldi	r18, 0x03	; 3

00001a84 <.L1^B6>:
    1a84:	96 95       	lsr	r25
    1a86:	87 95       	ror	r24
    1a88:	2a 95       	dec	r18
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <.L1^B6>

00001a8c <.L5>:
        return temp_read;
    }
}
    1a8c:	0f 90       	pop	r0
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16

00001a96 <.Loc.95>:
    1a96:	08 95       	ret

00001a98 <.L6>:
    1a98:	8f ef       	ldi	r24, 0xFF	; 255

00001a9a <.Loc.97>:
    1a9a:	9f ef       	ldi	r25, 0xFF	; 255
    1a9c:	f7 cf       	rjmp	.-18     	; 0x1a8c <.L5>

00001a9e <disp7s_setup>:
static unsigned char * disp7s_data;
static struct _disp7s_mux * disp7s_mux;

void disp7s_setup(uint8_t disp7s_nummax, volatile uint8_t * port,  unsigned char * _disp7s_data_array, struct _disp7s_mux * __disp7s_mux)
{
	disp7s_num_total = disp7s_nummax;
    1a9e:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <disp7s_num_total>

00001aa2 <.Loc.3>:
	PORTWxDISPLAY7S_DATA = port;
    1aa2:	60 93 1f 07 	sts	0x071F, r22	; 0x80071f <PORTWxDISPLAY7S_DATA>
    1aa6:	70 93 20 07 	sts	0x0720, r23	; 0x800720 <PORTWxDISPLAY7S_DATA+0x1>

00001aaa <.Loc.5>:
	disp7s_data = _disp7s_data_array;
    1aaa:	40 93 1d 07 	sts	0x071D, r20	; 0x80071d <disp7s_data>
    1aae:	50 93 1e 07 	sts	0x071E, r21	; 0x80071e <disp7s_data+0x1>

00001ab2 <.Loc.7>:
	disp7s_mux = __disp7s_mux;
    1ab2:	20 93 1b 07 	sts	0x071B, r18	; 0x80071b <disp7s_mux>
    1ab6:	30 93 1c 07 	sts	0x071C, r19	; 0x80071c <disp7s_mux+0x1>

00001aba <.Loc.9>:
}
    1aba:	08 95       	ret

00001abc <disp7s_job>:
void disp7s_job(void)
{
    static int8_t q;//q=transistor #

    //+-off current Q before to present new digit
    int8_t pq = q-1;
    1abc:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <q.0>

00001ac0 <.Loc.14>:
    if (pq<0)
    1ac0:	81 50       	subi	r24, 0x01	; 1
    1ac2:	1a f4       	brpl	.+6      	; 0x1aca <.L3>

00001ac4 <.Loc.15>:
    {
        pq = disp7s_num_total-1;
    1ac4:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <disp7s_num_total>
    1ac8:	81 50       	subi	r24, 0x01	; 1

00001aca <.L3>:
    }
    disp7s_mux[pq].Qonoff[0]();//off
    1aca:	24 e0       	ldi	r18, 0x04	; 4
    1acc:	82 02       	muls	r24, r18
    1ace:	c0 01       	movw	r24, r0
    1ad0:	11 24       	eor	r1, r1

00001ad2 <.Loc.19>:
    1ad2:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <disp7s_mux>
    1ad6:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <disp7s_mux+0x1>
    1ada:	e8 0f       	add	r30, r24
    1adc:	f9 1f       	adc	r31, r25

00001ade <.Loc.20>:
    1ade:	01 90       	ld	r0, Z+
    1ae0:	f0 81       	ld	r31, Z
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	09 95       	icall

00001ae6 <.Loc.21>:
    //-+

    //__delay_us(100);
    *PORTWxDISPLAY7S_DATA = disp7s_data[q];
    1ae6:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <q.0>

00001aea <.Loc.23>:
    1aea:	a0 91 1f 07 	lds	r26, 0x071F	; 0x80071f <PORTWxDISPLAY7S_DATA>
    1aee:	b0 91 20 07 	lds	r27, 0x0720	; 0x800720 <PORTWxDISPLAY7S_DATA+0x1>

00001af2 <.Loc.24>:
    1af2:	e0 91 1d 07 	lds	r30, 0x071D	; 0x80071d <disp7s_data>
    1af6:	f0 91 1e 07 	lds	r31, 0x071E	; 0x80071e <disp7s_data+0x1>
    1afa:	e8 0f       	add	r30, r24
    1afc:	f1 1d       	adc	r31, r1
    1afe:	87 fd       	sbrc	r24, 7
    1b00:	fa 95       	dec	r31
    1b02:	90 81       	ld	r25, Z

00001b04 <.Loc.25>:
    1b04:	9c 93       	st	X, r25

00001b06 <.Loc.26>:
    //disp7s_mux_Q(q);
    disp7s_mux[q].Qonoff[1]();//on
    1b06:	24 e0       	ldi	r18, 0x04	; 4
    1b08:	82 02       	muls	r24, r18
    1b0a:	c0 01       	movw	r24, r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <disp7s_mux>
    1b12:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <disp7s_mux+0x1>
    1b16:	e8 0f       	add	r30, r24
    1b18:	f9 1f       	adc	r31, r25

00001b1a <.Loc.28>:
    1b1a:	02 80       	ldd	r0, Z+2	; 0x02
    1b1c:	f3 81       	ldd	r31, Z+3	; 0x03
    1b1e:	e0 2d       	mov	r30, r0
    1b20:	09 95       	icall

00001b22 <.Loc.29>:

    //
    if (++q == disp7s_num_total)
    1b22:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <q.0>
    1b26:	8f 5f       	subi	r24, 0xFF	; 255

00001b28 <.Loc.31>:
    1b28:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <q.0>

00001b2c <.Loc.32>:
    1b2c:	20 91 21 07 	lds	r18, 0x0721	; 0x800721 <disp7s_num_total>
    1b30:	30 e0       	ldi	r19, 0x00	; 0

00001b32 <.Loc.33>:
    1b32:	08 2e       	mov	r0, r24
    1b34:	00 1c       	adc	r0, r0
    1b36:	00 08       	sbc	r0, r0
    1b38:	82 17       	cp	r24, r18
    1b3a:	03 06       	cpc	r0, r19
    1b3c:	11 f4       	brne	.+4      	; 0x1b42 <.L2>

00001b3e <.Loc.34>:
        {q=0x0;}
    1b3e:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <q.0>

00001b42 <.L2>:
}
    1b42:	08 95       	ret

00001b44 <disp7s_fix_upsidedown_display>:
//	AND_BITWISE(disp7s_data_array[6],~(1<< D7S_DP));
//}

//parsear a toda el array es lo mejor
void disp7s_fix_upsidedown_display(unsigned char *data)
{
    1b44:	fc 01       	movw	r30, r24

00001b46 <.Loc.2>:
	*data = (((*data & 0x10)>>2) | ((*data & 0x04)<<2) | (*data & 0xEB));
    1b46:	20 81       	ld	r18, Z

00001b48 <.Loc.4>:
    1b48:	24 fb       	bst	r18, 4
    1b4a:	99 27       	eor	r25, r25
    1b4c:	92 f9       	bld	r25, 2

00001b4e <.Loc.5>:
    1b4e:	22 fb       	bst	r18, 2
    1b50:	88 27       	eor	r24, r24
    1b52:	84 f9       	bld	r24, 4

00001b54 <.Loc.6>:
    1b54:	98 2b       	or	r25, r24

00001b56 <.Loc.7>:
    1b56:	2b 7e       	andi	r18, 0xEB	; 235
    1b58:	92 2b       	or	r25, r18

00001b5a <.Loc.8>:
    1b5a:	90 83       	st	Z, r25

00001b5c <.Loc.9>:
}
    1b5c:	08 95       	ret

00001b5e <disp7s_fix_all_upsidedown_display>:
//[0][1][2][3]    [4][5][6][7]
//[2] -> upsidedown
//[6] -> upsidedown
void disp7s_fix_all_upsidedown_display(void)
{
	disp7s_fix_upsidedown_display(&disp7s_data_array[2]);
    1b5e:	84 e2       	ldi	r24, 0x24	; 36
    1b60:	97 e0       	ldi	r25, 0x07	; 7
    1b62:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <disp7s_fix_upsidedown_display>

00001b66 <.LVL2>:
	disp7s_fix_upsidedown_display(&disp7s_data_array[6]);
    1b66:	88 e2       	ldi	r24, 0x28	; 40
    1b68:	97 e0       	ldi	r25, 0x07	; 7
    1b6a:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <disp7s_fix_upsidedown_display>

00001b6e <disp7s_blank_displays>:
}
void disp7s_blank_displays(unsigned char *data, int8_t initial_position, int8_t num_digits)
{
	//int8_t idx = initial_position;
	for (int i=0; i<num_digits; i++)
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0

00001b72 <.L4>:
    1b72:	04 2e       	mov	r0, r20
    1b74:	00 1c       	adc	r0, r0
    1b76:	00 08       	sbc	r0, r0
    1b78:	24 17       	cp	r18, r20
    1b7a:	30 05       	cpc	r19, r0
    1b7c:	0c f0       	brlt	.+2      	; 0x1b80 <.L5>

00001b7e <.Loc.18>:
	{
		data[initial_position++] = D7S_DATA_BLANK;
	}
}
    1b7e:	08 95       	ret

00001b80 <.L5>:
    1b80:	56 2f       	mov	r21, r22
    1b82:	52 0f       	add	r21, r18

00001b84 <.Loc.19>:
		data[initial_position++] = D7S_DATA_BLANK;
    1b84:	fc 01       	movw	r30, r24
    1b86:	e5 0f       	add	r30, r21
    1b88:	f1 1d       	adc	r31, r1
    1b8a:	57 fd       	sbrc	r21, 7
    1b8c:	fa 95       	dec	r31
    1b8e:	10 82       	st	Z, r1

00001b90 <.Loc.21>:
	for (int i=0; i<num_digits; i++)
    1b90:	2f 5f       	subi	r18, 0xFF	; 255
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255

00001b94 <.Loc.22>:
    1b94:	ee cf       	rjmp	.-36     	; 0x1b72 <.L4>

00001b96 <disp7s_update_data_array>:


void disp7s_update_data_array(const unsigned char *data, int8_t initial_position, int8_t num_digits)
{
	for (int i = 0; i< num_digits; i++ )
    1b96:	dc 01       	movw	r26, r24

00001b98 <.Loc.27>:
    1b98:	80 e0       	ldi	r24, 0x00	; 0

00001b9a <.Loc.28>:
    1b9a:	90 e0       	ldi	r25, 0x00	; 0

00001b9c <.L7>:
    1b9c:	04 2e       	mov	r0, r20
    1b9e:	00 1c       	adc	r0, r0
    1ba0:	00 08       	sbc	r0, r0
    1ba2:	84 17       	cp	r24, r20
    1ba4:	90 05       	cpc	r25, r0
    1ba6:	0c f0       	brlt	.+2      	; 0x1baa <.L8>

00001ba8 <.Loc.30>:
	{
		disp7s_data_array[initial_position++] = data[i];
	}
}
    1ba8:	08 95       	ret

00001baa <.L8>:
    1baa:	e6 2f       	mov	r30, r22
    1bac:	e8 0f       	add	r30, r24

00001bae <.Loc.31>:
		disp7s_data_array[initial_position++] = data[i];
    1bae:	2d 91       	ld	r18, X+

00001bb0 <.Loc.33>:
    1bb0:	fe 2f       	mov	r31, r30
    1bb2:	ff 0f       	add	r31, r31
    1bb4:	ff 0b       	sbc	r31, r31

00001bb6 <.Loc.34>:
    1bb6:	ee 5d       	subi	r30, 0xDE	; 222
    1bb8:	f8 4f       	sbci	r31, 0xF8	; 248
    1bba:	20 83       	st	Z, r18

00001bbc <.Loc.35>:
	for (int i = 0; i< num_digits; i++ )
    1bbc:	01 96       	adiw	r24, 0x01	; 1

00001bbe <.Loc.36>:
    1bbe:	ee cf       	rjmp	.-36     	; 0x1b9c <.L7>

00001bc0 <disp7s_save_data_array>:

void disp7s_save_data_array(unsigned char *data_array_buffer, int8_t num_digits)
{
	for (int i = 0; i<num_digits ; i++ )
    1bc0:	a2 e2       	ldi	r26, 0x22	; 34
    1bc2:	b7 e0       	ldi	r27, 0x07	; 7
    1bc4:	fc 01       	movw	r30, r24

00001bc6 <.Loc.41>:
    1bc6:	80 e0       	ldi	r24, 0x00	; 0

00001bc8 <.Loc.42>:
    1bc8:	90 e0       	ldi	r25, 0x00	; 0

00001bca <.L10>:
    1bca:	06 2e       	mov	r0, r22
    1bcc:	00 1c       	adc	r0, r0
    1bce:	00 08       	sbc	r0, r0
    1bd0:	86 17       	cp	r24, r22
    1bd2:	90 05       	cpc	r25, r0
    1bd4:	0c f0       	brlt	.+2      	; 0x1bd8 <.L11>

00001bd6 <.Loc.44>:
	{
		data_array_buffer[i] = disp7s_data_array[i];
	}
}
    1bd6:	08 95       	ret

00001bd8 <.L11>:
		data_array_buffer[i] = disp7s_data_array[i];
    1bd8:	2d 91       	ld	r18, X+

00001bda <.Loc.47>:
    1bda:	21 93       	st	Z+, r18

00001bdc <.Loc.48>:
	for (int i = 0; i<num_digits ; i++ )
    1bdc:	01 96       	adiw	r24, 0x01	; 1

00001bde <.Loc.49>:
    1bde:	f5 cf       	rjmp	.-22     	; 0x1bca <.L10>

00001be0 <disp7s_clear_all>:


void disp7s_clear_all(void)
{
	disp7s_blank_displays(disp7s_data_array,0,DISP7S_TOTAL_NUMMAX);
    1be0:	48 e0       	ldi	r20, 0x08	; 8
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	82 e2       	ldi	r24, 0x22	; 34
    1be6:	97 e0       	ldi	r25, 0x07	; 7
    1be8:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <disp7s_blank_displays>

00001bec <integer_to_arraybcd_msb_lsb_paddingleft_blank>:
}

void integer_to_arraybcd_msb_lsb_paddingleft_blank(int value, unsigned char *arraybcd, int8_t num_digits)
{
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	2d 97       	sbiw	r28, 0x0d	; 13
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	8c 87       	std	Y+12, r24	; 0x0c
    1c06:	9d 87       	std	Y+13, r25	; 0x0d
    1c08:	8b 01       	movw	r16, r22
    1c0a:	4b 87       	std	Y+11, r20	; 0x0b

00001c0c <.Loc.54>:
	unsigned char bcd[10];

	//blank all buffer
	disp7s_blank_displays(arraybcd,0,num_digits);
    1c0c:	60 e0       	ldi	r22, 0x00	; 0

00001c0e <.Loc.56>:
    1c0e:	c8 01       	movw	r24, r16

00001c10 <.Loc.57>:
    1c10:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <disp7s_blank_displays>

00001c14 <.LVL21>:

	int length = integer_to_arraybcd_msb_lsb(value, bcd);
    1c14:	be 01       	movw	r22, r28
    1c16:	6f 5f       	subi	r22, 0xFF	; 255
    1c18:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c1e:	0e 94 49 00 	call	0x92	; 0x92 <integer_to_arraybcd_msb_lsb>

00001c22 <.LBB8>:
	int idx= num_digits - length;
	for (int i = 0; i<length; i++ )
    1c22:	be 01       	movw	r22, r28
    1c24:	6f 5f       	subi	r22, 0xFF	; 255
    1c26:	7f 4f       	sbci	r23, 0xFF	; 255

00001c28 <.Loc.64>:
	int idx= num_digits - length;
    1c28:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c2a:	42 2f       	mov	r20, r18
    1c2c:	22 0f       	add	r18, r18
    1c2e:	55 0b       	sbc	r21, r21

00001c30 <.Loc.65>:
    1c30:	48 1b       	sub	r20, r24
    1c32:	59 0b       	sbc	r21, r25
    1c34:	d8 01       	movw	r26, r16
    1c36:	a4 0f       	add	r26, r20
    1c38:	b5 1f       	adc	r27, r21

00001c3a <.Loc.66>:
	for (int i = 0; i<length; i++ )
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	50 e0       	ldi	r21, 0x00	; 0

00001c3e <.L14>:
    1c3e:	48 17       	cp	r20, r24
    1c40:	59 07       	cpc	r21, r25
    1c42:	5c f0       	brlt	.+22     	; 0x1c5a <.L15>

00001c44 <.Loc.68>:
	{
		arraybcd[idx++] = DISP7_NUMERIC_ARR[bcd[i]];
	}
}
    1c44:	2d 96       	adiw	r28, 0x0d	; 13
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16

00001c58 <.Loc.69>:
    1c58:	08 95       	ret

00001c5a <.L15>:
		arraybcd[idx++] = DISP7_NUMERIC_ARR[bcd[i]];
    1c5a:	fb 01       	movw	r30, r22
    1c5c:	21 91       	ld	r18, Z+
    1c5e:	bf 01       	movw	r22, r30

00001c60 <.Loc.72>:
    1c60:	30 e0       	ldi	r19, 0x00	; 0

00001c62 <.Loc.73>:
    1c62:	23 53       	subi	r18, 0x33	; 51
    1c64:	3b 4f       	sbci	r19, 0xFB	; 251

00001c66 <.Loc.74>:
    1c66:	f9 01       	movw	r30, r18
    1c68:	20 81       	ld	r18, Z
    1c6a:	2d 93       	st	X+, r18

00001c6c <.Loc.75>:
	for (int i = 0; i<length; i++ )
    1c6c:	4f 5f       	subi	r20, 0xFF	; 255
    1c6e:	5f 4f       	sbci	r21, 0xFF	; 255

00001c70 <.Loc.76>:
    1c70:	e6 cf       	rjmp	.-52     	; 0x1c3e <.L14>

00001c72 <integer_to_arraybcd_msb_lsb_paddingleft_zeroes>:
void integer_to_arraybcd_msb_lsb_paddingleft_zeroes(int value, unsigned char *arraybcd, int8_t num_digits)
{
    1c72:	ff 92       	push	r15
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	2a 97       	sbiw	r28, 0x0a	; 10
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	8b 01       	movw	r16, r22
    1c8e:	f4 2e       	mov	r15, r20

00001c90 <.LBB11>:
	unsigned char bcd[10];

	//blank all buffer
	//disp7s_blank_displays(arraybcd,0,num_digits);
	for (int8_t i=0; i<num_digits; i++)
    1c90:	fb 01       	movw	r30, r22

00001c92 <.Loc.83>:
	{
		arraybcd[i] = D7S_DATA_0;
    1c92:	3b ee       	ldi	r19, 0xEB	; 235

00001c94 <.L17>:
	for (int8_t i=0; i<num_digits; i++)
    1c94:	2e 2f       	mov	r18, r30
    1c96:	20 1b       	sub	r18, r16
    1c98:	2f 15       	cp	r18, r15
    1c9a:	fc f0       	brlt	.+62     	; 0x1cda <.L18>

00001c9c <.Loc.85>:
	}


	int length = integer_to_arraybcd_msb_lsb(value, bcd);
    1c9c:	be 01       	movw	r22, r28
    1c9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <integer_to_arraybcd_msb_lsb>

00001ca6 <.LBB12>:
	int idx= num_digits - length;
	for (int i = 0; i<length; i++ )
    1ca6:	de 01       	movw	r26, r28
    1ca8:	11 96       	adiw	r26, 0x01	; 1

00001caa <.Loc.91>:
	int idx= num_digits - length;
    1caa:	4f 2d       	mov	r20, r15
    1cac:	ff 0c       	add	r15, r15
    1cae:	55 0b       	sbc	r21, r21

00001cb0 <.Loc.92>:
    1cb0:	48 1b       	sub	r20, r24
    1cb2:	59 0b       	sbc	r21, r25
    1cb4:	04 0f       	add	r16, r20
    1cb6:	15 1f       	adc	r17, r21

00001cb8 <.Loc.93>:
	for (int i = 0; i<length; i++ )
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	50 e0       	ldi	r21, 0x00	; 0

00001cbc <.L19>:
    1cbc:	48 17       	cp	r20, r24
    1cbe:	59 07       	cpc	r21, r25
    1cc0:	74 f0       	brlt	.+28     	; 0x1cde <.L20>

00001cc2 <.Loc.95>:
	{
		arraybcd[idx++] = DISP7_NUMERIC_ARR[bcd[i]];
	}
}
    1cc2:	2a 96       	adiw	r28, 0x0a	; 10
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	ff 90       	pop	r15

00001cd8 <.Loc.96>:
    1cd8:	08 95       	ret

00001cda <.L18>:
		arraybcd[i] = D7S_DATA_0;
    1cda:	31 93       	st	Z+, r19

00001cdc <.Loc.99>:
	for (int8_t i=0; i<num_digits; i++)
    1cdc:	db cf       	rjmp	.-74     	; 0x1c94 <.L17>

00001cde <.L20>:
		arraybcd[idx++] = DISP7_NUMERIC_ARR[bcd[i]];
    1cde:	2d 91       	ld	r18, X+

00001ce0 <.Loc.103>:
    1ce0:	30 e0       	ldi	r19, 0x00	; 0

00001ce2 <.Loc.104>:
    1ce2:	23 53       	subi	r18, 0x33	; 51
    1ce4:	3b 4f       	sbci	r19, 0xFB	; 251

00001ce6 <.Loc.105>:
    1ce6:	f9 01       	movw	r30, r18
    1ce8:	20 81       	ld	r18, Z
    1cea:	f8 01       	movw	r30, r16
    1cec:	21 93       	st	Z+, r18
    1cee:	8f 01       	movw	r16, r30

00001cf0 <.Loc.106>:
	for (int i = 0; i<length; i++ )
    1cf0:	4f 5f       	subi	r20, 0xFF	; 255
    1cf2:	5f 4f       	sbci	r21, 0xFF	; 255

00001cf4 <.Loc.107>:
    1cf4:	e3 cf       	rjmp	.-58     	; 0x1cbc <.L19>

00001cf6 <disp7s_decimalpoint_on>:

void disp7s_decimalpoint_on(unsigned char *dig)
{
    1cf6:	fc 01       	movw	r30, r24

00001cf8 <.Loc.110>:

	OR_BITWISE(*dig, (1<< D7S_DP) );
    1cf8:	90 81       	ld	r25, Z
    1cfa:	94 60       	ori	r25, 0x04	; 4
    1cfc:	90 83       	st	Z, r25

00001cfe <.Loc.112>:
}
    1cfe:	08 95       	ret

00001d00 <disp7s_decimalpoint_off>:
void disp7s_decimalpoint_off(unsigned char *dig)
{
    1d00:	fc 01       	movw	r30, r24

00001d02 <.Loc.116>:

	AND_BITWISE(*dig, ~(1<< D7S_DP) );
    1d02:	90 81       	ld	r25, Z
    1d04:	9b 7f       	andi	r25, 0xFB	; 251
    1d06:	90 83       	st	Z, r25

00001d08 <.Loc.118>:
}
    1d08:	08 95       	ret

00001d0a <disp7s_mux0_off>:
#include "Display7S/display7s.h"


static inline void disp7s_mux0_off(void)
{
    PinTo0(PORTWxDISPLAY7S_Q0, PINxDISPLAY7S_Q0);
    1d0a:	95 98       	cbi	0x12, 5	; 18

00001d0c <.Loc.3>:
}
    1d0c:	08 95       	ret

00001d0e <disp7s_mux0_on>:
static inline void disp7s_mux0_on(void)
{
    PinTo1(PORTWxDISPLAY7S_Q0, PINxDISPLAY7S_Q0);
    1d0e:	95 9a       	sbi	0x12, 5	; 18

00001d10 <.Loc.8>:
}
    1d10:	08 95       	ret

00001d12 <disp7s_mux1_off>:
//
static inline void disp7s_mux1_off(void)
{
    PinTo0(PORTWxDISPLAY7S_Q1, PINxDISPLAY7S_Q1);
    1d12:	92 98       	cbi	0x12, 2	; 18

00001d14 <.Loc.13>:
}
    1d14:	08 95       	ret

00001d16 <disp7s_mux1_on>:
static inline void disp7s_mux1_on(void)
{
    PinTo1(PORTWxDISPLAY7S_Q1, PINxDISPLAY7S_Q1);
    1d16:	92 9a       	sbi	0x12, 2	; 18

00001d18 <.Loc.18>:
}
    1d18:	08 95       	ret

00001d1a <disp7s_mux2_off>:
//
static inline void disp7s_mux2_off(void)
{
    PinTo0(PORTWxDISPLAY7S_Q2, PINxDISPLAY7S_Q2);
    1d1a:	93 98       	cbi	0x12, 3	; 18

00001d1c <.Loc.23>:
}
    1d1c:	08 95       	ret

00001d1e <disp7s_mux2_on>:
static inline void disp7s_mux2_on(void)
{
    PinTo1(PORTWxDISPLAY7S_Q2, PINxDISPLAY7S_Q2);
    1d1e:	93 9a       	sbi	0x12, 3	; 18

00001d20 <.Loc.28>:
}
    1d20:	08 95       	ret

00001d22 <disp7s_mux3_off>:
//
static inline void disp7s_mux3_off(void)
{
    PinTo0(PORTWxDISPLAY7S_Q3, PINxDISPLAY7S_Q3);
    1d22:	94 98       	cbi	0x12, 4	; 18

00001d24 <.Loc.33>:
}
    1d24:	08 95       	ret

00001d26 <disp7s_mux3_on>:
static inline void disp7s_mux3_on(void)
{
    PinTo1(PORTWxDISPLAY7S_Q3, PINxDISPLAY7S_Q3);
    1d26:	94 9a       	sbi	0x12, 4	; 18

00001d28 <.Loc.38>:
}
    1d28:	08 95       	ret

00001d2a <disp7s_mux4_off>:
//
static inline void disp7s_mux4_off(void)
{
    PinTo0(PORTWxDISPLAY7S_Q4, PINxDISPLAY7S_Q4);
    1d2a:	df 98       	cbi	0x1b, 7	; 27

00001d2c <.Loc.43>:
}
    1d2c:	08 95       	ret

00001d2e <disp7s_mux4_on>:
static inline void disp7s_mux4_on(void)
{
    PinTo1(PORTWxDISPLAY7S_Q4, PINxDISPLAY7S_Q4);
    1d2e:	df 9a       	sbi	0x1b, 7	; 27

00001d30 <.Loc.48>:
}
    1d30:	08 95       	ret

00001d32 <disp7s_mux5_off>:
//
static inline void disp7s_mux5_off(void)
{
    PinTo0(PORTWxDISPLAY7S_Q5, PINxDISPLAY7S_Q5);
    1d32:	de 98       	cbi	0x1b, 6	; 27

00001d34 <.Loc.53>:
}
    1d34:	08 95       	ret

00001d36 <disp7s_mux5_on>:
static inline void disp7s_mux5_on(void)
{
    PinTo1(PORTWxDISPLAY7S_Q5, PINxDISPLAY7S_Q5);
    1d36:	de 9a       	sbi	0x1b, 6	; 27

00001d38 <.Loc.58>:
}
    1d38:	08 95       	ret

00001d3a <disp7s_mux6_off>:
//
static inline void disp7s_mux6_off(void)
{
    PinTo0(PORTWxDISPLAY7S_Q6, PINxDISPLAY7S_Q6);
    1d3a:	dd 98       	cbi	0x1b, 5	; 27

00001d3c <.Loc.63>:
}
    1d3c:	08 95       	ret

00001d3e <disp7s_mux6_on>:
static inline void disp7s_mux6_on(void)
{
    PinTo1(PORTWxDISPLAY7S_Q6, PINxDISPLAY7S_Q6);
    1d3e:	dd 9a       	sbi	0x1b, 5	; 27

00001d40 <.Loc.68>:
}
    1d40:	08 95       	ret

00001d42 <disp7s_mux7_off>:
//
static inline void disp7s_mux7_off(void)
{
    PinTo0(PORTWxDISPLAY7S_Q7, PINxDISPLAY7S_Q7);
    1d42:	dc 98       	cbi	0x1b, 4	; 27

00001d44 <.Loc.73>:
}
    1d44:	08 95       	ret

00001d46 <disp7s_mux7_on>:
static inline void disp7s_mux7_on(void)
{
    PinTo1(PORTWxDISPLAY7S_Q7, PINxDISPLAY7S_Q7);
    1d46:	dc 9a       	sbi	0x1b, 4	; 27

00001d48 <.Loc.78>:
}
    1d48:	08 95       	ret

00001d4a <disp7s_init>:
};

unsigned char disp7s_data_array[DISP7S_TOTAL_NUMMAX];

void disp7s_init(void)
{
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29

00001d4e <.Loc.81>:
	int8_t i;

	//set all pointers and constansts
	disp7s_setup(DISP7S_TOTAL_NUMMAX, &PORTWxDISPLAY7S_DATA,  disp7s_data_array, disp7s_mux);
    1d4e:	20 e6       	ldi	r18, 0x60	; 96
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	42 e2       	ldi	r20, 0x22	; 34
    1d54:	57 e0       	ldi	r21, 0x07	; 7
    1d56:	65 e3       	ldi	r22, 0x35	; 53
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	88 e0       	ldi	r24, 0x08	; 8
    1d5c:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <disp7s_setup>

00001d60 <.LVL0>:

	//config transistors
	for (i=0; i< DISP7S_TOTAL_NUMMAX; i++)
    1d60:	c0 e6       	ldi	r28, 0x60	; 96
    1d62:	d0 e0       	ldi	r29, 0x00	; 0

00001d64 <.L18>:
    {
        disp7s_mux[i].Qonoff[0]();//off
    1d64:	e8 81       	ld	r30, Y
    1d66:	f9 81       	ldd	r31, Y+1	; 0x01
    1d68:	09 95       	icall

00001d6a <.Loc.86>:
	for (i=0; i< DISP7S_TOTAL_NUMMAX; i++)
    1d6a:	24 96       	adiw	r28, 0x04	; 4

00001d6c <.Loc.88>:
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	c0 38       	cpi	r28, 0x80	; 128
    1d70:	d8 07       	cpc	r29, r24
    1d72:	c1 f7       	brne	.-16     	; 0x1d64 <.L18>

00001d74 <.Loc.89>:
    }

    ConfigOutputPin(CONFIGIOxDISPLAY7S_Q0, PINxDISPLAY7S_Q0);
    1d74:	8d 9a       	sbi	0x11, 5	; 17

00001d76 <.Loc.91>:
    ConfigOutputPin(CONFIGIOxDISPLAY7S_Q1, PINxDISPLAY7S_Q1);
    1d76:	8a 9a       	sbi	0x11, 2	; 17

00001d78 <.Loc.94>:
    ConfigOutputPin(CONFIGIOxDISPLAY7S_Q2, PINxDISPLAY7S_Q2);
    1d78:	8b 9a       	sbi	0x11, 3	; 17

00001d7a <.Loc.97>:
    ConfigOutputPin(CONFIGIOxDISPLAY7S_Q3, PINxDISPLAY7S_Q3);
    1d7a:	8c 9a       	sbi	0x11, 4	; 17

00001d7c <.Loc.100>:
    ConfigOutputPin(CONFIGIOxDISPLAY7S_Q4, PINxDISPLAY7S_Q4);
    1d7c:	d7 9a       	sbi	0x1a, 7	; 26

00001d7e <.Loc.103>:
    ConfigOutputPin(CONFIGIOxDISPLAY7S_Q5, PINxDISPLAY7S_Q5);
    1d7e:	d6 9a       	sbi	0x1a, 6	; 26

00001d80 <.Loc.106>:
    ConfigOutputPin(CONFIGIOxDISPLAY7S_Q6, PINxDISPLAY7S_Q6);
    1d80:	d5 9a       	sbi	0x1a, 5	; 26

00001d82 <.Loc.109>:
    ConfigOutputPin(CONFIGIOxDISPLAY7S_Q7, PINxDISPLAY7S_Q7);
    1d82:	d4 9a       	sbi	0x1a, 4	; 26

00001d84 <.Loc.112>:

    //config output port
    ConfigOutputPort(CONFIGIOxDISPLAY7S_DATA,OUTPUT_PORT8BIT);
    1d84:	84 b3       	in	r24, 0x14	; 20
    1d86:	8f ef       	ldi	r24, 0xFF	; 255
    1d88:	84 bb       	out	0x14, r24	; 20

00001d8a <.Loc.115>:
}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28

00001d8e <.Loc.117>:
    1d8e:	08 95       	ret

00001d90 <mypid0_set>:
/* cada PWM_ACCESS_TIME_MS se lleva el timing del periodo del PWM */
#define PWM_ACCESS_TIME_MS 100 //ms

void mypid0_set(void)
{
	mypid0.pwm.timing.kmax_ticks_ms = PWM_ACCESS_TIME_MS/SYSTICK_MS;//100 ms
    1d90:	24 e6       	ldi	r18, 0x64	; 100
    1d92:	20 93 51 07 	sts	0x0751, r18	; 0x800751 <mypid0+0x27>
    1d96:	10 92 52 07 	sts	0x0752, r1	; 0x800752 <mypid0+0x28>

00001d9a <.Loc.3>:

	/* tengo que convertir a unidades de tiempo */
	mypid0.algo.scaler_time_ms = 1000.0f/PWM_ACCESS_TIME_MS;	// 1seg/PWM_ACCESS_TIME_MS
    1d9a:	8a e0       	ldi	r24, 0x0A	; 10
    1d9c:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <mypid0+0x10>
    1da0:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <mypid0+0x11>

00001da4 <.Loc.5>:


	/* aqui es donde realmente se fija el valor */
	/* todo depende practicamente del valor asignado asignado a KP*/
	mypid0.algo.pid_out_max_ms = 10 * mypid0.algo.scaler_time_ms; //10s
    1da4:	20 93 36 07 	sts	0x0736, r18	; 0x800736 <mypid0+0xc>
    1da8:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <mypid0+0xd>

00001dac <.Loc.7>:
	mypid0.algo.pid_out_min_ms = 0 * mypid0.algo.scaler_time_ms;	//0s
    1dac:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <mypid0+0xe>
    1db0:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <mypid0+0xf>

00001db4 <.Loc.10>:

	/* El sistema presenta esos delays */
	mypid0.pwm.timing.k_systemdelay_ton_ms = 500.0f / PWM_ACCESS_TIME_MS;
    1db4:	25 e0       	ldi	r18, 0x05	; 5
    1db6:	20 93 53 07 	sts	0x0753, r18	; 0x800753 <mypid0+0x29>
    1dba:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <mypid0+0x2a>

00001dbe <.Loc.11>:
	mypid0.pwm.timing.k_systemdelay_toff_ms = 5000.0f/ PWM_ACCESS_TIME_MS;
    1dbe:	22 e3       	ldi	r18, 0x32	; 50
    1dc0:	20 93 55 07 	sts	0x0755, r18	; 0x800755 <mypid0+0x2b>
    1dc4:	10 92 56 07 	sts	0x0756, r1	; 0x800756 <mypid0+0x2c>

00001dc8 <.Loc.13>:
	 *
	 * +50 es el error SP-PV, a partir de esa diferencia queremos el controlador
	 * empieza a regular entre 10..0 de manera proporcional
	 *  */
	//mypid0.algo.kp = 10.0f / 25;// 5/6/2024 la kte se dobla
	mypid0.algo.kp = 10.0f / 12;// 5/6/2024 la kte se dobla
    1dc8:	45 e5       	ldi	r20, 0x55	; 85
    1dca:	55 e5       	ldi	r21, 0x55	; 85
    1dcc:	65 e5       	ldi	r22, 0x55	; 85
    1dce:	7f e3       	ldi	r23, 0x3F	; 63
    1dd0:	40 93 3c 07 	sts	0x073C, r20	; 0x80073c <mypid0+0x12>
    1dd4:	50 93 3d 07 	sts	0x073D, r21	; 0x80073d <mypid0+0x13>
    1dd8:	60 93 3e 07 	sts	0x073E, r22	; 0x80073e <mypid0+0x14>
    1ddc:	70 93 3f 07 	sts	0x073F, r23	; 0x80073f <mypid0+0x15>

00001de0 <.Loc.15>:

	//pid.algo.kp = 1.0f/5;

	mypid0.algo.ki = 1.0f/10;
    1de0:	4d ec       	ldi	r20, 0xCD	; 205
    1de2:	5c ec       	ldi	r21, 0xCC	; 204
    1de4:	6c ec       	ldi	r22, 0xCC	; 204
    1de6:	7d e3       	ldi	r23, 0x3D	; 61
    1de8:	40 93 40 07 	sts	0x0740, r20	; 0x800740 <mypid0+0x16>
    1dec:	50 93 41 07 	sts	0x0741, r21	; 0x800741 <mypid0+0x17>
    1df0:	60 93 42 07 	sts	0x0742, r22	; 0x800742 <mypid0+0x18>
    1df4:	70 93 43 07 	sts	0x0743, r23	; 0x800743 <mypid0+0x19>

00001df8 <.Loc.17>:
	mypid0.algo.kd = 0;
    1df8:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <mypid0+0x1a>
    1dfc:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <mypid0+0x1b>
    1e00:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <mypid0+0x1c>
    1e04:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <mypid0+0x1d>

00001e08 <.Loc.19>:
	mypid0.algo.kei_windup_min = 0;
    1e08:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <mypid0+0xa>
    1e0c:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <mypid0+0xb>

00001e10 <.Loc.21>:
	mypid0.algo.kei_windup_max = 10;
    1e10:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <mypid0+0x8>
    1e14:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <mypid0+0x9>

00001e18 <.Loc.23>:

	mypid0.pwm.io.port = &PORTWxSOL_GAS_QUEMADOR;
    1e18:	88 e3       	ldi	r24, 0x38	; 56
    1e1a:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <mypid0+0x2d>
    1e1e:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <mypid0+0x2e>

00001e22 <.Loc.25>:
	mypid0.pwm.io.pin = PINxSOL_GAS_QUEMADOR;
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <mypid0+0x2f>

00001e28 <.Loc.27>:
	//
	//mypid0.algo.sp = 300;
}
    1e28:	08 95       	ret

00001e2a <mypid0_adjust_kei_windup>:
{
	/* 1. error es target-specific */
	//int16_t pv = TCtemperature;
	//int16_t pv = 110;
	//int16_t error =  mypid0.algo.sp - pv;
	int16_t error =  tmprture_coccion.TC - TCtemperature;
    1e2a:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <tmprture_coccion>
    1e2e:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <tmprture_coccion+0x1>
    1e32:	20 91 18 07 	lds	r18, 0x0718	; 0x800718 <TCtemperature>
    1e36:	30 91 19 07 	lds	r19, 0x0719	; 0x800719 <TCtemperature+0x1>
    1e3a:	82 1b       	sub	r24, r18
    1e3c:	93 0b       	sbc	r25, r19

00001e3e <.LVL0>:

	/* adjust windup for integral error */
	if (error > 5)
    1e3e:	21 e0       	ldi	r18, 0x01	; 1
    1e40:	86 30       	cpi	r24, 0x06	; 6
    1e42:	91 05       	cpc	r25, r1
    1e44:	0c f0       	brlt	.+2      	; 0x1e48 <.L3>
    1e46:	2a e0       	ldi	r18, 0x0A	; 10

00001e48 <.L3>:
	{
		mypid0.algo.kei_windup_max = 10;
    1e48:	20 93 32 07 	sts	0x0732, r18	; 0x800732 <mypid0+0x8>
    1e4c:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <mypid0+0x9>

00001e50 <.Loc.34>:
	else
	{
		mypid0.algo.kei_windup_max = 1;
	}
	return error;
}
    1e50:	08 95       	ret

00001e52 <kbmode_default>:

void kbmode_default(struct _kb_basket *kb)
{
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <L0^A>

00001e5c <L0^A>:
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <L0^A>

00001e5e <L0^A>:
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <L0^A>

00001e60 <L0^A>:
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	8c 01       	movw	r16, r24

00001e66 <.Loc.38>:
	struct _key_prop key_prop = { 0 };
	//
	key_prop = propEmpty;
    1e66:	86 e0       	ldi	r24, 0x06	; 6

00001e68 <.Loc.41>:
    1e68:	ea e8       	ldi	r30, 0x8A	; 138
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	de 01       	movw	r26, r28
    1e6e:	11 96       	adiw	r26, 0x01	; 1

00001e70 <.L0^B1>:
    1e70:	01 90       	ld	r0, Z+
    1e72:	0d 92       	st	X+, r0
    1e74:	8a 95       	dec	r24
    1e76:	e1 f7       	brne	.-8      	; 0x1e70 <.L0^B1>

00001e78 <.Loc.42>:
	//
	key_prop.uFlag.f.onKeyPressed = 1;
    1e78:	29 81       	ldd	r18, Y+1	; 0x01
    1e7a:	21 60       	ori	r18, 0x01	; 1
    1e7c:	29 83       	std	Y+1, r18	; 0x01

00001e7e <.Loc.44>:
	ikb_setKeyProp(kb->sleep,key_prop);
    1e7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e80:	4b 81       	ldd	r20, Y+3	; 0x03
    1e82:	5c 81       	ldd	r21, Y+4	; 0x04
    1e84:	6d 81       	ldd	r22, Y+5	; 0x05
    1e86:	7e 81       	ldd	r23, Y+6	; 0x06
    1e88:	f8 01       	movw	r30, r16
    1e8a:	81 81       	ldd	r24, Z+1	; 0x01
    1e8c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <ikb_setKeyProp>

00001e90 <.LVL3>:
	ikb_setKeyProp(kb->startStop ,key_prop);
    1e90:	29 81       	ldd	r18, Y+1	; 0x01
    1e92:	3a 81       	ldd	r19, Y+2	; 0x02
    1e94:	4b 81       	ldd	r20, Y+3	; 0x03
    1e96:	5c 81       	ldd	r21, Y+4	; 0x04
    1e98:	6d 81       	ldd	r22, Y+5	; 0x05
    1e9a:	7e 81       	ldd	r23, Y+6	; 0x06
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	80 81       	ld	r24, Z
    1ea0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <ikb_setKeyProp>

00001ea4 <.LVL4>:
	//
	key_prop.uFlag.f.onKeyPressed = 0;
    1ea4:	29 81       	ldd	r18, Y+1	; 0x01
    1ea6:	2e 7d       	andi	r18, 0xDE	; 222
    1ea8:	20 62       	ori	r18, 0x20	; 32
    1eaa:	29 83       	std	Y+1, r18	; 0x01

00001eac <.Loc.49>:
	key_prop.uFlag.f.atTimeExpired2 = 1;
	ikb_setKeyProp(kb->program ,key_prop);//programacion
    1eac:	3a 81       	ldd	r19, Y+2	; 0x02
    1eae:	4b 81       	ldd	r20, Y+3	; 0x03
    1eb0:	5c 81       	ldd	r21, Y+4	; 0x04
    1eb2:	6d 81       	ldd	r22, Y+5	; 0x05
    1eb4:	7e 81       	ldd	r23, Y+6	; 0x06
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	84 81       	ldd	r24, Z+4	; 0x04
    1eba:	0e 94 bf 06 	call	0xd7e	; 0xd7e <ikb_setKeyProp>

00001ebe <.LVL5>:
	//
	key_prop.uFlag.f.atTimeExpired2 = 0;
	//
	key_prop.uFlag.f.onKeyPressed = 1;
    1ebe:	29 81       	ldd	r18, Y+1	; 0x01
    1ec0:	2c 7d       	andi	r18, 0xDC	; 220
    1ec2:	23 60       	ori	r18, 0x03	; 3
    1ec4:	29 83       	std	Y+1, r18	; 0x01

00001ec6 <.Loc.57>:
	key_prop.uFlag.f.reptt = 1;
	key_prop.numGroup = 0;
	key_prop.repttTh.breakTime = (uint16_t) 200.0 / KB_PERIODIC_ACCESS;
    1ec6:	8a e0       	ldi	r24, 0x0A	; 10
    1ec8:	38 2f       	mov	r19, r24
    1eca:	8a 83       	std	Y+2, r24	; 0x02
    1ecc:	1b 82       	std	Y+3, r1	; 0x03

00001ece <.Loc.58>:
	key_prop.repttTh.period = (uint16_t) 50.0 / KB_PERIODIC_ACCESS;
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	58 2f       	mov	r21, r24
    1ed2:	8c 83       	std	Y+4, r24	; 0x04
    1ed4:	1d 82       	std	Y+5, r1	; 0x05

00001ed6 <.Loc.59>:
	key_prop.numGroup = 0;
    1ed6:	1e 82       	std	Y+6, r1	; 0x06

00001ed8 <.Loc.60>:
	ikb_setKeyProp(kb->down ,key_prop);
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	f8 01       	movw	r30, r16
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	0e 94 bf 06 	call	0xd7e	; 0xd7e <ikb_setKeyProp>

00001ee6 <.LVL6>:
	ikb_setKeyProp(kb->up ,key_prop);
    1ee6:	29 81       	ldd	r18, Y+1	; 0x01
    1ee8:	3a 81       	ldd	r19, Y+2	; 0x02
    1eea:	4b 81       	ldd	r20, Y+3	; 0x03
    1eec:	5c 81       	ldd	r21, Y+4	; 0x04
    1eee:	6d 81       	ldd	r22, Y+5	; 0x05
    1ef0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	83 81       	ldd	r24, Z+3	; 0x03

00001ef6 <.Loc.62>:
}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16

00001f0a <.Loc.63>:
	ikb_setKeyProp(kb->up ,key_prop);
    1f0a:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <ikb_setKeyProp>

00001f0e <kbmode_2basket_set_default>:
void kbmode_2basket_set_default(void)
{
	for (int i=0; i<BASKET_MAXSIZE; i++)
	{
		kbmode_default(&fryer.basket[i].kb);
    1f0e:	86 e6       	ldi	r24, 0x66	; 102
    1f10:	97 e0       	ldi	r25, 0x07	; 7
    1f12:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

00001f16 <.LVL10>:
    1f16:	80 e8       	ldi	r24, 0x80	; 128
    1f18:	97 e0       	ldi	r25, 0x07	; 7
    1f1a:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <kbmode_default>

00001f1e <fryer_init>:
	}
}
void fryer_init(void)
{
	fryer = fryer_reset;
    1f1e:	89 e3       	ldi	r24, 0x39	; 57
    1f20:	eb ed       	ldi	r30, 0xDB	; 219
    1f22:	f4 e0       	ldi	r31, 0x04	; 4
    1f24:	a2 e6       	ldi	r26, 0x62	; 98
    1f26:	b7 e0       	ldi	r27, 0x07	; 7

00001f28 <.L0^B2>:
    1f28:	01 90       	ld	r0, Z+
    1f2a:	0d 92       	st	X+, r0
    1f2c:	8a 95       	dec	r24
    1f2e:	e1 f7       	brne	.-8      	; 0x1f28 <.L0^B2>

00001f30 <.Loc.76>:
	//++--
	/* se usara la etiqueta KB_LYOUT_PROGRAM y no el [i]kb.program, xq es comun para ambos */
	fryer.basket[BASKET_LEFT].kb.startStop = KB_LYOUT_LEFT_STARTSTOP;
	//fryer.basket[BASKET_LEFT].kb.sleep = KB_LYOUT_LEFT_SLEEP;
	fryer.basket[BASKET_LEFT].kb.down = KB_LYOUT_LEFT_DOWN;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <fryer+0x6>

00001f36 <.Loc.79>:
	fryer.basket[BASKET_LEFT].kb.up = KB_LYOUT_LEFT_UP;
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <fryer+0x7>

00001f3c <.Loc.81>:
	fryer.basket[BASKET_LEFT].kb.program = KB_LYOUT_PROGRAM;//comun a ambos
    1f3c:	93 e0       	ldi	r25, 0x03	; 3
    1f3e:	90 93 6a 07 	sts	0x076A, r25	; 0x80076a <fryer+0x8>

00001f42 <.Loc.83>:

	fryer.basket[BASKET_LEFT].display.cursor.x = BASKETLEFT_DISP_CURSOR_START_X;//0x00;
	fryer.basket[BASKET_LEFT].display.cursor.y = 0x00;

	//
	fryer.basket[BASKET_RIGHT].kb.startStop = KB_LYOUT_RIGHT_STARTSTOP;
    1f42:	86 e0       	ldi	r24, 0x06	; 6
    1f44:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <fryer+0x1e>

00001f48 <.Loc.87>:
	//fryer.basket[BASKET_RIGHT].kb.sleep = KB_LYOUT_RIGHT_SLEEP;
	fryer.basket[BASKET_RIGHT].kb.down = KB_LYOUT_RIGHT_DOWN;
    1f48:	84 e0       	ldi	r24, 0x04	; 4
    1f4a:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <fryer+0x20>

00001f4e <.Loc.89>:
	fryer.basket[BASKET_RIGHT].kb.up = KB_LYOUT_RIGHT_UP;
    1f4e:	25 e0       	ldi	r18, 0x05	; 5
    1f50:	20 93 83 07 	sts	0x0783, r18	; 0x800783 <fryer+0x21>

00001f54 <.Loc.91>:
	fryer.basket[BASKET_RIGHT].kb.program = KB_LYOUT_PROGRAM;//comun a ambos
    1f54:	90 93 84 07 	sts	0x0784, r25	; 0x800784 <fryer+0x22>

00001f58 <.Loc.93>:

	fryer.basket[BASKET_RIGHT].display.cursor.x = BASKETRIGHT_DISP_CURSOR_START_X;//0x0B;
    1f58:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <fryer+0x1a>

00001f5c <.Loc.95>:
	fryer.basket[BASKET_RIGHT].display.cursor.y = 0x00;
	//--++
}
    1f5c:	08 95       	ret

00001f5e <ADC_config2temperature>:
void ADC_config2temperature(void)
{
	//
	ADC_setAutoTrigger_disabled();
    1f5e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <ADC_setAutoTrigger_disabled>

00001f62 <.LVL12>:
	ADC_disable();
    1f62:	0e 94 18 0b 	call	0x1630	; 0x1630 <ADC_disable>

00001f66 <.LVL13>:
	//
	ADC_set_channel(ADC_CH_2);
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	0e 94 02 0b 	call	0x1604	; 0x1604 <ADC_set_channel>

00001f6c <.LVL14>:
	ADC_enable();
    1f6c:	0e 94 16 0b 	call	0x162c	; 0x162c <ADC_enable>

00001f70 <.LVL15>:
	ADC_set_prescaler(ADC_PRESCALER_128);
    1f70:	87 e0       	ldi	r24, 0x07	; 7
    1f72:	0e 94 11 0b 	call	0x1622	; 0x1622 <ADC_set_prescaler>

00001f76 <.LVL16>:
	ADC_set_reference(ADC_REF_AVCC);
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	0e 94 08 0b 	call	0x1610	; 0x1610 <ADC_set_reference>

00001f7c <.LVL17>:
	ADC_setAutoTrigger_enabled();
    1f7c:	0e 94 28 0b 	call	0x1650	; 0x1650 <ADC_setAutoTrigger_enabled>

00001f80 <.LVL18>:
	ADC_setAutoTrigger_source(ADC_AUTOTRIGGER_SOURCE_FREE_RUNNING);
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	0e 94 2c 0b 	call	0x1658	; 0x1658 <ADC_setAutoTrigger_source>

00001f86 <.LVL19>:
	ADC_setBit_startConversion_On();
    1f86:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <ADC_setBit_startConversion_On>

00001f8a <ADC_config2termopile>:

}
void ADC_config2termopile(void)
{
	//
	ADC_setAutoTrigger_disabled();
    1f8a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <ADC_setAutoTrigger_disabled>

00001f8e <.LVL21>:
	ADC_disable();
    1f8e:	0e 94 18 0b 	call	0x1630	; 0x1630 <ADC_disable>

00001f92 <.LVL22>:
	//
	ADC_set_channel(ADC_CH_0);
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	0e 94 02 0b 	call	0x1604	; 0x1604 <ADC_set_channel>

00001f98 <.LVL23>:
	ADC_enable();
    1f98:	0e 94 16 0b 	call	0x162c	; 0x162c <ADC_enable>

00001f9c <.LVL24>:
	ADC_set_prescaler(ADC_PRESCALER_128);
    1f9c:	87 e0       	ldi	r24, 0x07	; 7
    1f9e:	0e 94 11 0b 	call	0x1622	; 0x1622 <ADC_set_prescaler>

00001fa2 <.LVL25>:
	ADC_set_reference(ADC_REF_INTERNAL_2_56V);
    1fa2:	83 e0       	ldi	r24, 0x03	; 3
    1fa4:	0e 94 08 0b 	call	0x1610	; 0x1610 <ADC_set_reference>

00001fa8 <.LVL26>:
	ADC_setAutoTrigger_enabled();
    1fa8:	0e 94 28 0b 	call	0x1650	; 0x1650 <ADC_setAutoTrigger_enabled>

00001fac <.LVL27>:
	ADC_setAutoTrigger_source(ADC_AUTOTRIGGER_SOURCE_FREE_RUNNING);
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	0e 94 2c 0b 	call	0x1658	; 0x1658 <ADC_setAutoTrigger_source>

00001fb2 <.LVL28>:
	ADC_setBit_startConversion_On();
    1fb2:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <ADC_setBit_startConversion_On>

00001fb6 <main>:
}

int main(void)
{
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	62 97       	sbiw	r28, 0x12	; 18
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61

00001fc6 <.LVL30>:
	uint16_t ADCcoordinadorTiempos_timer=0;
	int8_t ADCcoordinadorTiempos_sm0=0;



	disp7s_init();//new
    1fc6:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <disp7s_init>

00001fca <.LVL31>:

	eeprom_read_block((struct _Tcoccion *)&tmprture_coccion , (struct _Tcoccion *)&TMPRTURE_COCCION, sizeof(struct _Tcoccion) );
    1fca:	46 e0       	ldi	r20, 0x06	; 6
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	64 e0       	ldi	r22, 0x04	; 4
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	8c ed       	ldi	r24, 0xDC	; 220
    1fd4:	97 e0       	ldi	r25, 0x07	; 7
    1fd6:	0e 94 39 1b 	call	0x3672	; 0x3672 <eeprom_read_block>

00001fda <.LVL32>:

	fryer_init();
    1fda:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <fryer_init>

00001fde <.LVL33>:

	//Tiempo Necesario para estabilizar la tarjeta
	//__delay_ms(2000);//estabilizar tarjeta de deteccion

	//Active pull-up
	PinTo1(PORTWxKB_KEY0, PINxKB_KEY0);
    1fde:	91 9a       	sbi	0x12, 1	; 18

00001fe0 <.Loc.131>:
	PinTo1(PORTWxKB_KEY1, PINxKB_KEY1);
    1fe0:	90 9a       	sbi	0x12, 0	; 18

00001fe2 <.Loc.134>:
	PinTo1(PORTWxKB_KEY2, PINxKB_KEY2);
    1fe2:	c3 9a       	sbi	0x18, 3	; 24

00001fe4 <.Loc.137>:
	PinTo1(PORTWxKB_KEY3, PINxKB_KEY3);
    1fe4:	96 9a       	sbi	0x12, 6	; 18

00001fe6 <.Loc.140>:
	PinTo1(PORTWxKB_KEY4, PINxKB_KEY4);
    1fe6:	d9 9a       	sbi	0x1b, 1	; 27

00001fe8 <.Loc.143>:
	PinTo1(PORTWxKB_KEY5, PINxKB_KEY5);
    1fe8:	c0 9a       	sbi	0x18, 0	; 24

00001fea <.Loc.146>:
	PinTo1(PORTWxKB_KEY6, PINxKB_KEY6);
    1fea:	db 9a       	sbi	0x1b, 3	; 27

00001fec <.LBB13>:
	__builtin_avr_delay_cycles(__ticks_dc);
    1fec:	8f e9       	ldi	r24, 0x9F	; 159
    1fee:	9f e0       	ldi	r25, 0x0F	; 15

00001ff0 <.L1^B1>:
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <.L1^B1>
    1ff4:	00 c0       	rjmp	.+0      	; 0x1ff6 <L0^A>

00001ff6 <L0^A>:
	...

00001ff8 <.LBE13>:
	__delay_ms(1);
	ikb_init();
    1ff8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <ikb_init>

00001ffc <.LVL36>:

	pinGetLevel_init(); //with Changed=flag activated at initialization
    1ffc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <pinGetLevel_init>

00002000 <.LVL37>:


	PinTo0(PORTWxSOL_GAS_QUEMADOR, PINxSOL_GAS_QUEMADOR);
    2000:	c2 98       	cbi	0x18, 2	; 24

00002002 <.Loc.163>:
	ConfigOutputPin(CONFIGIOxSOL_GAS_QUEMADOR, PINxSOL_GAS_QUEMADOR);
    2002:	ba 9a       	sbi	0x17, 2	; 23

00002004 <.Loc.166>:

//	ADC_init(ADC_AUTOTRIGGER_SOURCE_FREE_RUNNING, ADC_REF_AVCC, ADC_PRESCALER_128);
//	ADC_set_channel(ADC_CH_2);
//	BitTo1(ADCSRA, ADSC);

	PinTo1(PORTWxHIGHLIMIT,PINxHIGHLIMIT);
    2004:	c1 9a       	sbi	0x18, 1	; 24

00002006 <.Loc.169>:
	ConfigInputPin(CONFIGIOxHIGHLIMIT, PINxHIGHLIMIT);
    2006:	b9 98       	cbi	0x17, 1	; 23

00002008 <.Loc.172>:

	//
	ConfigOutputPin(CONFIGIOxBUZZER, PINxBUZZER);
    2008:	bd 9a       	sbi	0x17, 5	; 23

0000200a <.Loc.175>:
	indicator_setPortPin(&PORTWxBUZZER, PINxBUZZER);
    200a:	65 e0       	ldi	r22, 0x05	; 5
    200c:	88 e3       	ldi	r24, 0x38	; 56
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	0e 94 ed 05 	call	0xbda	; 0xbda <indicator_setPortPin>

00002014 <.LVL38>:
	indicatorTimed_setKSysTickTime_ms(75/SYSTICK_MS);
    2014:	8b e4       	ldi	r24, 0x4B	; 75
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

0000201c <.LVL39>:

	//With prescaler 64, gets 1 ms exact (OCR0=249)
	TCNT0 = 0x00;
    201c:	12 be       	out	0x32, r1	; 50

0000201e <.Loc.180>:
	TCCR0 = (1 << WGM01) | (0 << CS02) | (1 << CS01) | (1 << CS00); //CTC, PRES=64
    201e:	8b e0       	ldi	r24, 0x0B	; 11
    2020:	83 bf       	out	0x33, r24	; 51

00002022 <.Loc.182>:
	OCR0 = CTC_SET_OCR_BYTIME(1e-3, 64); //TMR8-BIT @16MHz @PRES=1024-> BYTIME maximum = 16ms
    2022:	89 ef       	ldi	r24, 0xF9	; 249
    2024:	8c bf       	out	0x3c, r24	; 60

00002026 <.Loc.184>:
	TIMSK |= (1 << OCIE0);
    2026:	89 b7       	in	r24, 0x39	; 57

00002028 <.Loc.185>:
    2028:	82 60       	ori	r24, 0x02	; 2
    202a:	89 bf       	out	0x39, r24	; 57

0000202c <.Loc.186>:
	sei();
    202c:	78 94       	sei

0000202e <.Loc.187>:

	mypid0_set();	//1 vez
    202e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <mypid0_set>

00002032 <.LVL40>:
	disp7s_clear_all();
    2032:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <disp7s_clear_all>

00002036 <.LVL41>:

	strncpy(str,DIPS7S_MSG_ACIE,BASKET_DISP_MAX_CHARS_PERBASKET);
    2036:	44 e0       	ldi	r20, 0x04	; 4
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	65 ea       	ldi	r22, 0xA5	; 165
    203c:	74 e0       	ldi	r23, 0x04	; 4
    203e:	ce 01       	movw	r24, r28
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	0e 94 21 1b 	call	0x3642	; 0x3642 <strncpy>

00002046 <.LVL42>:
	disp7s_update_data_array(str, BASKETLEFT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    2046:	44 e0       	ldi	r20, 0x04	; 4
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	ce 01       	movw	r24, r28
    204c:	01 96       	adiw	r24, 0x01	; 1
    204e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00002052 <.LVL43>:

	strncpy(str,DIPS7S_MSG_rInd,BASKET_DISP_MAX_CHARS_PERBASKET);
    2052:	44 e0       	ldi	r20, 0x04	; 4
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	61 ea       	ldi	r22, 0xA1	; 161
    2058:	74 e0       	ldi	r23, 0x04	; 4
    205a:	ce 01       	movw	r24, r28
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	0e 94 21 1b 	call	0x3642	; 0x3642 <strncpy>

00002062 <.LVL44>:
	disp7s_update_data_array(str, BASKETRIGHT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    2062:	44 e0       	ldi	r20, 0x04	; 4
    2064:	64 e0       	ldi	r22, 0x04	; 4
    2066:	ce 01       	movw	r24, r28
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

0000206e <.LVL45>:
	int8_t ADCcoordinadorTiempos_sm0=0;
    206e:	10 e0       	ldi	r17, 0x00	; 0

00002070 <.Loc.194>:
	uint16_t ADCcoordinadorTiempos_timer=0;
    2070:	81 2c       	mov	r8, r1
    2072:	91 2c       	mov	r9, r1

00002074 <.Loc.195>:
	int16_t counter_displayACIER=0;
    2074:	54 01       	movw	r10, r8

00002076 <.Loc.196>:
	int counter1 = 0;
    2076:	64 01       	movw	r12, r8

00002078 <.Loc.197>:
	int counter0 = 0;
    2078:	74 01       	movw	r14, r8

0000207a <.L44>:
//		usart_println_string("abc");
//	}

	while (1)
	{
		if (isr_flag.sysTickMs)
    207a:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <isr_flag>

0000207e <.Loc.201>:
    207e:	80 ff       	sbrs	r24, 0
    2080:	0a c0       	rjmp	.+20     	; 0x2096 <.L11>

00002082 <.Loc.202>:
		{
			isr_flag.sysTickMs = 0;
    2082:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <isr_flag>
    2086:	8e 7f       	andi	r24, 0xFE	; 254
    2088:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <isr_flag>

0000208c <.Loc.204>:
			mainflag.sysTickMs = 1;
    208c:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>
    2090:	81 60       	ori	r24, 0x01	; 1
    2092:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <mainflag>

00002096 <.L11>:
		}

		if (mainflag.sysTickMs)
    2096:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

0000209a <.Loc.208>:
    209a:	80 fd       	sbrc	r24, 0

0000209c <.Loc.209>:
		{
			if (++systick_counter0 >= (1/SYSTICK_MS) )//ms
			{
				systick_counter0 = 0x00;
				disp7s_job();
    209c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <disp7s_job>

000020a0 <.LVL47>:
			}
		}

		if (main_schedule.bf.display_ACIERInd == 0)
		{
			if (mainflag.sysTickMs)
    20a0:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

000020a4 <.Loc.214>:
		if (main_schedule.bf.display_ACIERInd == 0)
    20a4:	90 91 9c 07 	lds	r25, 0x079C	; 0x80079c <main_schedule+0x1>

000020a8 <.Loc.215>:
    20a8:	96 fd       	sbrc	r25, 6
    20aa:	19 c0       	rjmp	.+50     	; 0x20de <.L13>

000020ac <.Loc.216>:
			if (mainflag.sysTickMs)
    20ac:	80 ff       	sbrs	r24, 0
    20ae:	08 c0       	rjmp	.+16     	; 0x20c0 <.L14>

000020b0 <.Loc.218>:
			{
				if (++counter_displayACIER >= (3000/SYSTICK_MS))    //20ms
    20b0:	27 eb       	ldi	r18, 0xB7	; 183
    20b2:	a2 16       	cp	r10, r18
    20b4:	2b e0       	ldi	r18, 0x0B	; 11
    20b6:	b2 06       	cpc	r11, r18
    20b8:	5c f4       	brge	.+22     	; 0x20d0 <.L15>
    20ba:	8f ef       	ldi	r24, 0xFF	; 255
    20bc:	a8 1a       	sub	r10, r24
    20be:	b8 0a       	sbc	r11, r24

000020c0 <.L14>:
					}
				}
			}
		}

		indicatorTimed_job();
    20c0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <indicatorTimed_job>

000020c4 <.LVL50>:
		mainflag.sysTickMs = 0;
    20c4:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>
    20c8:	8e 7f       	andi	r24, 0xFE	; 254
    20ca:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <mainflag>

000020ce <.Loc.223>:
		if (isr_flag.sysTickMs)
    20ce:	d5 cf       	rjmp	.-86     	; 0x207a <.L44>

000020d0 <.L15>:
					main_schedule.bf.display_ACIERInd = 1;
    20d0:	89 2f       	mov	r24, r25
    20d2:	80 64       	ori	r24, 0x40	; 64
    20d4:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <main_schedule+0x1>

000020d8 <.Loc.228>:
					counter_displayACIER = 0;
    20d8:	a1 2c       	mov	r10, r1
    20da:	b1 2c       	mov	r11, r1
    20dc:	f1 cf       	rjmp	.-30     	; 0x20c0 <.L14>

000020de <.L13>:
			if (ADCcoordinadorTiempos_sm0 == 0)
    20de:	11 11       	cpse	r17, r1
    20e0:	ae c0       	rjmp	.+348    	; 0x223e <.L16>

000020e2 <.Loc.231>:
				if (mainflag.sysTickMs)
    20e2:	80 fd       	sbrc	r24, 0
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <.L17>

000020e6 <.L74>:
					if (termopile_job())
    20e6:	10 e0       	ldi	r17, 0x00	; 0
    20e8:	16 c0       	rjmp	.+44     	; 0x2116 <.L18>

000020ea <.L17>:
					if (++ADCcoordinadorTiempos_timer >= (150/SYSTICK_MS))    //20ms
    20ea:	9f ef       	ldi	r25, 0xFF	; 255
    20ec:	89 1a       	sub	r8, r25
    20ee:	99 0a       	sbc	r9, r25

000020f0 <.Loc.236>:
    20f0:	26 e9       	ldi	r18, 0x96	; 150
    20f2:	82 16       	cp	r8, r18
    20f4:	91 04       	cpc	r9, r1
    20f6:	78 f0       	brcs	.+30     	; 0x2116 <.L18>

000020f8 <.Loc.237>:
						mainflag.ADCcoordinadorToggle = !mainflag.ADCcoordinadorToggle;
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	21 e0       	ldi	r18, 0x01	; 1
    20fc:	81 fd       	sbrc	r24, 1
    20fe:	92 27       	eor	r25, r18

00002100 <.Loc.240>:
    2100:	90 fb       	bst	r25, 0
    2102:	81 f9       	bld	r24, 1
    2104:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <mainflag>

00002108 <.Loc.241>:
						if (mainflag.ADCcoordinadorToggle == 1)
    2108:	81 ff       	sbrs	r24, 1
    210a:	96 c0       	rjmp	.+300    	; 0x2238 <.L19>

0000210c <.Loc.243>:
							ADC_config2temperature();
    210c:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <ADC_config2temperature>

00002110 <.L20>:
						ADCcoordinadorTiempos_sm0++;
    2110:	11 e0       	ldi	r17, 0x01	; 1

00002112 <.Loc.245>:
						ADCcoordinadorTiempos_timer = 0;
    2112:	81 2c       	mov	r8, r1
    2114:	91 2c       	mov	r9, r1

00002116 <.L18>:
			if (PinRead(PORTRxHIGHLIMIT, PINxHIGHLIMIT) == 1 )
    2116:	88 27       	eor	r24, r24
    2118:	b1 99       	sbic	0x16, 1	; 22
    211a:	83 95       	inc	r24

0000211c <.Loc.248>:
				e.sensor[ERROR_IDX_HIGHLIMIT].code = 1;//ERROR
    211c:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <e+0x9>

00002120 <.Loc.249>:
			if (mainflag.sysTickMs)
    2120:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

00002124 <.Loc.251>:
    2124:	80 ff       	sbrs	r24, 0
    2126:	33 c0       	rjmp	.+102    	; 0x218e <.L24>

00002128 <.Loc.252>:
				if (++counter0 == (20/SYSTICK_MS))    //20ms
    2128:	8f ef       	ldi	r24, 0xFF	; 255
    212a:	e8 1a       	sub	r14, r24
    212c:	f8 0a       	sbc	r15, r24

0000212e <.Loc.254>:
    212e:	94 e1       	ldi	r25, 0x14	; 20
    2130:	e9 16       	cp	r14, r25
    2132:	f1 04       	cpc	r15, r1
    2134:	61 f5       	brne	.+88     	; 0x218e <.L24>

00002136 <.Loc.255>:
					pinGetLevel_job();
    2136:	0e 94 6e 04 	call	0x8dc	; 0x8dc <pinGetLevel_job>

0000213a <.LVL62>:
					if (pinGetLevel_hasChanged(PGLEVEL_LYOUT_SWONOFF))
    213a:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <pinGetLevel+0x1>

0000213e <.Loc.259>:
    213e:	83 ff       	sbrs	r24, 3
    2140:	24 c0       	rjmp	.+72     	; 0x218a <.L25>

00002142 <.Loc.260>:
						pinGetLevel_clearChange(PGLEVEL_LYOUT_SWONOFF);
    2142:	87 7f       	andi	r24, 0xF7	; 247
    2144:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <pinGetLevel+0x1>

00002148 <.Loc.262>:
						main_schedule.bf.startup_finish_read_switch_onoff = STARTUP_FINISHED;
    2148:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <main_schedule+0x1>
    214c:	84 60       	ori	r24, 0x04	; 4
    214e:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <main_schedule+0x1>

00002152 <.Loc.265>:
						indicatorTimed_setKSysTickTime_ms(75/SYSTICK_MS);
    2152:	8b e4       	ldi	r24, 0x4B	; 75
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

0000215a <.LVL63>:
						indicatorTimed_run();
    215a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

0000215e <.LVL64>:
						disp7s_clear_all();
    215e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <disp7s_clear_all>

00002162 <.LVL65>:
						if (pinGetLevel_level(PGLEVEL_LYOUT_SWONOFF)== 0)	//active in low
    2162:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <pinGetLevel+0x1>

00002166 <.Loc.270>:
    2166:	81 fd       	sbrc	r24, 1
    2168:	90 c0       	rjmp	.+288    	; 0x228a <.L26>

0000216a <.LBB15>:
							int16_t error = mypid0_adjust_kei_windup(); // dejar preparado para job()
    216a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <mypid0_adjust_kei_windup>

0000216e <.LVL66>:
							pid_find_ktop_ms(&mypid0, error);
    216e:	bc 01       	movw	r22, r24
    2170:	8a e2       	ldi	r24, 0x2A	; 42
    2172:	97 e0       	ldi	r25, 0x07	; 7

00002174 <.Loc.274>:
    2174:	0e 94 6b 05 	call	0xad6	; 0xad6 <pid_find_ktop_ms>

00002178 <.LVL68>:
							pid_pwm_stablish_levelpin(&mypid0);//set PWM por primera vez//tener de inmediato el valor de ktop_ms
    2178:	8a e2       	ldi	r24, 0x2A	; 42
    217a:	97 e0       	ldi	r25, 0x07	; 7
    217c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <pid_pwm_stablish_levelpin>

00002180 <.LVL69>:
							main_schedule.bf.switch_status_onoff = 1;
    2180:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <main_schedule+0x1>
    2184:	81 60       	ori	r24, 0x01	; 1
    2186:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <main_schedule+0x1>

0000218a <.L25>:
					counter0 = 0;
    218a:	e1 2c       	mov	r14, r1
    218c:	f1 2c       	mov	r15, r1

0000218e <.L24>:
				if (main_schedule.bf.switch_status_onoff == 1)
    218e:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <main_schedule+0x1>
    2192:	85 70       	andi	r24, 0x05	; 5
    2194:	85 30       	cpi	r24, 0x05	; 5
    2196:	09 f0       	breq	.+2      	; 0x219a <.Loc.283>

00002198 <L0^A>:
    2198:	93 cf       	rjmp	.-218    	; 0x20c0 <.L14>

0000219a <.Loc.283>:
					if (error_job() == 0)
    219a:	0e 94 ef 09 	call	0x13de	; 0x13de <error_job>

0000219e <.LVL72>:
    219e:	81 11       	cpse	r24, r1
    21a0:	8f cf       	rjmp	.-226    	; 0x20c0 <.L14>

000021a2 <.LBB16>:
						if (main_schedule.sm0 == 0)
    21a2:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <main_schedule>

000021a6 <.Loc.288>:
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	08 f0       	brcs	.+2      	; 0x21ac <.Loc.289>

000021aa <L0^A>:
    21aa:	9e c0       	rjmp	.+316    	; 0x22e8 <.L29>

000021ac <.Loc.289>:
							kbmode_2basket_set_default();
    21ac:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <kbmode_2basket_set_default>

000021b0 <.LVL73>:
							disp7s_update_data_array(DIPS7S_MSG_PRECALENTAMIENTO, BASKETLEFT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    21b0:	44 e0       	ldi	r20, 0x04	; 4
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	89 eb       	ldi	r24, 0xB9	; 185
    21b6:	94 e0       	ldi	r25, 0x04	; 4
    21b8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

000021bc <.LVL74>:
							fryer.bf.preheating = 1;
    21bc:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <fryer+0x34>
    21c0:	81 60       	ori	r24, 0x01	; 1
    21c2:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <fryer+0x34>

000021c6 <.Loc.293>:
							fryer.viewmode = FRYER_VIEWMODE_PREHEATING;
    21c6:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <fryer+0x35>

000021ca <.Loc.295>:
							main_schedule.sm0++;
    21ca:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <main_schedule>
    21ce:	8f 5f       	subi	r24, 0xFF	; 255
    21d0:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <main_schedule>

000021d4 <.L30>:
							if (ikb_key_is_ready2read(KB_LYOUT_PROGRAM))
    21d4:	83 e0       	ldi	r24, 0x03	; 3
    21d6:	0e 94 47 07 	call	0xe8e	; 0xe8e <ikb_key_is_ready2read>

000021da <.LVL75>:
    21da:	81 15       	cp	r24, r1
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <.Loc.302>

000021de <L0^A>:
    21de:	8e c0       	rjmp	.+284    	; 0x22fc <.L33>

000021e0 <.Loc.302>:
								ikb_key_was_read(KB_LYOUT_PROGRAM);
    21e0:	83 e0       	ldi	r24, 0x03	; 3
    21e2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ikb_key_was_read>

000021e6 <.LVL76>:
								if ( ikb_get_AtTimeExpired_BeforeOrAfter(KB_LYOUT_PROGRAM) == KB_AFTER_THR)
    21e6:	83 e0       	ldi	r24, 0x03	; 3
    21e8:	0e 94 3c 07 	call	0xe78	; 0xe78 <ikb_get_AtTimeExpired_BeforeOrAfter>

000021ec <.LVL77>:
    21ec:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <ps_reset>

000021f0 <.Loc.305>:
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <.Loc.306>

000021f4 <L0^A>:
    21f4:	0c c1       	rjmp	.+536    	; 0x240e <.L34>

000021f6 <.Loc.306>:
									fryer.viewmode = FRYER_VIEWMODE_PROGRAM;
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <fryer+0x35>

000021fc <.Loc.308>:
									fryer.ps_program = ps_reset;
    21fc:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <fryer+0x36>

00002200 <.Loc.310>:
									indicatorTimed_setKSysTickTime_ms(1000/SYSTICK_MS);
    2200:	88 ee       	ldi	r24, 0xE8	; 232
    2202:	93 e0       	ldi	r25, 0x03	; 3
    2204:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

00002208 <.LVL78>:
									indicatorTimed_run();
    2208:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

0000220c <.LBB17>:
										eeprom_update_block( (struct _t *)(&basket_temp[i].cookCycle.time), (struct _t *)(&COOKTIME[i]), sizeof(struct _t));
    220c:	42 e0       	ldi	r20, 0x02	; 2
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	89 ea       	ldi	r24, 0xA9	; 169
    2216:	97 e0       	ldi	r25, 0x07	; 7
    2218:	0e 94 49 1b 	call	0x3692	; 0x3692 <eeprom_update_block>

0000221c <.LVL80>:
    221c:	42 e0       	ldi	r20, 0x02	; 2
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	62 e0       	ldi	r22, 0x02	; 2
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	83 ec       	ldi	r24, 0xC3	; 195
    2226:	97 e0       	ldi	r25, 0x07	; 7
    2228:	0e 94 49 1b 	call	0x3692	; 0x3692 <eeprom_update_block>

0000222c <.L76>:
									disp7s_save_data_array(data_array_buffer, DISP7S_TOTAL_NUMMAX);
    222c:	68 e0       	ldi	r22, 0x08	; 8
    222e:	ce 01       	movw	r24, r28
    2230:	0b 96       	adiw	r24, 0x0b	; 11
    2232:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <disp7s_save_data_array>

00002236 <.LVL82>:
    2236:	62 c0       	rjmp	.+196    	; 0x22fc <.L33>

00002238 <.L19>:
							ADC_config2termopile();
    2238:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <ADC_config2termopile>

0000223c <.LVL84>:
    223c:	69 cf       	rjmp	.-302    	; 0x2110 <.L20>

0000223e <.L16>:
				if (mainflag.ADCcoordinadorToggle == 1)
    223e:	81 ff       	sbrs	r24, 1
    2240:	1d c0       	rjmp	.+58     	; 0x227c <.L21>

00002242 <.Loc.328>:
					if (temperature_job())
    2242:	0e 94 87 0c 	call	0x190e	; 0x190e <temperature_job>

00002246 <.LVL86>:
    2246:	81 15       	cp	r24, r1
    2248:	09 f4       	brne	.+2      	; 0x224c <.Loc.331>

0000224a <L0^A>:
    224a:	65 cf       	rjmp	.-310    	; 0x2116 <.L18>

0000224c <.Loc.331>:
						main_schedule.bf.startup_finish_stable_temperature = STARTUP_FINISHED;
    224c:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <main_schedule+0x1>
    2250:	82 60       	ori	r24, 0x02	; 2
    2252:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <main_schedule+0x1>

00002256 <.Loc.333>:
						e.sensor[ERROR_IDX_THERMOCOUPLE].code = 0;
    2256:	10 92 85 06 	sts	0x0685, r1	; 0x800685 <e+0x5>

0000225a <.Loc.335>:
						if (TCtemperature != temperature_filtered_smoothed)
    225a:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <temperature_filtered_smoothed>
    225e:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <temperature_filtered_smoothed+0x1>

00002262 <.Loc.337>:
    2262:	20 91 18 07 	lds	r18, 0x0718	; 0x800718 <TCtemperature>
    2266:	30 91 19 07 	lds	r19, 0x0719	; 0x800719 <TCtemperature+0x1>
    226a:	28 17       	cp	r18, r24
    226c:	39 07       	cpc	r19, r25
    226e:	09 f4       	brne	.+2      	; 0x2272 <.Loc.338>

00002270 <L0^A>:
    2270:	3a cf       	rjmp	.-396    	; 0x20e6 <.L74>

00002272 <.Loc.338>:
							TCtemperature = temperature_filtered_smoothed;//Actualiza TC
    2272:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <TCtemperature>
    2276:	90 93 19 07 	sts	0x0719, r25	; 0x800719 <TCtemperature+0x1>
    227a:	35 cf       	rjmp	.-406    	; 0x20e6 <.L74>

0000227c <.L21>:
					if (termopile_job())
    227c:	0e 94 8d 01 	call	0x31a	; 0x31a <termopile_job>

00002280 <.LVL87>:
    2280:	11 e0       	ldi	r17, 0x01	; 1

00002282 <.Loc.343>:
    2282:	81 15       	cp	r24, r1
    2284:	09 f4       	brne	.+2      	; 0x2288 <L0^A+0x2>

00002286 <L0^A>:
    2286:	47 cf       	rjmp	.-370    	; 0x2116 <.L18>
    2288:	2e cf       	rjmp	.-420    	; 0x20e6 <.L74>

0000228a <.L26>:
							main_schedule.bf.switch_status_onoff = 0;
    228a:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <main_schedule+0x1>
    228e:	8e 7f       	andi	r24, 0xFE	; 254
    2290:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <main_schedule+0x1>

00002294 <.Loc.346>:
							disp7s_update_data_array(DIPS7S_MSG_OFF, BASKETRIGHT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    2294:	44 e0       	ldi	r20, 0x04	; 4
    2296:	64 e0       	ldi	r22, 0x04	; 4
    2298:	89 ec       	ldi	r24, 0xC9	; 201
    229a:	94 e0       	ldi	r25, 0x04	; 4
    229c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

000022a0 <.LVL90>:
							pid_pwm_set_pin(&mypid0, 0);
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	8a e2       	ldi	r24, 0x2A	; 42
    22a4:	97 e0       	ldi	r25, 0x07	; 7
    22a6:	0e 94 be 04 	call	0x97c	; 0x97c <pid_pwm_set_pin>

000022aa <.LVL91>:
							fryer_init();
    22aa:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <fryer_init>

000022ae <.LVL92>:
							main_schedule = main_schedule_reset;
    22ae:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <main_schedule_reset>
    22b2:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <main_schedule_reset+0x1>
    22b6:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <main_schedule>
    22ba:	90 93 9c 07 	sts	0x079C, r25	; 0x80079c <main_schedule+0x1>

000022be <.Loc.351>:
							e = e_reset;
    22be:	8a e0       	ldi	r24, 0x0A	; 10
    22c0:	e6 e7       	ldi	r30, 0x76	; 118
    22c2:	f6 e0       	ldi	r31, 0x06	; 6
    22c4:	a0 e8       	ldi	r26, 0x80	; 128
    22c6:	b6 e0       	ldi	r27, 0x06	; 6

000022c8 <.L0^B3>:
    22c8:	01 90       	ld	r0, Z+
    22ca:	0d 92       	st	X+, r0
    22cc:	8a 95       	dec	r24
    22ce:	e1 f7       	brne	.-8      	; 0x22c8 <.L0^B3>

000022d0 <.Loc.353>:
							indicatorTimed_stop();
    22d0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <indicatorTimed_stop>

000022d4 <.LVL93>:
							termopila = termopilaReset;
    22d4:	8a e0       	ldi	r24, 0x0A	; 10
    22d6:	e0 e8       	ldi	r30, 0x80	; 128
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	aa e1       	ldi	r26, 0x1A	; 26
    22dc:	b5 e0       	ldi	r27, 0x05	; 5

000022de <.L0^B4>:
    22de:	01 90       	ld	r0, Z+
    22e0:	0d 92       	st	X+, r0
    22e2:	8a 95       	dec	r24
    22e4:	e1 f7       	brne	.-8      	; 0x22de <.L0^B4>
    22e6:	51 cf       	rjmp	.-350    	; 0x218a <.L25>

000022e8 <.L29>:
						else if (main_schedule.sm0 == 1)
    22e8:	09 f0       	breq	.+2      	; 0x22ec <.Loc.358>

000022ea <L0^A>:
    22ea:	61 c0       	rjmp	.+194    	; 0x23ae <.L31>

000022ec <.Loc.358>:
								main_schedule.sm0++;    	//OK...Ignicion+deteccion de flama OK
    22ec:	82 e0       	ldi	r24, 0x02	; 2

000022ee <.L75>:
									main_schedule.sm0++;
    22ee:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <main_schedule>

000022f2 <.L32>:
						if ((fryer.viewmode == FRYER_VIEWMODE_PREHEATING) || (fryer.viewmode == FRYER_VIEWMODE_COOK))
    22f2:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <fryer+0x35>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	08 f4       	brcc	.+2      	; 0x22fc <.L33>

000022fa <L0^A>:
    22fa:	6c cf       	rjmp	.-296    	; 0x21d4 <.L30>

000022fc <.L33>:
						if (fryer.viewmode == FRYER_VIEWMODE_PROGRAM)
    22fc:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <fryer+0x35>
    2300:	82 30       	cpi	r24, 0x02	; 2
    2302:	d1 f4       	brne	.+52     	; 0x2338 <.L36>

00002304 <.Loc.367>:
							if (psmode_program() == 1)
    2304:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <psmode_program>

00002308 <.LVL95>:
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	b1 f4       	brne	.+44     	; 0x2338 <.L36>

0000230c <.Loc.370>:
								if (fryer.bf.preheating == 1)//sigue en precalentamiento ?
    230c:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <fryer+0x34>

00002310 <.Loc.372>:
    2310:	90 ff       	sbrs	r25, 0
    2312:	89 c0       	rjmp	.+274    	; 0x2426 <.L38>

00002314 <.Loc.373>:
									fryer.viewmode = FRYER_VIEWMODE_PREHEATING;
    2314:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <fryer+0x35>

00002318 <.LBB18>:
										kbmode_default(&fryer.basket[i].kb);
    2318:	86 e6       	ldi	r24, 0x66	; 102
    231a:	97 e0       	ldi	r25, 0x07	; 7
    231c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

00002320 <.LVL97>:
    2320:	80 e8       	ldi	r24, 0x80	; 128
    2322:	97 e0       	ldi	r25, 0x07	; 7
    2324:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

00002328 <.LBE18>:
									disp7s_clear_all();
    2328:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <disp7s_clear_all>

0000232c <.LVL99>:
									disp7s_update_data_array(DIPS7S_MSG_PRECALENTAMIENTO, BASKETLEFT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    232c:	44 e0       	ldi	r20, 0x04	; 4
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	89 eb       	ldi	r24, 0xB9	; 185
    2332:	94 e0       	ldi	r25, 0x04	; 4

00002334 <.L77>:
									disp7s_update_data_array(data_array_buffer, 0, DISP7S_TOTAL_NUMMAX);
    2334:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00002338 <.L36>:
						if (fryer.viewmode == FRYER_VIEWMODE_VIEWCOOKTEMP)
    2338:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <fryer+0x35>
    233c:	83 30       	cpi	r24, 0x03	; 3
    233e:	d1 f4       	brne	.+52     	; 0x2374 <.L40>

00002340 <.Loc.389>:
							if (psmode_viewTemp() == 1)
    2340:	0e 94 f7 17 	call	0x2fee	; 0x2fee <psmode_viewTemp>

00002344 <.LVL102>:
    2344:	81 30       	cpi	r24, 0x01	; 1
    2346:	b1 f4       	brne	.+44     	; 0x2374 <.L40>

00002348 <.Loc.392>:
								if (fryer.bf.preheating == 1)	//sigue en precalentamiento
    2348:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <fryer+0x34>

0000234c <.Loc.394>:
    234c:	90 ff       	sbrs	r25, 0
    234e:	7e c0       	rjmp	.+252    	; 0x244c <.L42>

00002350 <.Loc.395>:
									fryer.viewmode = FRYER_VIEWMODE_PREHEATING;
    2350:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <fryer+0x35>

00002354 <.LBB19>:
										kbmode_default(&fryer.basket[i].kb);
    2354:	86 e6       	ldi	r24, 0x66	; 102
    2356:	97 e0       	ldi	r25, 0x07	; 7
    2358:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

0000235c <.LVL104>:
    235c:	80 e8       	ldi	r24, 0x80	; 128
    235e:	97 e0       	ldi	r25, 0x07	; 7
    2360:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

00002364 <.LBE19>:
									disp7s_clear_all();
    2364:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <disp7s_clear_all>

00002368 <.LVL106>:
									disp7s_update_data_array(DIPS7S_MSG_PRECALENTAMIENTO, BASKETLEFT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    2368:	44 e0       	ldi	r20, 0x04	; 4
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	89 eb       	ldi	r24, 0xB9	; 185
    236e:	94 e0       	ldi	r25, 0x04	; 4

00002370 <.L78>:
									disp7s_update_data_array(data_array_buffer, 0, DISP7S_TOTAL_NUMMAX);
    2370:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00002374 <.L40>:
						if (fryer.bf.operative_mode == 1)
    2374:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <fryer+0x34>

00002378 <.Loc.411>:
    2378:	82 fd       	sbrc	r24, 2

0000237a <.Loc.412>:
							psmode_operative();
    237a:	0e 94 98 16 	call	0x2d30	; 0x2d30 <psmode_operative>

0000237e <.LVL109>:
						int16_t error = mypid0_adjust_kei_windup();
    237e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <mypid0_adjust_kei_windup>

00002382 <.LVL110>:
						pid_job(&mypid0, error);
    2382:	bc 01       	movw	r22, r24
    2384:	8a e2       	ldi	r24, 0x2A	; 42
    2386:	97 e0       	ldi	r25, 0x07	; 7

00002388 <.Loc.416>:
    2388:	0e 94 d0 05 	call	0xba0	; 0xba0 <pid_job>

0000238c <.LVL112>:
						if (mainflag.sysTickMs)
    238c:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

00002390 <.Loc.419>:
    2390:	80 ff       	sbrs	r24, 0
    2392:	96 ce       	rjmp	.-724    	; 0x20c0 <.L14>

00002394 <.Loc.420>:
							if (++counter1 == (20/SYSTICK_MS))
    2394:	2f ef       	ldi	r18, 0xFF	; 255
    2396:	c2 1a       	sub	r12, r18
    2398:	d2 0a       	sbc	r13, r18

0000239a <.Loc.422>:
    239a:	84 e1       	ldi	r24, 0x14	; 20
    239c:	c8 16       	cp	r12, r24
    239e:	d1 04       	cpc	r13, r1
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <.Loc.423>

000023a2 <L0^A>:
    23a2:	8e ce       	rjmp	.-740    	; 0x20c0 <.L14>

000023a4 <.Loc.423>:
								ikb_job();
    23a4:	0e 94 a5 09 	call	0x134a	; 0x134a <ikb_job>

000023a8 <.LVL115>:
								counter1 = 0;
    23a8:	c1 2c       	mov	r12, r1
    23aa:	d1 2c       	mov	r13, r1
    23ac:	89 ce       	rjmp	.-750    	; 0x20c0 <.L14>

000023ae <.L31>:
						else if (main_schedule.sm0 == 2)
    23ae:	82 30       	cpi	r24, 0x02	; 2
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <.Loc.428>

000023b2 <L0^A>:
    23b2:	9f cf       	rjmp	.-194    	; 0x22f2 <.L32>

000023b4 <.Loc.428>:
							if (fryer.viewmode == FRYER_VIEWMODE_PREHEATING)
    23b4:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <fryer+0x35>
    23b8:	81 11       	cpse	r24, r1
    23ba:	9b cf       	rjmp	.-202    	; 0x22f2 <.L32>

000023bc <.Loc.430>:
								if (TCtemperature >= 0)
    23bc:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <TCtemperature>
    23c0:	90 91 19 07 	lds	r25, 0x0719	; 0x800719 <TCtemperature+0x1>
    23c4:	97 fd       	sbrc	r25, 7
    23c6:	06 cf       	rjmp	.-500    	; 0x21d4 <.L30>

000023c8 <.Loc.432>:
									indicatorTimed_setKSysTickTime_ms(1000/SYSTICK_MS);
    23c8:	88 ee       	ldi	r24, 0xE8	; 232
    23ca:	93 e0       	ldi	r25, 0x03	; 3
    23cc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

000023d0 <.LVL117>:
									indicatorTimed_run();
    23d0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

000023d4 <.LVL118>:
									fryer.bf.preheating = 0;
    23d4:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <fryer+0x34>
    23d8:	8e 7f       	andi	r24, 0xFE	; 254
    23da:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <fryer+0x34>

000023de <.Loc.436>:
									fryer.viewmode = FRYER_VIEWMODE_COOK;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <fryer+0x35>

000023e4 <.LBB20>:
										kbmode_default(&fryer.basket[i].kb);
    23e4:	86 e6       	ldi	r24, 0x66	; 102
    23e6:	97 e0       	ldi	r25, 0x07	; 7
    23e8:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

000023ec <.LVL120>:
										fryer.basket[i].kbmode = KBMODE_DEFAULT;
    23ec:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <fryer+0x9>

000023f0 <.Loc.444>:
										kbmode_default(&fryer.basket[i].kb);
    23f0:	80 e8       	ldi	r24, 0x80	; 128
    23f2:	97 e0       	ldi	r25, 0x07	; 7
    23f4:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

000023f8 <.LVL122>:
										fryer.basket[i].kbmode = KBMODE_DEFAULT;
    23f8:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <fryer+0x23>

000023fc <.LBE20>:
									fryer.bf.operative_mode = 1;
    23fc:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <fryer+0x34>
    2400:	84 60       	ori	r24, 0x04	; 4
    2402:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <fryer+0x34>

00002406 <.Loc.453>:
									main_schedule.sm0++;
    2406:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <main_schedule>
    240a:	8f 5f       	subi	r24, 0xFF	; 255
    240c:	70 cf       	rjmp	.-288    	; 0x22ee <.L75>

0000240e <.L34>:
									fryer.viewmode = FRYER_VIEWMODE_VIEWCOOKTEMP;
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <fryer+0x35>

00002414 <.Loc.457>:
									fryer.ps_viewTemp = ps_reset;
    2414:	90 93 9a 07 	sts	0x079A, r25	; 0x80079a <fryer+0x38>

00002418 <.Loc.459>:
									indicatorTimed_setKSysTickTime_ms(1000/SYSTICK_MS);
    2418:	88 ee       	ldi	r24, 0xE8	; 232
    241a:	93 e0       	ldi	r25, 0x03	; 3
    241c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

00002420 <.LVL125>:
									indicatorTimed_run();
    2420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

00002424 <.LVL126>:
    2424:	03 cf       	rjmp	.-506    	; 0x222c <.L76>

00002426 <.L38>:
									fryer.viewmode = FRYER_VIEWMODE_COOK;
    2426:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <fryer+0x35>

0000242a <.LBB21>:
										kbmode_default(&fryer.basket[i].kb);
    242a:	86 e6       	ldi	r24, 0x66	; 102
    242c:	97 e0       	ldi	r25, 0x07	; 7
    242e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

00002432 <.LVL128>:
										fryer.basket[i].kbmode = KBMODE_DEFAULT;
    2432:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <fryer+0x9>

00002436 <.Loc.469>:
										kbmode_default(&fryer.basket[i].kb);
    2436:	80 e8       	ldi	r24, 0x80	; 128
    2438:	97 e0       	ldi	r25, 0x07	; 7
    243a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

0000243e <.LVL130>:
										fryer.basket[i].kbmode = KBMODE_DEFAULT;
    243e:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <fryer+0x23>

00002442 <.LBE21>:
									disp7s_update_data_array(data_array_buffer, 0, DISP7S_TOTAL_NUMMAX);
    2442:	48 e0       	ldi	r20, 0x08	; 8
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	ce 01       	movw	r24, r28
    2448:	0b 96       	adiw	r24, 0x0b	; 11
    244a:	74 cf       	rjmp	.-280    	; 0x2334 <.L77>

0000244c <.L42>:
									fryer.viewmode = FRYER_VIEWMODE_COOK;
    244c:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <fryer+0x35>

00002450 <.LBB22>:
										kbmode_default(&fryer.basket[i].kb);
    2450:	86 e6       	ldi	r24, 0x66	; 102
    2452:	97 e0       	ldi	r25, 0x07	; 7
    2454:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

00002458 <.LVL134>:
										fryer.basket[i].kbmode = KBMODE_DEFAULT;
    2458:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <fryer+0x9>

0000245c <.Loc.485>:
										kbmode_default(&fryer.basket[i].kb);
    245c:	80 e8       	ldi	r24, 0x80	; 128
    245e:	97 e0       	ldi	r25, 0x07	; 7
    2460:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

00002464 <.LVL136>:
										fryer.basket[i].kbmode = KBMODE_DEFAULT;
    2464:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <fryer+0x23>

00002468 <.LBE22>:
									disp7s_update_data_array(data_array_buffer, 0, DISP7S_TOTAL_NUMMAX);
    2468:	48 e0       	ldi	r20, 0x08	; 8
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	ce 01       	movw	r24, r28
    246e:	0b 96       	adiw	r24, 0x0b	; 11
    2470:	7f cf       	rjmp	.-258    	; 0x2370 <.L78>

00002472 <__vector_10>:

	return 0;
}

ISR(TIMER0_COMP_vect)
{
    2472:	8f 93       	push	r24
    2474:	8f b7       	in	r24, 0x3f	; 63
    2476:	8f 93       	push	r24

00002478 <.Loc.494>:
	isr_flag.sysTickMs = 1;
    2478:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <isr_flag>
    247c:	81 60       	ori	r24, 0x01	; 1
    247e:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <isr_flag>

00002482 <.Loc.496>:
}
    2482:	8f 91       	pop	r24
    2484:	8f bf       	out	0x3f, r24	; 63
    2486:	8f 91       	pop	r24
    2488:	18 95       	reti

0000248a <build_cookCycle_string>:



//build to print Left time mm:ss
void build_cookCycle_string(struct _t *t, unsigned char *str)
{
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	00 d0       	rcall	.+0      	; 0x2498 <L0^A>

00002498 <L0^A>:
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	7c 01       	movw	r14, r24
    249e:	8b 01       	movw	r16, r22

000024a0 <.Loc.2>:
	unsigned char buff[2];
	integer_to_arraybcd_msb_lsb_paddingleft_blank(t->min, buff, 2);
    24a0:	fc 01       	movw	r30, r24
    24a2:	80 81       	ld	r24, Z

000024a4 <.Loc.4>:
    24a4:	42 e0       	ldi	r20, 0x02	; 2
    24a6:	be 01       	movw	r22, r28

000024a8 <.Loc.5>:
    24a8:	6f 5f       	subi	r22, 0xFF	; 255
    24aa:	7f 4f       	sbci	r23, 0xFF	; 255
    24ac:	98 2f       	mov	r25, r24
    24ae:	99 0f       	add	r25, r25
    24b0:	99 0b       	sbc	r25, r25
    24b2:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <integer_to_arraybcd_msb_lsb_paddingleft_blank>

000024b6 <.LBB2>:
	for (int8_t i = 0; i<2; i++)
	{
		str[i] = buff[i];
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	f8 01       	movw	r30, r16
    24ba:	80 83       	st	Z, r24

000024bc <.Loc.11>:
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	81 83       	std	Z+1, r24	; 0x01

000024c0 <.LBE2>:
	}

	integer_to_arraybcd_msb_lsb_paddingleft_zeroes(t->sec, buff, 2);
    24c0:	f7 01       	movw	r30, r14
    24c2:	81 81       	ldd	r24, Z+1	; 0x01
    24c4:	42 e0       	ldi	r20, 0x02	; 2
    24c6:	be 01       	movw	r22, r28
    24c8:	6f 5f       	subi	r22, 0xFF	; 255
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	98 2f       	mov	r25, r24
    24ce:	99 0f       	add	r25, r25
    24d0:	99 0b       	sbc	r25, r25
    24d2:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <integer_to_arraybcd_msb_lsb_paddingleft_zeroes>

000024d6 <.LBB3>:
	int8_t idx = 0;
	for (int8_t i = 2; i<4; i++)
	{
		str[i] = buff[idx++];
    24d6:	78 01       	movw	r14, r16

000024d8 <.Loc.24>:
    24d8:	f2 e0       	ldi	r31, 0x02	; 2
    24da:	ef 0e       	add	r14, r31
    24dc:	f1 1c       	adc	r15, r1

000024de <.Loc.25>:
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	f8 01       	movw	r30, r16
    24e2:	82 83       	std	Z+2, r24	; 0x02

000024e4 <.Loc.26>:
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	83 83       	std	Z+3, r24	; 0x03

000024e8 <.LBE3>:
	}

	//on decimal point
	disp7s_decimalpoint_on(&str[1]);
    24e8:	c8 01       	movw	r24, r16
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <disp7s_decimalpoint_on>

000024f0 <.LVL10>:
	disp7s_decimalpoint_on(&str[2]);
    24f0:	c7 01       	movw	r24, r14
    24f2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <disp7s_decimalpoint_on>

000024f6 <.LVL11>:
	//fix inverted display
	disp7s_fix_upsidedown_display(&str[2]);
    24f6:	c7 01       	movw	r24, r14
    24f8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <disp7s_fix_upsidedown_display>

000024fc <.LVL12>:
}
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	1f 91       	pop	r17
    2506:	0f 91       	pop	r16

00002508 <.Loc.36>:
    2508:	ff 90       	pop	r15
    250a:	ef 90       	pop	r14

0000250c <.Loc.37>:
    250c:	08 95       	ret

0000250e <cookCycle_hotUpdate>:



void cookCycle_hotUpdate(struct _t *TcookCycle_setPoint_toUpdate, struct _t *TcookCycle_setPoint_current,struct _t *Tcookcycle_timingrunning)
{
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	00 d0       	rcall	.+0      	; 0x2516 <L0^A>

00002516 <L0^A>:
    2516:	00 d0       	rcall	.+0      	; 0x2518 <L0^A>

00002518 <L0^A>:
    2518:	00 d0       	rcall	.+0      	; 0x251a <L0^A>

0000251a <L0^A>:
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	4d 83       	std	Y+5, r20	; 0x05
    2520:	5e 83       	std	Y+6, r21	; 0x06

00002522 <.LVL16>:
	int16_t TcookCycle_toUpdate_inSecs = (TcookCycle_setPoint_toUpdate->min * 60)+ TcookCycle_setPoint_toUpdate->sec;
    2522:	fc 01       	movw	r30, r24
    2524:	20 81       	ld	r18, Z

00002526 <.Loc.45>:
    2526:	4c e3       	ldi	r20, 0x3C	; 60

00002528 <.Loc.46>:
    2528:	24 03       	mulsu	r18, r20
    252a:	90 01       	movw	r18, r0
    252c:	11 24       	eor	r1, r1

0000252e <.Loc.47>:
    252e:	81 81       	ldd	r24, Z+1	; 0x01

00002530 <.Loc.48>:
    2530:	f9 01       	movw	r30, r18

00002532 <.Loc.49>:
    2532:	e8 0f       	add	r30, r24
    2534:	f1 1d       	adc	r31, r1
    2536:	87 fd       	sbrc	r24, 7
    2538:	fa 95       	dec	r31
    253a:	cf 01       	movw	r24, r30

0000253c <.Loc.50>:
	int16_t TcookCycle_setPoint_inSecs = (TcookCycle_setPoint_current->min * 60)+ TcookCycle_setPoint_current->sec;
    253c:	fb 01       	movw	r30, r22
    253e:	20 81       	ld	r18, Z

00002540 <.Loc.51>:
    2540:	24 03       	mulsu	r18, r20
    2542:	90 01       	movw	r18, r0
    2544:	11 24       	eor	r1, r1

00002546 <.Loc.52>:
    2546:	51 81       	ldd	r21, Z+1	; 0x01

00002548 <.Loc.53>:
    2548:	25 0f       	add	r18, r21
    254a:	31 1d       	adc	r19, r1
    254c:	57 fd       	sbrc	r21, 7
    254e:	3a 95       	dec	r19

00002550 <.Loc.54>:
	int16_t Trunning_inSecs = (Tcookcycle_timingrunning->min * 60)+ Tcookcycle_timingrunning->sec;
    2550:	ed 81       	ldd	r30, Y+5	; 0x05
    2552:	fe 81       	ldd	r31, Y+6	; 0x06
    2554:	50 81       	ld	r21, Z

00002556 <.Loc.55>:
    2556:	54 03       	mulsu	r21, r20
    2558:	a0 01       	movw	r20, r0
    255a:	11 24       	eor	r1, r1

0000255c <.Loc.56>:
    255c:	61 81       	ldd	r22, Z+1	; 0x01

0000255e <.Loc.57>:
    255e:	46 0f       	add	r20, r22
    2560:	51 1d       	adc	r21, r1
    2562:	67 fd       	sbrc	r22, 7
    2564:	5a 95       	dec	r21

00002566 <.Loc.58>:

	int32_t diff_inSec = TcookCycle_toUpdate_inSecs	- (TcookCycle_setPoint_inSecs - Trunning_inSecs);
    2566:	24 1b       	sub	r18, r20
    2568:	35 0b       	sbc	r19, r21

0000256a <.Loc.59>:

	if (diff_inSec <= 0)	//Trunc
    256a:	82 1b       	sub	r24, r18
    256c:	93 0b       	sbc	r25, r19
    256e:	79 f1       	breq	.+94     	; 0x25ce <.L4>
    2570:	72 f1       	brmi	.+92     	; 0x25ce <.L4>

00002572 <.Loc.60>:
		Tcookcycle_timingrunning->min = 0;
		Tcookcycle_timingrunning->sec = 0;
	}
	else
	{
		Tcookcycle_timingrunning->min = (int) (diff_inSec / 60.0);
    2572:	9c 01       	movw	r18, r24
    2574:	49 2f       	mov	r20, r25
    2576:	44 0f       	add	r20, r20
    2578:	44 0b       	sbc	r20, r20
    257a:	54 2f       	mov	r21, r20
    257c:	89 83       	std	Y+1, r24	; 0x01
    257e:	3a 83       	std	Y+2, r19	; 0x02
    2580:	4b 83       	std	Y+3, r20	; 0x03
    2582:	4c 83       	std	Y+4, r20	; 0x04
    2584:	bc 01       	movw	r22, r24
    2586:	ca 01       	movw	r24, r20
    2588:	0e 94 ed 19 	call	0x33da	; 0x33da <__floatsisf>

0000258c <.LVL22>:
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e7       	ldi	r20, 0x70	; 112
    2592:	52 e4       	ldi	r21, 0x42	; 66
    2594:	0e 94 43 19 	call	0x3286	; 0x3286 <__divsf3>

00002598 <.LVL23>:
    2598:	0e 94 b5 19 	call	0x336a	; 0x336a <__fixsfsi>

0000259c <.LVL24>:
    259c:	16 2f       	mov	r17, r22

0000259e <.Loc.64>:
		Tcookcycle_timingrunning->sec = (int) (diff_inSec % 60);	//modulo;
    259e:	69 81       	ldd	r22, Y+1	; 0x01
    25a0:	7a 81       	ldd	r23, Y+2	; 0x02
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	2c e3       	ldi	r18, 0x3C	; 60
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__divmodsi4>

000025b2 <.L3>:
		Tcookcycle_timingrunning->min = 0;
    25b2:	ed 81       	ldd	r30, Y+5	; 0x05
    25b4:	fe 81       	ldd	r31, Y+6	; 0x06
    25b6:	10 83       	st	Z, r17

000025b8 <.Loc.67>:
		Tcookcycle_timingrunning->sec = 0;
    25b8:	61 83       	std	Z+1, r22	; 0x01

000025ba <.Loc.68>:
	}
}
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	08 95       	ret

000025ce <.L4>:
    25ce:	10 e0       	ldi	r17, 0x00	; 0
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	ef cf       	rjmp	.-34     	; 0x25b2 <.L3>

000025d4 <psmode_operative_init>:
struct _basket basket_temp[BASKET_MAXSIZE];//basket temp mantiene en todo el programa el valor guardado en la EEPROM desde q arranca la aplicacion

//char lcdanBuff[LCDAN_ROW][LCDAN_COL];

void psmode_operative_init(void)
{
    25d4:	8f 92       	push	r8
    25d6:	9f 92       	push	r9
    25d8:	af 92       	push	r10
    25da:	bf 92       	push	r11
    25dc:	cf 92       	push	r12
    25de:	df 92       	push	r13
    25e0:	ef 92       	push	r14
    25e2:	ff 92       	push	r15
    25e4:	0f 93       	push	r16
    25e6:	1f 93       	push	r17
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	64 97       	sbiw	r28, 0x14	; 20
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61

000025fc <.LBB4>:
	unsigned char str[20];

	//++--
	for (int i=0; i<BASKET_MAXSIZE; i++)
    25fc:	02 e6       	ldi	r16, 0x62	; 98
    25fe:	17 e0       	ldi	r17, 0x07	; 7
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	a8 2e       	mov	r10, r24
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	b8 2e       	mov	r11, r24
    2608:	9f e9       	ldi	r25, 0x9F	; 159
    260a:	c9 2e       	mov	r12, r25
    260c:	97 e0       	ldi	r25, 0x07	; 7
    260e:	d9 2e       	mov	r13, r25

00002610 <.Loc.75>:
    2610:	e1 2c       	mov	r14, r1
    2612:	f1 2c       	mov	r15, r1

00002614 <.L7>:
	{
		fryer.basket[i].blink.timerBlink_K =  PSMODE_OPERATIVE_BLINK_TIMER_KMAX;
    2614:	e0 e9       	ldi	r30, 0x90	; 144
    2616:	f1 e0       	ldi	r31, 0x01	; 1
    2618:	d8 01       	movw	r26, r16
    261a:	55 96       	adiw	r26, 0x15	; 21
    261c:	ed 93       	st	X+, r30
    261e:	fd 93       	st	X+, r31

00002620 <.Loc.78>:
		//
		eeprom_read_block((struct _t *)(&fryer.basket[i].cookCycle.time), (struct _t *)(&COOKTIME[i]), sizeof(struct _t));
    2620:	48 01       	movw	r8, r16
    2622:	fa e0       	ldi	r31, 0x0A	; 10
    2624:	8f 0e       	add	r8, r31
    2626:	91 1c       	adc	r9, r1

00002628 <.Loc.80>:
    2628:	42 e0       	ldi	r20, 0x02	; 2
    262a:	50 e0       	ldi	r21, 0x00	; 0
    262c:	b5 01       	movw	r22, r10
    262e:	c4 01       	movw	r24, r8
    2630:	0e 94 39 1b 	call	0x3672	; 0x3672 <eeprom_read_block>

00002634 <.LVL28>:
		//carga desde la eeprom de manera temporal
		basket_temp[i].cookCycle.time = fryer.basket[i].cookCycle.time;
    2634:	d8 01       	movw	r26, r16
    2636:	1a 96       	adiw	r26, 0x0a	; 10
    2638:	8d 91       	ld	r24, X+
    263a:	9d 91       	ld	r25, X+
    263c:	f6 01       	movw	r30, r12
    263e:	82 87       	std	Z+10, r24	; 0x0a
    2640:	93 87       	std	Z+11, r25	; 0x0b

00002642 <.Loc.83>:


		//return to visualizing decrement-timing
		fryer.basket[i].cookCycle.counterTicks = 0x00;//reset counter
    2642:	1d 92       	st	X+, r1
    2644:	1d 92       	st	X+, r1

00002646 <.Loc.85>:
		fryer.basket[i].cookCycle.bf.forceCheckControl = 1;//forzar pase directo para poder visualizar y actuar si es 00:00
    2646:	2a e1       	ldi	r18, 0x1A	; 26
    2648:	2e 9d       	mul	r18, r14
    264a:	f0 01       	movw	r30, r0
    264c:	2f 9d       	mul	r18, r15
    264e:	f0 0d       	add	r31, r0
    2650:	11 24       	eor	r1, r1
    2652:	df 01       	movw	r26, r30
    2654:	a0 59       	subi	r26, 0x90	; 144
    2656:	b8 4f       	sbci	r27, 0xF8	; 248
    2658:	8c 91       	ld	r24, X
    265a:	82 60       	ori	r24, 0x02	; 2
    265c:	8c 93       	st	X, r24

0000265e <.Loc.87>:


		fryer.basket[i].display.owner = DISPLAY_TIMING;
    265e:	d8 01       	movw	r26, r16
    2660:	13 96       	adiw	r26, 0x03	; 3
    2662:	1c 92       	st	X, r1

00002664 <.Loc.89>:
		fryer.basket[i].display.bf.print_cookCycle = 1;
    2664:	ec 59       	subi	r30, 0x9C	; 156
    2666:	f8 4f       	sbci	r31, 0xF8	; 248
    2668:	80 81       	ld	r24, Z
    266a:	81 60       	ori	r24, 0x01	; 1
    266c:	80 83       	st	Z, r24

0000266e <.Loc.91>:
		//
		//if (fryer.basket[i].display.bf.print_cookCycle == 1)
		if ((fryer.basket[i].display.bf.print_cookCycle == 1)	&& (fryer.viewmode == FRYER_VIEWMODE_COOK))
    266e:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <fryer+0x35>
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	69 f4       	brne	.+26     	; 0x2690 <.L6>

00002676 <.Loc.93>:
		{
			build_cookCycle_string(&fryer.basket[i].cookCycle.time, str);
    2676:	be 01       	movw	r22, r28
    2678:	6f 5f       	subi	r22, 0xFF	; 255
    267a:	7f 4f       	sbci	r23, 0xFF	; 255
    267c:	c4 01       	movw	r24, r8
    267e:	0e 94 45 12 	call	0x248a	; 0x248a <build_cookCycle_string>

00002682 <.LVL29>:


			disp7s_update_data_array(str, fryer.basket[i].display.cursor.x, BASKET_DISP_MAX_CHARS_PERBASKET);
    2682:	44 e0       	ldi	r20, 0x04	; 4
    2684:	f8 01       	movw	r30, r16
    2686:	60 81       	ld	r22, Z
    2688:	ce 01       	movw	r24, r28
    268a:	01 96       	adiw	r24, 0x01	; 1
    268c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00002690 <.L6>:

		}

		//
		kbmode_default(&fryer.basket[i].kb);
    2690:	c8 01       	movw	r24, r16
    2692:	04 96       	adiw	r24, 0x04	; 4
    2694:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <kbmode_default>

00002698 <.LVL31>:
		fryer.basket[i].kbmode = KBMODE_DEFAULT;
    2698:	d8 01       	movw	r26, r16
    269a:	19 96       	adiw	r26, 0x09	; 9
    269c:	1c 92       	st	X, r1

0000269e <.Loc.98>:
	for (int i=0; i<BASKET_MAXSIZE; i++)
    269e:	c7 01       	movw	r24, r14
    26a0:	01 96       	adiw	r24, 0x01	; 1

000026a2 <.Loc.99>:
    26a2:	06 5e       	subi	r16, 0xE6	; 230
    26a4:	1f 4f       	sbci	r17, 0xFF	; 255
    26a6:	b2 e0       	ldi	r27, 0x02	; 2
    26a8:	ab 0e       	add	r10, r27
    26aa:	b1 1c       	adc	r11, r1
    26ac:	ea e1       	ldi	r30, 0x1A	; 26
    26ae:	ce 0e       	add	r12, r30
    26b0:	d1 1c       	adc	r13, r1
    26b2:	ee 24       	eor	r14, r14
    26b4:	e3 94       	inc	r14
    26b6:	f1 2c       	mov	r15, r1
    26b8:	02 97       	sbiw	r24, 0x02	; 2
    26ba:	09 f0       	breq	.+2      	; 0x26be <.LBE4>

000026bc <L0^A>:
    26bc:	ab cf       	rjmp	.-170    	; 0x2614 <.L7>

000026be <.LBE4>:
	}
	//--+
}
    26be:	64 96       	adiw	r28, 0x14	; 20
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	de bf       	out	0x3e, r29	; 62
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	cd bf       	out	0x3d, r28	; 61
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	1f 91       	pop	r17
    26d0:	0f 91       	pop	r16
    26d2:	ff 90       	pop	r15
    26d4:	ef 90       	pop	r14
    26d6:	df 90       	pop	r13
    26d8:	cf 90       	pop	r12
    26da:	bf 90       	pop	r11
    26dc:	af 90       	pop	r10
    26de:	9f 90       	pop	r9
    26e0:	8f 90       	pop	r8
    26e2:	08 95       	ret

000026e4 <p1>:

#define FRYER_COOKCYCLE_USER_STARTED 1
#define FRYER_COOKCYCLE_USER_STOPPED 0

void p1(void)
{
    26e4:	3f 92       	push	r3
    26e6:	4f 92       	push	r4
    26e8:	5f 92       	push	r5
    26ea:	6f 92       	push	r6
    26ec:	7f 92       	push	r7
    26ee:	8f 92       	push	r8
    26f0:	9f 92       	push	r9
    26f2:	af 92       	push	r10
    26f4:	bf 92       	push	r11
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	64 97       	sbiw	r28, 0x14	; 20
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61

00002716 <.LBB5>:
	unsigned char str[20];
	for (int i=0; i<BASKET_MAXSIZE; i++)
    2716:	02 e6       	ldi	r16, 0x62	; 98
    2718:	17 e0       	ldi	r17, 0x07	; 7
    271a:	89 ea       	ldi	r24, 0xA9	; 169
    271c:	c8 2e       	mov	r12, r24
    271e:	87 e0       	ldi	r24, 0x07	; 7
    2720:	d8 2e       	mov	r13, r24
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	89 2e       	mov	r8, r25
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	99 2e       	mov	r9, r25

0000272a <.Loc.106>:
    272a:	e1 2c       	mov	r14, r1
    272c:	f1 2c       	mov	r15, r1

0000272e <.Loc.107>:
	{
		blink_set(&fryer.basket[i].blink);

		if ((ikb_key_is_ready2read(fryer.basket[i].kb.down)) && (fryer.basket[i].cookCycle.bf.blinkDone == 0) && (fryer.basket[i].cookCycle.bf.on == 0))
    272e:	2a e1       	ldi	r18, 0x1A	; 26
    2730:	32 2e       	mov	r3, r18

00002732 <.L30>:
		blink_set(&fryer.basket[i].blink);
    2732:	c8 01       	movw	r24, r16
    2734:	43 96       	adiw	r24, 0x13	; 19
    2736:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <blink_set>

0000273a <.LVL35>:
		if ((ikb_key_is_ready2read(fryer.basket[i].kb.down)) && (fryer.basket[i].cookCycle.bf.blinkDone == 0) && (fryer.basket[i].cookCycle.bf.on == 0))
    273a:	d8 01       	movw	r26, r16
    273c:	16 96       	adiw	r26, 0x06	; 6
    273e:	8c 91       	ld	r24, X
    2740:	0e 94 47 07 	call	0xe8e	; 0xe8e <ikb_key_is_ready2read>

00002744 <.LVL36>:
    2744:	81 15       	cp	r24, r1
    2746:	b9 f1       	breq	.+110    	; 0x27b6 <.L10>

00002748 <.Loc.112>:
    2748:	3e 9c       	mul	r3, r14
    274a:	f0 01       	movw	r30, r0
    274c:	3f 9c       	mul	r3, r15
    274e:	f0 0d       	add	r31, r0
    2750:	11 24       	eor	r1, r1
    2752:	e0 59       	subi	r30, 0x90	; 144
    2754:	f8 4f       	sbci	r31, 0xF8	; 248
    2756:	80 81       	ld	r24, Z

00002758 <.Loc.113>:
    2758:	82 fd       	sbrc	r24, 2
    275a:	2d c0       	rjmp	.+90     	; 0x27b6 <.L10>

0000275c <.Loc.114>:
    275c:	80 fd       	sbrc	r24, 0
    275e:	2b c0       	rjmp	.+86     	; 0x27b6 <.L10>

00002760 <.Loc.115>:
		{
			//ikb_key_was_read(fryer.basket[i].kb.down);
			if (!ikb_inReptt(fryer.basket[i].kb.down))
    2760:	f8 01       	movw	r30, r16
    2762:	86 81       	ldd	r24, Z+6	; 0x06
    2764:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ikb_inReptt>

00002768 <.LVL37>:
    2768:	81 11       	cpse	r24, r1
    276a:	06 c0       	rjmp	.+12     	; 0x2778 <.L11>

0000276c <.Loc.118>:
			{
				indicatorTimed_setKSysTickTime_ms(75/SYSTICK_MS);
    276c:	8b e4       	ldi	r24, 0x4B	; 75
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

00002774 <.LVL38>:
				indicatorTimed_run();
    2774:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

00002778 <.L11>:
			}

			//
			fryer.basket[i].display.bf.print_cookCycle = 0;
    2778:	8a e1       	ldi	r24, 0x1A	; 26
    277a:	8e 9d       	mul	r24, r14
    277c:	f0 01       	movw	r30, r0
    277e:	8f 9d       	mul	r24, r15
    2780:	f0 0d       	add	r31, r0
    2782:	11 24       	eor	r1, r1
    2784:	df 01       	movw	r26, r30
    2786:	ac 59       	subi	r26, 0x9C	; 156
    2788:	b8 4f       	sbci	r27, 0xF8	; 248
    278a:	8c 91       	ld	r24, X
    278c:	8e 7f       	andi	r24, 0xFE	; 254
    278e:	8c 93       	st	X, r24

00002790 <.Loc.122>:
			//fryer.basket[i].bf.user_startStop = FRYER_COOKCYCLE_USER_STOPPED;//preserva el estado actual si esta corriendo el temporizador o no
			fryer.basket[i].cookCycle.editcycle.bf.blinkIsActive = 1;
    2790:	ed 58       	subi	r30, 0x8D	; 141
    2792:	f8 4f       	sbci	r31, 0xF8	; 248
    2794:	80 81       	ld	r24, Z
    2796:	81 60       	ori	r24, 0x01	; 1
    2798:	80 83       	st	Z, r24

0000279a <.Loc.124>:
			fryer.basket[i].kbmode = KBMODE_EDIT_COOKCYCLE;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	d8 01       	movw	r26, r16
    279e:	19 96       	adiw	r26, 0x09	; 9
    27a0:	8c 93       	st	X, r24

000027a2 <.Loc.126>:
			fryer.basket[i].display.owner = DISPLAY_EDITCOOKCYCLE;
    27a2:	16 97       	sbiw	r26, 0x06	; 6
    27a4:	8c 93       	st	X, r24

000027a6 <.Loc.128>:
			fryer.basket[i].cookCycle.editcycle.timerTimeout = 0x0000;//reset
    27a6:	1c 96       	adiw	r26, 0x0c	; 12
    27a8:	1d 92       	st	X+, r1
    27aa:	1d 92       	st	X+, r1

000027ac <.Loc.130>:
			blink_reset(BLINK_TOGGLE_SET_TEXT);
    27ac:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <blink_reset>

000027b0 <.LVL40>:
			//

			time_dec(&basket_temp[i].cookCycle.time);
    27b0:	c6 01       	movw	r24, r12
    27b2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <time_dec>

000027b6 <.L10>:
		}
		if ((ikb_key_is_ready2read(fryer.basket[i].kb.up))  && (fryer.basket[i].cookCycle.bf.blinkDone == 0) && (fryer.basket[i].cookCycle.bf.on == 0))
    27b6:	f8 01       	movw	r30, r16
    27b8:	87 81       	ldd	r24, Z+7	; 0x07
    27ba:	0e 94 47 07 	call	0xe8e	; 0xe8e <ikb_key_is_ready2read>

000027be <.LVL42>:
    27be:	81 15       	cp	r24, r1
    27c0:	a9 f1       	breq	.+106    	; 0x282c <.L12>

000027c2 <.Loc.135>:
    27c2:	3e 9c       	mul	r3, r14
    27c4:	f0 01       	movw	r30, r0
    27c6:	3f 9c       	mul	r3, r15
    27c8:	f0 0d       	add	r31, r0
    27ca:	11 24       	eor	r1, r1
    27cc:	e0 59       	subi	r30, 0x90	; 144
    27ce:	f8 4f       	sbci	r31, 0xF8	; 248
    27d0:	80 81       	ld	r24, Z

000027d2 <.Loc.136>:
    27d2:	82 fd       	sbrc	r24, 2
    27d4:	2b c0       	rjmp	.+86     	; 0x282c <.L12>

000027d6 <.Loc.137>:
    27d6:	80 fd       	sbrc	r24, 0
    27d8:	29 c0       	rjmp	.+82     	; 0x282c <.L12>

000027da <.Loc.138>:
		{
			//ikb_key_was_read(fryer.basket[i].kb.up);
			if (!ikb_inReptt(fryer.basket[i].kb.up))
    27da:	d8 01       	movw	r26, r16
    27dc:	17 96       	adiw	r26, 0x07	; 7
    27de:	8c 91       	ld	r24, X
    27e0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ikb_inReptt>

000027e4 <.LVL43>:
    27e4:	81 11       	cpse	r24, r1
    27e6:	06 c0       	rjmp	.+12     	; 0x27f4 <.L13>

000027e8 <.Loc.141>:
			{
				indicatorTimed_setKSysTickTime_ms(75/SYSTICK_MS);
    27e8:	8b e4       	ldi	r24, 0x4B	; 75
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

000027f0 <.LVL44>:
				indicatorTimed_run();
    27f0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

000027f4 <.L13>:
			}
			//
			fryer.basket[i].display.bf.print_cookCycle = 0;
    27f4:	8a e1       	ldi	r24, 0x1A	; 26
    27f6:	8e 9d       	mul	r24, r14
    27f8:	f0 01       	movw	r30, r0
    27fa:	8f 9d       	mul	r24, r15
    27fc:	f0 0d       	add	r31, r0
    27fe:	11 24       	eor	r1, r1
    2800:	df 01       	movw	r26, r30
    2802:	ac 59       	subi	r26, 0x9C	; 156
    2804:	b8 4f       	sbci	r27, 0xF8	; 248
    2806:	8c 91       	ld	r24, X
    2808:	8e 7f       	andi	r24, 0xFE	; 254
    280a:	8c 93       	st	X, r24

0000280c <.Loc.145>:
			//fryer.basket[i].bf.user_startStop = FRYER_COOKCYCLE_USER_STOPPED;

			fryer.basket[i].cookCycle.editcycle.bf.blinkIsActive = 1;
    280c:	ed 58       	subi	r30, 0x8D	; 141
    280e:	f8 4f       	sbci	r31, 0xF8	; 248
    2810:	80 81       	ld	r24, Z
    2812:	81 60       	ori	r24, 0x01	; 1
    2814:	80 83       	st	Z, r24

00002816 <.Loc.147>:

			fryer.basket[i].kbmode = KBMODE_EDIT_COOKCYCLE;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	f8 01       	movw	r30, r16
    281a:	81 87       	std	Z+9, r24	; 0x09

0000281c <.Loc.149>:
			fryer.basket[i].display.owner = DISPLAY_EDITCOOKCYCLE;
    281c:	83 83       	std	Z+3, r24	; 0x03

0000281e <.Loc.151>:
			fryer.basket[i].cookCycle.editcycle.timerTimeout = 0x0000;//reset
    281e:	17 86       	std	Z+15, r1	; 0x0f
    2820:	10 8a       	std	Z+16, r1	; 0x10

00002822 <.Loc.153>:
			blink_reset(BLINK_TOGGLE_SET_TEXT);
    2822:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <blink_reset>

00002826 <.LVL46>:
			//

			time_inc(&basket_temp[i].cookCycle.time);
    2826:	c6 01       	movw	r24, r12
    2828:	0e 94 6f 01 	call	0x2de	; 0x2de <time_inc>

0000282c <.L12>:
		}
		//clear
		ikb_key_was_read(fryer.basket[i].kb.down);
    282c:	d8 01       	movw	r26, r16
    282e:	16 96       	adiw	r26, 0x06	; 6
    2830:	8c 91       	ld	r24, X
    2832:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ikb_key_was_read>

00002836 <.LVL48>:
		ikb_key_was_read(fryer.basket[i].kb.up);
    2836:	f8 01       	movw	r30, r16
    2838:	87 81       	ldd	r24, Z+7	; 0x07
    283a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ikb_key_was_read>

0000283e <.LVL49>:


		if (fryer.basket[i].kbmode == KBMODE_DEFAULT)
    283e:	d8 01       	movw	r26, r16
    2840:	19 96       	adiw	r26, 0x09	; 9
    2842:	8c 91       	ld	r24, X
    2844:	19 97       	sbiw	r26, 0x09	; 9

00002846 <.Loc.159>:
    2846:	81 30       	cpi	r24, 0x01	; 1
    2848:	08 f0       	brcs	.+2      	; 0x284c <.Loc.160>

0000284a <L0^A>:
    284a:	ee c0       	rjmp	.+476    	; 0x2a28 <.L14>

0000284c <.Loc.160>:
		{
			if (ikb_key_is_ready2read(fryer.basket[i].kb.startStop ) )
    284c:	14 96       	adiw	r26, 0x04	; 4
    284e:	8c 91       	ld	r24, X
    2850:	0e 94 47 07 	call	0xe8e	; 0xe8e <ikb_key_is_ready2read>

00002854 <.LVL50>:
    2854:	81 15       	cp	r24, r1
    2856:	01 f1       	breq	.+64     	; 0x2898 <.L16>

00002858 <.Loc.163>:
			{
				ikb_key_was_read(fryer.basket[i].kb.startStop);
    2858:	f8 01       	movw	r30, r16
    285a:	84 81       	ldd	r24, Z+4	; 0x04
    285c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ikb_key_was_read>

00002860 <.LVL51>:
				//
				indicatorTimed_setKSysTickTime_ms(1000/SYSTICK_MS);
    2860:	88 ee       	ldi	r24, 0xE8	; 232
    2862:	93 e0       	ldi	r25, 0x03	; 3
    2864:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

00002868 <.LVL52>:
				indicatorTimed_run();
    2868:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

0000286c <.LVL53>:
				//
				//
				if (fryer.basket[i].bf.user_startStop == FRYER_COOKCYCLE_USER_STOPPED)
    286c:	8a e1       	ldi	r24, 0x1A	; 26
    286e:	8e 9d       	mul	r24, r14
    2870:	30 01       	movw	r6, r0
    2872:	8f 9d       	mul	r24, r15
    2874:	70 0c       	add	r7, r0
    2876:	11 24       	eor	r1, r1
    2878:	f3 01       	movw	r30, r6
    287a:	ec 58       	subi	r30, 0x8C	; 140
    287c:	f8 4f       	sbci	r31, 0xF8	; 248
    287e:	80 81       	ld	r24, Z
    2880:	93 01       	movw	r18, r6
    2882:	20 59       	subi	r18, 0x90	; 144
    2884:	38 4f       	sbci	r19, 0xF8	; 248
    2886:	59 01       	movw	r10, r18

00002888 <.Loc.168>:
    2888:	80 fd       	sbrc	r24, 0
    288a:	96 c0       	rjmp	.+300    	; 0x29b8 <.L17>

0000288c <.Loc.169>:
				{
					fryer.basket[i].bf.user_startStop = FRYER_COOKCYCLE_USER_STARTED;
    288c:	81 60       	ori	r24, 0x01	; 1
    288e:	80 83       	st	Z, r24

00002890 <.Loc.171>:
					//
					fryer.basket[i].cookCycle.bf.on = 1;
    2890:	d9 01       	movw	r26, r18
    2892:	8c 91       	ld	r24, X
    2894:	81 60       	ori	r24, 0x01	; 1
    2896:	8c 93       	st	X, r24

00002898 <.L16>:
				}
			//
		}

		//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		if (fryer.basket[i].cookCycle.editcycle.bf.blinkIsActive == 1)
    2898:	3e 9c       	mul	r3, r14
    289a:	f0 01       	movw	r30, r0
    289c:	3f 9c       	mul	r3, r15
    289e:	f0 0d       	add	r31, r0
    28a0:	11 24       	eor	r1, r1
    28a2:	df 01       	movw	r26, r30
    28a4:	ad 58       	subi	r26, 0x8D	; 141
    28a6:	b8 4f       	sbci	r27, 0xF8	; 248
    28a8:	8c 91       	ld	r24, X

000028aa <.Loc.175>:
    28aa:	80 ff       	sbrs	r24, 0
    28ac:	2b c0       	rjmp	.+86     	; 0x2904 <.L21>

000028ae <.Loc.176>:
		{
			//local blink - start
			//update blink struct through blink_set(struct _blink *b)
			if (fryer.basket[i].blink.bf.update)
    28ae:	e7 58       	subi	r30, 0x87	; 135
    28b0:	f8 4f       	sbci	r31, 0xF8	; 248
    28b2:	80 81       	ld	r24, Z

000028b4 <.Loc.178>:
    28b4:	81 ff       	sbrs	r24, 1
    28b6:	15 c0       	rjmp	.+42     	; 0x28e2 <.L23>

000028b8 <.Loc.179>:
			{
				fryer.basket[i].blink.bf.update = 0;
    28b8:	8d 7f       	andi	r24, 0xFD	; 253
    28ba:	80 83       	st	Z, r24

000028bc <.Loc.181>:
				//
				if (fryer.viewmode == FRYER_VIEWMODE_COOK)//add 2022
    28bc:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <fryer+0x35>
    28c0:	91 30       	cpi	r25, 0x01	; 1
    28c2:	79 f4       	brne	.+30     	; 0x28e2 <.L23>

000028c4 <.Loc.183>:
				{
					if (fryer.basket[i].blink.bf.toggle == BLINK_TOGGLE_SET_BLANK)
    28c4:	80 fd       	sbrc	r24, 0
    28c6:	db c0       	rjmp	.+438    	; 0x2a7e <.L25>

000028c8 <.Loc.185>:
					{
						disp7s_blank_displays(str, 0, BASKET_DISP_MAX_CHARS_PERBASKET);
    28c8:	44 e0       	ldi	r20, 0x04	; 4
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	ce 01       	movw	r24, r28
    28ce:	01 96       	adiw	r24, 0x01	; 1
    28d0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <disp7s_blank_displays>

000028d4 <.LVL54>:
						disp7s_update_data_array(str, fryer.basket[i].display.cursor.x, BASKET_DISP_MAX_CHARS_PERBASKET);
    28d4:	44 e0       	ldi	r20, 0x04	; 4
    28d6:	d8 01       	movw	r26, r16
    28d8:	6c 91       	ld	r22, X

000028da <.L44>:
					}
					else
					{
						build_cookCycle_string(&basket_temp[i].cookCycle.time, str);
						disp7s_update_data_array(str, fryer.basket[i].display.cursor.x, BASKET_DISP_MAX_CHARS_PERBASKET);
    28da:	ce 01       	movw	r24, r28
    28dc:	01 96       	adiw	r24, 0x01	; 1
    28de:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

000028e2 <.L23>:
				}
				//
			}
			//local blink - end

			if (mainflag.sysTickMs)
    28e2:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

000028e6 <.Loc.190>:
    28e6:	80 ff       	sbrs	r24, 0
    28e8:	0d c0       	rjmp	.+26     	; 0x2904 <.L21>

000028ea <.Loc.191>:
			{
				//Timeout : Limpiar teclas del basket correspodiente
				//cancela blinking y espera a un user_Start

				if (++fryer.basket[i].cookCycle.editcycle.timerTimeout >= PSMODE_OPERATIVE_EDITCYCLE_TIMERTIMEOUT_K)
    28ea:	d8 01       	movw	r26, r16
    28ec:	1f 96       	adiw	r26, 0x0f	; 15
    28ee:	8d 91       	ld	r24, X+
    28f0:	9d 91       	ld	r25, X+
    28f2:	01 96       	adiw	r24, 0x01	; 1

000028f4 <.Loc.193>:
    28f4:	88 3b       	cpi	r24, 0xB8	; 184
    28f6:	bb e0       	ldi	r27, 0x0B	; 11
    28f8:	9b 07       	cpc	r25, r27
    28fa:	0c f0       	brlt	.+2      	; 0x28fe <L0^A+0x2>

000028fc <L0^A>:
    28fc:	ca c0       	rjmp	.+404    	; 0x2a92 <.L27>
    28fe:	f8 01       	movw	r30, r16
    2900:	87 87       	std	Z+15, r24	; 0x0f
    2902:	90 8b       	std	Z+16, r25	; 0x10

00002904 <.L21>:
					//ikb_key_was_read(fryer.basket[i].kb.sleep);
					//
				}
			}
		}
		if (fryer.basket[i].bf.prepareReturnToKBDefault == 1)//prepare all to return to KBMODE_DEFAULT
    2904:	3e 9c       	mul	r3, r14
    2906:	50 01       	movw	r10, r0
    2908:	3f 9c       	mul	r3, r15
    290a:	b0 0c       	add	r11, r0
    290c:	11 24       	eor	r1, r1
    290e:	f5 01       	movw	r30, r10
    2910:	ec 58       	subi	r30, 0x8C	; 140
    2912:	f8 4f       	sbci	r31, 0xF8	; 248
    2914:	80 81       	ld	r24, Z

00002916 <.Loc.196>:
    2916:	81 ff       	sbrs	r24, 1
    2918:	27 c0       	rjmp	.+78     	; 0x2968 <.L29>

0000291a <.Loc.197>:
		{
			fryer.basket[i].bf.prepareReturnToKBDefault = 0;
    291a:	8d 7f       	andi	r24, 0xFD	; 253
    291c:	80 83       	st	Z, r24

0000291e <.Loc.199>:
			//
			//update eeprom
			//COOKTIME[i] = basket_temp[i].cookCycle.time;//update new cookCycle set-point
			eeprom_update_block((struct _t *)(&basket_temp[i].cookCycle.time), (struct _t *)(&COOKTIME[i]), sizeof(struct _t));
    291e:	42 e0       	ldi	r20, 0x02	; 2
    2920:	50 e0       	ldi	r21, 0x00	; 0
    2922:	b4 01       	movw	r22, r8
    2924:	c6 01       	movw	r24, r12
    2926:	0e 94 49 1b 	call	0x3692	; 0x3692 <eeprom_update_block>

0000292a <.LVL56>:

			//load from eeprom
			fryer.basket[i].cookCycle.time = basket_temp[i].cookCycle.time;
    292a:	f6 01       	movw	r30, r12
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	d8 01       	movw	r26, r16
    2932:	1a 96       	adiw	r26, 0x0a	; 10
    2934:	8d 93       	st	X+, r24
    2936:	9d 93       	st	X+, r25

00002938 <.Loc.202>:


			fryer.basket[i].cookCycle.editcycle.bf.blinkIsActive = 0;
    2938:	f5 01       	movw	r30, r10
    293a:	ed 58       	subi	r30, 0x8D	; 141
    293c:	f8 4f       	sbci	r31, 0xF8	; 248
    293e:	80 81       	ld	r24, Z
    2940:	8e 7f       	andi	r24, 0xFE	; 254
    2942:	80 83       	st	Z, r24

00002944 <.Loc.204>:

			//return to visualizing decrement-timing
			fryer.basket[i].cookCycle.counterTicks = 0x00;//reset counter
    2944:	1d 92       	st	X+, r1
    2946:	1d 92       	st	X+, r1

00002948 <.Loc.206>:
			fryer.basket[i].cookCycle.bf.forceCheckControl = 1;//forzar pase directo para poder visualizar y actuar si es 00:00
    2948:	f5 01       	movw	r30, r10
    294a:	e0 59       	subi	r30, 0x90	; 144
    294c:	f8 4f       	sbci	r31, 0xF8	; 248
    294e:	80 81       	ld	r24, Z
    2950:	82 60       	ori	r24, 0x02	; 2
    2952:	80 83       	st	Z, r24

00002954 <.Loc.208>:
			fryer.basket[i].display.owner = DISPLAY_TIMING;
    2954:	1b 97       	sbiw	r26, 0x0b	; 11
    2956:	1c 92       	st	X, r1

00002958 <.Loc.210>:
			fryer.basket[i].display.bf.print_cookCycle = 1;
    2958:	f5 01       	movw	r30, r10
    295a:	ec 59       	subi	r30, 0x9C	; 156
    295c:	f8 4f       	sbci	r31, 0xF8	; 248
    295e:	80 81       	ld	r24, Z
    2960:	81 60       	ori	r24, 0x01	; 1
    2962:	80 83       	st	Z, r24

00002964 <.Loc.212>:
			//return to kb
			//kbmode_setDefault(&fryer.basket[i].kb);
			fryer.basket[i].kbmode = KBMODE_DEFAULT;
    2964:	16 96       	adiw	r26, 0x06	; 6
    2966:	1c 92       	st	X, r1

00002968 <.L29>:
	for (int i=0; i<BASKET_MAXSIZE; i++)
    2968:	c7 01       	movw	r24, r14
    296a:	01 96       	adiw	r24, 0x01	; 1

0000296c <.Loc.215>:
    296c:	06 5e       	subi	r16, 0xE6	; 230
    296e:	1f 4f       	sbci	r17, 0xFF	; 255
    2970:	ba e1       	ldi	r27, 0x1A	; 26
    2972:	cb 0e       	add	r12, r27
    2974:	d1 1c       	adc	r13, r1
    2976:	e2 e0       	ldi	r30, 0x02	; 2
    2978:	8e 0e       	add	r8, r30
    297a:	91 1c       	adc	r9, r1
    297c:	ee 24       	eor	r14, r14
    297e:	e3 94       	inc	r14
    2980:	f1 2c       	mov	r15, r1
    2982:	02 97       	sbiw	r24, 0x02	; 2
    2984:	09 f0       	breq	.+2      	; 0x2988 <.Loc.216>

00002986 <L0^A>:
    2986:	d5 ce       	rjmp	.-598    	; 0x2732 <.L30>

00002988 <.Loc.216>:
		}


	}
}
    2988:	64 96       	adiw	r28, 0x14	; 20
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	ff 90       	pop	r15
    299e:	ef 90       	pop	r14
    29a0:	df 90       	pop	r13
    29a2:	cf 90       	pop	r12
    29a4:	bf 90       	pop	r11
    29a6:	af 90       	pop	r10
    29a8:	9f 90       	pop	r9
    29aa:	8f 90       	pop	r8
    29ac:	7f 90       	pop	r7
    29ae:	6f 90       	pop	r6
    29b0:	5f 90       	pop	r5
    29b2:	4f 90       	pop	r4
    29b4:	3f 90       	pop	r3
    29b6:	08 95       	ret

000029b8 <.L17>:
					fryer.basket[i].bf.user_startStop = FRYER_COOKCYCLE_USER_STOPPED;
    29b8:	8e 7f       	andi	r24, 0xFE	; 254
    29ba:	80 83       	st	Z, r24

000029bc <.Loc.219>:
					fryer.basket[i].cookCycle.bf.on = 0;
    29bc:	f9 01       	movw	r30, r18
    29be:	80 81       	ld	r24, Z
    29c0:	8e 7f       	andi	r24, 0xFE	; 254
    29c2:	80 83       	st	Z, r24

000029c4 <.Loc.221>:
					eeprom_read_block((struct _t *)(&fryer.basket[i].cookCycle.time), (struct _t *)(&COOKTIME[i]), sizeof(struct _t));
    29c4:	28 01       	movw	r4, r16
    29c6:	fa e0       	ldi	r31, 0x0A	; 10
    29c8:	4f 0e       	add	r4, r31
    29ca:	51 1c       	adc	r5, r1

000029cc <.Loc.223>:
    29cc:	42 e0       	ldi	r20, 0x02	; 2
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	b4 01       	movw	r22, r8
    29d2:	c2 01       	movw	r24, r4
    29d4:	0e 94 39 1b 	call	0x3672	; 0x3672 <eeprom_read_block>

000029d8 <.LVL59>:
					fryer.basket[i].cookCycle.counterTicks = 0x00;
    29d8:	d8 01       	movw	r26, r16
    29da:	1c 96       	adiw	r26, 0x0c	; 12
    29dc:	1d 92       	st	X+, r1
    29de:	1d 92       	st	X+, r1

000029e0 <.Loc.226>:
					fryer.basket[i].cookCycle.bf.forceCheckControl = 1;
    29e0:	f5 01       	movw	r30, r10
    29e2:	80 81       	ld	r24, Z
    29e4:	82 60       	ori	r24, 0x02	; 2
    29e6:	80 83       	st	Z, r24

000029e8 <.Loc.228>:
					fryer.basket[i].display.owner = DISPLAY_TIMING;
    29e8:	1b 97       	sbiw	r26, 0x0b	; 11
    29ea:	1c 92       	st	X, r1

000029ec <.Loc.230>:
					fryer.basket[i].display.bf.print_cookCycle = 1;
    29ec:	f3 01       	movw	r30, r6
    29ee:	ec 59       	subi	r30, 0x9C	; 156
    29f0:	f8 4f       	sbci	r31, 0xF8	; 248
    29f2:	80 81       	ld	r24, Z
    29f4:	81 60       	ori	r24, 0x01	; 1
    29f6:	80 83       	st	Z, r24

000029f8 <.Loc.232>:
					fryer.basket[i].cookCycle.bf.blinkDone = 0;
    29f8:	d5 01       	movw	r26, r10
    29fa:	8c 91       	ld	r24, X
    29fc:	8b 7f       	andi	r24, 0xFB	; 251
    29fe:	8c 93       	st	X, r24

00002a00 <.Loc.234>:
					if ((fryer.basket[i].display.bf.print_cookCycle == 1) && (fryer.viewmode == FRYER_VIEWMODE_COOK))
    2a00:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <fryer+0x35>
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	69 f4       	brne	.+26     	; 0x2a22 <.L18>

00002a08 <.Loc.236>:
						build_cookCycle_string(&fryer.basket[i].cookCycle.time, str);
    2a08:	be 01       	movw	r22, r28
    2a0a:	6f 5f       	subi	r22, 0xFF	; 255
    2a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0e:	c2 01       	movw	r24, r4
    2a10:	0e 94 45 12 	call	0x248a	; 0x248a <build_cookCycle_string>

00002a14 <.LVL60>:
						disp7s_update_data_array(str, fryer.basket[i].display.cursor.x, BASKET_DISP_MAX_CHARS_PERBASKET);
    2a14:	44 e0       	ldi	r20, 0x04	; 4
    2a16:	f8 01       	movw	r30, r16
    2a18:	60 81       	ld	r22, Z
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	01 96       	adiw	r24, 0x01	; 1
    2a1e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00002a22 <.L18>:
					indicator_off();
    2a22:	0e 94 1f 06 	call	0xc3e	; 0xc3e <indicator_off>

00002a26 <.LVL62>:
    2a26:	38 cf       	rjmp	.-400    	; 0x2898 <.L16>

00002a28 <.L14>:
		else if (fryer.basket[i].kbmode == KBMODE_EDIT_COOKCYCLE)
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <.Loc.241>

00002a2a <L0^A>:
    2a2a:	36 cf       	rjmp	.-404    	; 0x2898 <.L16>

00002a2c <.Loc.241>:
			if (ikb_key_is_ready2read(fryer.basket[i].kb.startStop ) )
    2a2c:	d8 01       	movw	r26, r16
    2a2e:	14 96       	adiw	r26, 0x04	; 4
    2a30:	8c 91       	ld	r24, X
    2a32:	0e 94 47 07 	call	0xe8e	; 0xe8e <ikb_key_is_ready2read>

00002a36 <.LVL63>:
    2a36:	81 15       	cp	r24, r1
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <.Loc.244>

00002a3a <L0^A>:
    2a3a:	2e cf       	rjmp	.-420    	; 0x2898 <.L16>

00002a3c <.Loc.244>:
				ikb_key_was_read(fryer.basket[i].kb.startStop);
    2a3c:	f8 01       	movw	r30, r16
    2a3e:	84 81       	ldd	r24, Z+4	; 0x04
    2a40:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ikb_key_was_read>

00002a44 <.LVL64>:
				indicatorTimed_setKSysTickTime_ms(1000/SYSTICK_MS);
    2a44:	88 ee       	ldi	r24, 0xE8	; 232
    2a46:	93 e0       	ldi	r25, 0x03	; 3
    2a48:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

00002a4c <.LVL65>:
				indicatorTimed_run();
    2a4c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

00002a50 <.LVL66>:
				fryer.basket[i].bf.user_startStop = FRYER_COOKCYCLE_USER_STARTED;
    2a50:	ee 27       	eor	r30, r30
    2a52:	ff 27       	eor	r31, r31
    2a54:	ee 19       	sub	r30, r14
    2a56:	ff 09       	sbc	r31, r15
    2a58:	ea 71       	andi	r30, 0x1A	; 26
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	ee 59       	subi	r30, 0x9E	; 158
    2a5e:	f8 4f       	sbci	r31, 0xF8	; 248

00002a60 <.Loc.249>:
    2a60:	82 89       	ldd	r24, Z+18	; 0x12
    2a62:	83 60       	ori	r24, 0x03	; 3
    2a64:	82 8b       	std	Z+18, r24	; 0x12

00002a66 <.Loc.250>:
				fryer.basket[i].cookCycle.bf.on = 1;
    2a66:	8a e1       	ldi	r24, 0x1A	; 26
    2a68:	8e 9d       	mul	r24, r14
    2a6a:	f0 01       	movw	r30, r0
    2a6c:	8f 9d       	mul	r24, r15
    2a6e:	f0 0d       	add	r31, r0
    2a70:	11 24       	eor	r1, r1
    2a72:	e0 59       	subi	r30, 0x90	; 144
    2a74:	f8 4f       	sbci	r31, 0xF8	; 248
    2a76:	80 81       	ld	r24, Z
    2a78:	81 60       	ori	r24, 0x01	; 1
    2a7a:	80 83       	st	Z, r24
    2a7c:	0d cf       	rjmp	.-486    	; 0x2898 <.L16>

00002a7e <.L25>:
						build_cookCycle_string(&basket_temp[i].cookCycle.time, str);
    2a7e:	be 01       	movw	r22, r28
    2a80:	6f 5f       	subi	r22, 0xFF	; 255
    2a82:	7f 4f       	sbci	r23, 0xFF	; 255
    2a84:	c6 01       	movw	r24, r12
    2a86:	0e 94 45 12 	call	0x248a	; 0x248a <build_cookCycle_string>

00002a8a <.LVL67>:
						disp7s_update_data_array(str, fryer.basket[i].display.cursor.x, BASKET_DISP_MAX_CHARS_PERBASKET);
    2a8a:	44 e0       	ldi	r20, 0x04	; 4
    2a8c:	f8 01       	movw	r30, r16
    2a8e:	60 81       	ld	r22, Z
    2a90:	24 cf       	rjmp	.-440    	; 0x28da <.L44>

00002a92 <.L27>:
					fryer.basket[i].cookCycle.editcycle.timerTimeout = 0x0000;
    2a92:	d8 01       	movw	r26, r16
    2a94:	1f 96       	adiw	r26, 0x0f	; 15
    2a96:	1d 92       	st	X+, r1
    2a98:	1d 92       	st	X+, r1

00002a9a <.Loc.256>:
					fryer.basket[i].bf.prepareReturnToKBDefault = 1;
    2a9a:	8a e1       	ldi	r24, 0x1A	; 26
    2a9c:	8e 9d       	mul	r24, r14
    2a9e:	90 01       	movw	r18, r0
    2aa0:	8f 9d       	mul	r24, r15
    2aa2:	30 0d       	add	r19, r0
    2aa4:	11 24       	eor	r1, r1
    2aa6:	f9 01       	movw	r30, r18
    2aa8:	ec 58       	subi	r30, 0x8C	; 140
    2aaa:	f8 4f       	sbci	r31, 0xF8	; 248
    2aac:	80 81       	ld	r24, Z
    2aae:	82 60       	ori	r24, 0x02	; 2
    2ab0:	80 83       	st	Z, r24

00002ab2 <.Loc.258>:
					if (fryer.basket[i].cookCycle.bf.on == 1)//osea en caliente se cambio el setpoint
    2ab2:	20 59       	subi	r18, 0x90	; 144
    2ab4:	38 4f       	sbci	r19, 0xF8	; 248
    2ab6:	d9 01       	movw	r26, r18
    2ab8:	9c 91       	ld	r25, X

00002aba <.Loc.260>:
    2aba:	90 ff       	sbrs	r25, 0
    2abc:	08 c0       	rjmp	.+16     	; 0x2ace <.L28>

00002abe <.Loc.261>:
						cookCycle_hotUpdate(&basket_temp[i].cookCycle.time, &COOKTIME[i], &fryer.basket[i].cookCycle.time);
    2abe:	a8 01       	movw	r20, r16
    2ac0:	46 5f       	subi	r20, 0xF6	; 246
    2ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac4:	b4 01       	movw	r22, r8
    2ac6:	c6 01       	movw	r24, r12
    2ac8:	0e 94 87 12 	call	0x250e	; 0x250e <cookCycle_hotUpdate>

00002acc <.LVL68>:
    2acc:	1b cf       	rjmp	.-458    	; 0x2904 <.L21>

00002ace <.L28>:
						fryer.basket[i].bf.user_startStop = FRYER_COOKCYCLE_USER_STOPPED;
    2ace:	8e 7f       	andi	r24, 0xFE	; 254
    2ad0:	80 83       	st	Z, r24
    2ad2:	18 cf       	rjmp	.-464    	; 0x2904 <.L21>

00002ad4 <p2>:
void p2(void)
{
    2ad4:	cf 92       	push	r12
    2ad6:	df 92       	push	r13
    2ad8:	ef 92       	push	r14
    2ada:	ff 92       	push	r15
    2adc:	0f 93       	push	r16
    2ade:	1f 93       	push	r17
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29

00002ae4 <.LBB7>:

	//process
	for (int i=0; i<BASKET_MAXSIZE; i++)
    2ae4:	c2 e6       	ldi	r28, 0x62	; 98
    2ae6:	d7 e0       	ldi	r29, 0x07	; 7

00002ae8 <.Loc.268>:
    2ae8:	00 e0       	ldi	r16, 0x00	; 0
    2aea:	10 e0       	ldi	r17, 0x00	; 0

00002aec <.L55>:
	{
		blink_set(&fryer.basket[i].blink);
    2aec:	ce 01       	movw	r24, r28
    2aee:	43 96       	adiw	r24, 0x13	; 19
    2af0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <blink_set>

00002af4 <.LVL71>:

		if (fryer.basket[i].cookCycle.bf.on == 1)
    2af4:	4a e1       	ldi	r20, 0x1A	; 26
    2af6:	40 9f       	mul	r20, r16
    2af8:	70 01       	movw	r14, r0
    2afa:	41 9f       	mul	r20, r17
    2afc:	f0 0c       	add	r15, r0
    2afe:	11 24       	eor	r1, r1
    2b00:	c7 01       	movw	r24, r14
    2b02:	80 59       	subi	r24, 0x90	; 144
    2b04:	98 4f       	sbci	r25, 0xF8	; 248
    2b06:	6c 01       	movw	r12, r24
    2b08:	fc 01       	movw	r30, r24
    2b0a:	80 81       	ld	r24, Z

00002b0c <.Loc.272>:
    2b0c:	80 ff       	sbrs	r24, 0
    2b0e:	19 c0       	rjmp	.+50     	; 0x2b42 <.L47>

00002b10 <.Loc.273>:
		{
			if (mainflag.sysTickMs)
    2b10:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

00002b14 <.Loc.275>:
    2b14:	80 ff       	sbrs	r24, 0
    2b16:	0a c0       	rjmp	.+20     	; 0x2b2c <.L48>

00002b18 <.Loc.276>:
			{
				if (++fryer.basket[i].cookCycle.counterTicks == (1000/SYSTICK_MS) )//update cada 1s
    2b18:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b1c:	9c 01       	movw	r18, r24
    2b1e:	2f 5f       	subi	r18, 0xFF	; 255
    2b20:	3f 4f       	sbci	r19, 0xFF	; 255

00002b22 <.Loc.278>:
    2b22:	87 3e       	cpi	r24, 0xE7	; 231
    2b24:	93 40       	sbci	r25, 0x03	; 3
    2b26:	e9 f0       	breq	.+58     	; 0x2b62 <.L49>
    2b28:	2c 87       	std	Y+12, r18	; 0x0c
    2b2a:	3d 87       	std	Y+13, r19	; 0x0d

00002b2c <.L48>:
					}
					//
				}
			}
			//
			if (fryer.basket[i].cookCycle.bf.forceCheckControl == 1)
    2b2c:	8a e1       	ldi	r24, 0x1A	; 26
    2b2e:	80 9f       	mul	r24, r16
    2b30:	f0 01       	movw	r30, r0
    2b32:	81 9f       	mul	r24, r17
    2b34:	f0 0d       	add	r31, r0
    2b36:	11 24       	eor	r1, r1
    2b38:	e0 59       	subi	r30, 0x90	; 144
    2b3a:	f8 4f       	sbci	r31, 0xF8	; 248
    2b3c:	80 81       	ld	r24, Z

00002b3e <.Loc.281>:
    2b3e:	81 fd       	sbrc	r24, 1
    2b40:	23 c0       	rjmp	.+70     	; 0x2b88 <.L50>

00002b42 <.L47>:
	for (int i=0; i<BASKET_MAXSIZE; i++)
    2b42:	c8 01       	movw	r24, r16
    2b44:	01 96       	adiw	r24, 0x01	; 1

00002b46 <.Loc.283>:
    2b46:	6a 96       	adiw	r28, 0x1a	; 26
    2b48:	01 e0       	ldi	r16, 0x01	; 1
    2b4a:	10 e0       	ldi	r17, 0x00	; 0
    2b4c:	02 97       	sbiw	r24, 0x02	; 2
    2b4e:	71 f6       	brne	.-100    	; 0x2aec <.L55>

00002b50 <.Loc.284>:
		}



	}
}
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	1f 91       	pop	r17
    2b56:	0f 91       	pop	r16
    2b58:	ff 90       	pop	r15
    2b5a:	ef 90       	pop	r14
    2b5c:	df 90       	pop	r13
    2b5e:	cf 90       	pop	r12
    2b60:	08 95       	ret

00002b62 <.L49>:
					fryer.basket[i].cookCycle.counterTicks = 0x00;
    2b62:	1c 86       	std	Y+12, r1	; 0x0c
    2b64:	1d 86       	std	Y+13, r1	; 0x0d

00002b66 <.Loc.287>:
					time_dec(&fryer.basket[i].cookCycle.time);
    2b66:	ce 01       	movw	r24, r28
    2b68:	0a 96       	adiw	r24, 0x0a	; 10
    2b6a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <time_dec>

00002b6e <.LVL74>:
					fryer.basket[i].cookCycle.bf.forceCheckControl = 1;
    2b6e:	f6 01       	movw	r30, r12
    2b70:	80 81       	ld	r24, Z
    2b72:	82 60       	ori	r24, 0x02	; 2
    2b74:	80 83       	st	Z, r24

00002b76 <.Loc.290>:
					if (fryer.basket[i].display.owner == DISPLAY_TIMING)
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	81 11       	cpse	r24, r1
    2b7a:	06 c0       	rjmp	.+12     	; 0x2b88 <.L50>

00002b7c <.Loc.292>:
						fryer.basket[i].display.bf.print_cookCycle = 1;
    2b7c:	f7 01       	movw	r30, r14
    2b7e:	ec 59       	subi	r30, 0x9C	; 156
    2b80:	f8 4f       	sbci	r31, 0xF8	; 248
    2b82:	80 81       	ld	r24, Z
    2b84:	81 60       	ori	r24, 0x01	; 1
    2b86:	80 83       	st	Z, r24

00002b88 <.L50>:
				if (fryer.basket[i].cookCycle.time.sec == 0)
    2b88:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b8a:	81 11       	cpse	r24, r1
    2b8c:	34 c0       	rjmp	.+104    	; 0x2bf6 <.L52>

00002b8e <.Loc.297>:
					if (fryer.basket[i].cookCycle.time.min == 0)
    2b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b90:	81 11       	cpse	r24, r1
    2b92:	31 c0       	rjmp	.+98     	; 0x2bf6 <.L52>

00002b94 <.LBB8>:
						fryer.basket[i].cookCycle.bf.on = 0;
    2b94:	ea e1       	ldi	r30, 0x1A	; 26
    2b96:	e0 9f       	mul	r30, r16
    2b98:	d0 01       	movw	r26, r0
    2b9a:	e1 9f       	mul	r30, r17
    2b9c:	b0 0d       	add	r27, r0
    2b9e:	11 24       	eor	r1, r1
    2ba0:	a0 59       	subi	r26, 0x90	; 144
    2ba2:	b8 4f       	sbci	r27, 0xF8	; 248
    2ba4:	8c 91       	ld	r24, X
    2ba6:	8e 7f       	andi	r24, 0xFE	; 254
    2ba8:	8c 93       	st	X, r24

00002baa <.LVL75>:
												uint8_t i_next = ( (i+1) & 0x01);
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	80 0f       	add	r24, r16

00002bae <.Loc.304>:
    2bae:	81 70       	andi	r24, 0x01	; 1

00002bb0 <.Loc.305>:
												if (fryer.basket[i_next].cookCycle.bf.blinkDone == 1)// quiere decir que
    2bb0:	e8 9f       	mul	r30, r24
    2bb2:	f0 01       	movw	r30, r0
    2bb4:	11 24       	eor	r1, r1
    2bb6:	df 01       	movw	r26, r30
    2bb8:	a0 59       	subi	r26, 0x90	; 144
    2bba:	b8 4f       	sbci	r27, 0xF8	; 248
    2bbc:	8c 91       	ld	r24, X

00002bbe <.Loc.306>:
    2bbe:	82 ff       	sbrs	r24, 2
    2bc0:	26 c0       	rjmp	.+76     	; 0x2c0e <.L53>

00002bc2 <.Loc.307>:
													fryer.basket[i].blink = fryer.basket[i_next].blink;
    2bc2:	eb 58       	subi	r30, 0x8B	; 139
    2bc4:	f8 4f       	sbci	r31, 0xF8	; 248
    2bc6:	87 e0       	ldi	r24, 0x07	; 7
    2bc8:	de 01       	movw	r26, r28
    2bca:	53 96       	adiw	r26, 0x13	; 19

00002bcc <.L0^B1>:
    2bcc:	01 90       	ld	r0, Z+
    2bce:	0d 92       	st	X+, r0
    2bd0:	8a 95       	dec	r24
    2bd2:	e1 f7       	brne	.-8      	; 0x2bcc <.L0^B1>

00002bd4 <.L54>:
						fryer.basket[i].display.bf.print_cookCycle = 0;
    2bd4:	8a e1       	ldi	r24, 0x1A	; 26
    2bd6:	80 9f       	mul	r24, r16
    2bd8:	f0 01       	movw	r30, r0
    2bda:	81 9f       	mul	r24, r17
    2bdc:	f0 0d       	add	r31, r0
    2bde:	11 24       	eor	r1, r1
    2be0:	df 01       	movw	r26, r30
    2be2:	ac 59       	subi	r26, 0x9C	; 156
    2be4:	b8 4f       	sbci	r27, 0xF8	; 248
    2be6:	8c 91       	ld	r24, X
    2be8:	8e 7f       	andi	r24, 0xFE	; 254
    2bea:	8c 93       	st	X, r24

00002bec <.Loc.311>:
						fryer.basket[i].cookCycle.bf.blinkDone = 1;
    2bec:	e0 59       	subi	r30, 0x90	; 144
    2bee:	f8 4f       	sbci	r31, 0xF8	; 248
    2bf0:	80 81       	ld	r24, Z
    2bf2:	84 60       	ori	r24, 0x04	; 4
    2bf4:	80 83       	st	Z, r24

00002bf6 <.L52>:
				fryer.basket[i].cookCycle.bf.forceCheckControl = 0x00;
    2bf6:	8a e1       	ldi	r24, 0x1A	; 26
    2bf8:	80 9f       	mul	r24, r16
    2bfa:	f0 01       	movw	r30, r0
    2bfc:	81 9f       	mul	r24, r17
    2bfe:	f0 0d       	add	r31, r0
    2c00:	11 24       	eor	r1, r1
    2c02:	e0 59       	subi	r30, 0x90	; 144
    2c04:	f8 4f       	sbci	r31, 0xF8	; 248
    2c06:	80 81       	ld	r24, Z
    2c08:	8d 7f       	andi	r24, 0xFD	; 253
    2c0a:	80 83       	st	Z, r24
    2c0c:	9a cf       	rjmp	.-204    	; 0x2b42 <.L47>

00002c0e <.L53>:
													blink_reset(BLINK_TOGGLE_SET_TEXT);
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <blink_reset>

00002c14 <.LVL78>:
    2c14:	df cf       	rjmp	.-66     	; 0x2bd4 <.L54>

00002c16 <p3>:
void p3(void)
{
    2c16:	cf 92       	push	r12
    2c18:	df 92       	push	r13
    2c1a:	ef 92       	push	r14
    2c1c:	ff 92       	push	r15
    2c1e:	0f 93       	push	r16
    2c20:	1f 93       	push	r17
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	64 97       	sbiw	r28, 0x14	; 20
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61

00002c36 <.LBB11>:
	unsigned char str[20];
	for (int i=0; i<BASKET_MAXSIZE; i++)
    2c36:	02 e6       	ldi	r16, 0x62	; 98
    2c38:	17 e0       	ldi	r17, 0x07	; 7

00002c3a <.Loc.322>:
    2c3a:	e1 2c       	mov	r14, r1
    2c3c:	f1 2c       	mov	r15, r1

00002c3e <.L71>:
	{
		blink_set(&fryer.basket[i].blink);
    2c3e:	c8 01       	movw	r24, r16
    2c40:	43 96       	adiw	r24, 0x13	; 19
    2c42:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <blink_set>

00002c46 <.LVL81>:

		//print timing decrement mm:ss
		//if (fryer.basket[i].display.owner == DISPLAY_TIMING)
		if ((fryer.basket[i].display.owner == DISPLAY_TIMING) && (fryer.viewmode == FRYER_VIEWMODE_COOK))
    2c46:	f8 01       	movw	r30, r16
    2c48:	83 81       	ldd	r24, Z+3	; 0x03
    2c4a:	81 11       	cpse	r24, r1
    2c4c:	46 c0       	rjmp	.+140    	; 0x2cda <.L67>

00002c4e <.Loc.326>:
    2c4e:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <fryer+0x35>
    2c52:	81 30       	cpi	r24, 0x01	; 1
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <.Loc.327>

00002c56 <L0^A>:
    2c56:	41 c0       	rjmp	.+130    	; 0x2cda <.L67>

00002c58 <.Loc.327>:
		{
			if (fryer.basket[i].display.bf.print_cookCycle == 1)
    2c58:	2a e1       	ldi	r18, 0x1A	; 26
    2c5a:	2e 9d       	mul	r18, r14
    2c5c:	c0 01       	movw	r24, r0
    2c5e:	2f 9d       	mul	r18, r15
    2c60:	90 0d       	add	r25, r0
    2c62:	11 24       	eor	r1, r1
    2c64:	9c 01       	movw	r18, r24
    2c66:	2c 59       	subi	r18, 0x9C	; 156
    2c68:	38 4f       	sbci	r19, 0xF8	; 248
    2c6a:	69 01       	movw	r12, r18
    2c6c:	f9 01       	movw	r30, r18
    2c6e:	80 81       	ld	r24, Z

00002c70 <.Loc.329>:
    2c70:	80 ff       	sbrs	r24, 0
    2c72:	12 c0       	rjmp	.+36     	; 0x2c98 <.L69>

00002c74 <.Loc.330>:
			{
				build_cookCycle_string(&fryer.basket[i].cookCycle.time, str);
    2c74:	be 01       	movw	r22, r28
    2c76:	6f 5f       	subi	r22, 0xFF	; 255
    2c78:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7a:	c8 01       	movw	r24, r16
    2c7c:	0a 96       	adiw	r24, 0x0a	; 10
    2c7e:	0e 94 45 12 	call	0x248a	; 0x248a <build_cookCycle_string>

00002c82 <.LVL82>:

				disp7s_update_data_array(str, fryer.basket[i].display.cursor.x, BASKET_DISP_MAX_CHARS_PERBASKET);
    2c82:	44 e0       	ldi	r20, 0x04	; 4
    2c84:	f8 01       	movw	r30, r16
    2c86:	60 81       	ld	r22, Z
    2c88:	ce 01       	movw	r24, r28
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00002c90 <.LVL83>:
				//
				fryer.basket[i].display.bf.print_cookCycle = 0;
    2c90:	f6 01       	movw	r30, r12
    2c92:	80 81       	ld	r24, Z
    2c94:	8e 7f       	andi	r24, 0xFE	; 254
    2c96:	80 83       	st	Z, r24

00002c98 <.L69>:
			}
			//blink
			if (fryer.basket[i].cookCycle.bf.blinkDone == 1)
    2c98:	2a e1       	ldi	r18, 0x1A	; 26
    2c9a:	2e 9d       	mul	r18, r14
    2c9c:	c0 01       	movw	r24, r0
    2c9e:	2f 9d       	mul	r18, r15
    2ca0:	90 0d       	add	r25, r0
    2ca2:	11 24       	eor	r1, r1
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	e0 59       	subi	r30, 0x90	; 144
    2ca8:	f8 4f       	sbci	r31, 0xF8	; 248
    2caa:	20 81       	ld	r18, Z

00002cac <.Loc.336>:
    2cac:	22 ff       	sbrs	r18, 2
    2cae:	15 c0       	rjmp	.+42     	; 0x2cda <.L67>

00002cb0 <.Loc.337>:
			{
				if (fryer.basket[i].blink.bf.toggle == BLINK_TOGGLE_SET_BLANK)
    2cb0:	87 58       	subi	r24, 0x87	; 135
    2cb2:	98 4f       	sbci	r25, 0xF8	; 248
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	80 81       	ld	r24, Z

00002cb8 <.Loc.339>:
    2cb8:	80 fd       	sbrc	r24, 0
    2cba:	28 c0       	rjmp	.+80     	; 0x2d0c <.L70>

00002cbc <.Loc.340>:
				{
					disp7s_blank_displays(str,0,BASKET_DISP_MAX_CHARS_PERBASKET);
    2cbc:	44 e0       	ldi	r20, 0x04	; 4
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	ce 01       	movw	r24, r28
    2cc2:	01 96       	adiw	r24, 0x01	; 1
    2cc4:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <disp7s_blank_displays>

00002cc8 <.LVL84>:
					disp7s_update_data_array(str, fryer.basket[i].display.cursor.x, BASKET_DISP_MAX_CHARS_PERBASKET);
    2cc8:	44 e0       	ldi	r20, 0x04	; 4
    2cca:	f8 01       	movw	r30, r16
    2ccc:	60 81       	ld	r22, Z
    2cce:	ce 01       	movw	r24, r28
    2cd0:	01 96       	adiw	r24, 0x01	; 1
    2cd2:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00002cd6 <.LVL85>:

					//added agosto 2023
					indicator_on();
    2cd6:	0e 94 10 06 	call	0xc20	; 0xc20 <indicator_on>

00002cda <.L67>:
	for (int i=0; i<BASKET_MAXSIZE; i++)
    2cda:	c7 01       	movw	r24, r14
    2cdc:	01 96       	adiw	r24, 0x01	; 1

00002cde <.Loc.344>:
    2cde:	06 5e       	subi	r16, 0xE6	; 230
    2ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce2:	ee 24       	eor	r14, r14
    2ce4:	e3 94       	inc	r14
    2ce6:	f1 2c       	mov	r15, r1
    2ce8:	02 97       	sbiw	r24, 0x02	; 2
    2cea:	09 f0       	breq	.+2      	; 0x2cee <.Loc.345>

00002cec <L0^A>:
    2cec:	a8 cf       	rjmp	.-176    	; 0x2c3e <.L71>

00002cee <.Loc.345>:
					indicator_off();
				}
			}
		}
	}
}
    2cee:	64 96       	adiw	r28, 0x14	; 20
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	cd bf       	out	0x3d, r28	; 61
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	1f 91       	pop	r17
    2d00:	0f 91       	pop	r16
    2d02:	ff 90       	pop	r15
    2d04:	ef 90       	pop	r14
    2d06:	df 90       	pop	r13
    2d08:	cf 90       	pop	r12
    2d0a:	08 95       	ret

00002d0c <.L70>:
					strncpy(str,DIPS7S_MSG_donE,BASKET_DISP_MAX_CHARS_PERBASKET);
    2d0c:	44 e0       	ldi	r20, 0x04	; 4
    2d0e:	50 e0       	ldi	r21, 0x00	; 0
    2d10:	65 ec       	ldi	r22, 0xC5	; 197
    2d12:	74 e0       	ldi	r23, 0x04	; 4
    2d14:	ce 01       	movw	r24, r28
    2d16:	01 96       	adiw	r24, 0x01	; 1
    2d18:	0e 94 21 1b 	call	0x3642	; 0x3642 <strncpy>

00002d1c <.LVL89>:
					disp7s_update_data_array(str, fryer.basket[i].display.cursor.x, BASKET_DISP_MAX_CHARS_PERBASKET);
    2d1c:	44 e0       	ldi	r20, 0x04	; 4
    2d1e:	f8 01       	movw	r30, r16
    2d20:	60 81       	ld	r22, Z
    2d22:	ce 01       	movw	r24, r28
    2d24:	01 96       	adiw	r24, 0x01	; 1
    2d26:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00002d2a <.LVL90>:
					indicator_off();
    2d2a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <indicator_off>

00002d2e <.LVL91>:
    2d2e:	d5 cf       	rjmp	.-86     	; 0x2cda <.L67>

00002d30 <psmode_operative>:

void psmode_operative(void)
{
	if (fryer.ps_operative.sm0 == 0)
    2d30:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <fryer+0x37>
    2d34:	81 11       	cpse	r24, r1
    2d36:	07 c0       	rjmp	.+14     	; 0x2d46 <.L74>

00002d38 <.Loc.352>:
	{
		psmode_operative_init();
    2d38:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <psmode_operative_init>

00002d3c <.LVL92>:
		fryer.ps_operative.sm0++;
    2d3c:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <fryer+0x37>
    2d40:	8f 5f       	subi	r24, 0xFF	; 255
    2d42:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <fryer+0x37>

00002d46 <.L74>:
	}


	if (fryer.viewmode == FRYER_VIEWMODE_COOK)
    2d46:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <fryer+0x35>
    2d4a:	81 30       	cpi	r24, 0x01	; 1
    2d4c:	11 f4       	brne	.+4      	; 0x2d52 <.L75>

00002d4e <.Loc.357>:
	{
		p1();
    2d4e:	0e 94 72 13 	call	0x26e4	; 0x26e4 <p1>

00002d52 <.L75>:
	}

	p2();
    2d52:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <p2>

00002d56 <.LVL94>:

	if (fryer.viewmode == FRYER_VIEWMODE_COOK)
    2d56:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <fryer+0x35>
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	c1 f4       	brne	.+48     	; 0x2d8e <.L73>

00002d5e <.Loc.361>:
	{
		p3();
    2d5e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <p3>

00002d62 <.LVL95>:
	}

	if (fryer.viewmode == FRYER_VIEWMODE_COOK)
    2d62:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <fryer+0x35>
    2d66:	81 30       	cpi	r24, 0x01	; 1
    2d68:	91 f4       	brne	.+36     	; 0x2d8e <.L73>

00002d6a <.LBB13>:
	{
		for (int i=0; i<BASKET_MAXSIZE; i++)
		{
			blink_set(&fryer.basket[i].blink);
    2d6a:	85 e7       	ldi	r24, 0x75	; 117
    2d6c:	97 e0       	ldi	r25, 0x07	; 7
    2d6e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <blink_set>

00002d72 <.LVL97>:
			//
			//+++++++++++++++++++++++++++++++++++++++++++++++++
			//es necesario que este dentro del for() xq se cambia el puntero
			//de la estructura correspondiente a cada canastilla
			if (mainflag.sysTickMs)
    2d72:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

00002d76 <.Loc.367>:
    2d76:	80 fd       	sbrc	r24, 0

00002d78 <.Loc.368>:
			{
				blink_timing();
    2d78:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <blink_timing>

00002d7c <.LVL98>:
			blink_set(&fryer.basket[i].blink);
    2d7c:	8f e8       	ldi	r24, 0x8F	; 143
    2d7e:	97 e0       	ldi	r25, 0x07	; 7
    2d80:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <blink_set>

00002d84 <.LVL99>:
			if (mainflag.sysTickMs)
    2d84:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

00002d88 <.Loc.374>:
    2d88:	80 fd       	sbrc	r24, 0

00002d8a <.Loc.375>:
				blink_timing();
    2d8a:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <blink_timing>

00002d8e <.L73>:
			indicator_setKSysTickTime_ms(75/SYSTICK_MS);
			indicator_On();
		}
	}
	*/
}
    2d8e:	08 95       	ret

00002d90 <psmode_program>:
int blinkIsActive=0;



int8_t psmode_program(void)
{
    2d90:	0f 93       	push	r16
    2d92:	1f 93       	push	r17
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	2a 97       	sbiw	r28, 0x0a	; 10
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61

00002da8 <.LVL0>:
	char codret = 0;
	unsigned char str[10];
	//
	static struct _blink blink;
	blink_set(&blink);
    2da8:	83 ed       	ldi	r24, 0xD3	; 211
    2daa:	97 e0       	ldi	r25, 0x07	; 7
    2dac:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <blink_set>

00002db0 <.LVL1>:
	//

	//fryer.ps_program.sm0 avanza por la tecla e internamente
	if (fryer.ps_program.sm0 == 0)
    2db0:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <fryer+0x36>

00002db4 <.Loc.7>:
    2db4:	81 30       	cpi	r24, 0x01	; 1
    2db6:	08 f0       	brcs	.+2      	; 0x2dba <.LBB2>

00002db8 <L0^A>:
    2db8:	72 c0       	rjmp	.+228    	; 0x2e9e <.L2>

00002dba <.LBB2>:
	{
		struct _key_prop key_prop = { 0 };
		key_prop = propEmpty;
    2dba:	86 e0       	ldi	r24, 0x06	; 6
    2dbc:	ea e8       	ldi	r30, 0x8A	; 138
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	de 01       	movw	r26, r28
    2dc2:	11 96       	adiw	r26, 0x01	; 1

00002dc4 <.L0^B1>:
    2dc4:	01 90       	ld	r0, Z+
    2dc6:	0d 92       	st	X+, r0
    2dc8:	8a 95       	dec	r24
    2dca:	e1 f7       	brne	.-8      	; 0x2dc4 <.L0^B1>

00002dcc <.Loc.11>:
		key_prop.uFlag.f.onKeyPressed = 1;
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	81 60       	ori	r24, 0x01	; 1
    2dd0:	89 83       	std	Y+1, r24	; 0x01

00002dd2 <.LBB3>:
		for (int i=0; i<BASKET_MAXSIZE; i++)
    2dd2:	02 e6       	ldi	r16, 0x62	; 98
    2dd4:	17 e0       	ldi	r17, 0x07	; 7

00002dd6 <.L3>:
		{
			ikb_setKeyProp(fryer.basket[i].kb.program ,key_prop);//
    2dd6:	29 81       	ldd	r18, Y+1	; 0x01
    2dd8:	3a 81       	ldd	r19, Y+2	; 0x02
    2dda:	4b 81       	ldd	r20, Y+3	; 0x03
    2ddc:	5c 81       	ldd	r21, Y+4	; 0x04
    2dde:	6d 81       	ldd	r22, Y+5	; 0x05
    2de0:	7e 81       	ldd	r23, Y+6	; 0x06
    2de2:	f8 01       	movw	r30, r16
    2de4:	80 85       	ldd	r24, Z+8	; 0x08
    2de6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <ikb_setKeyProp>

00002dea <.LVL4>:
		for (int i=0; i<BASKET_MAXSIZE; i++)
    2dea:	06 5e       	subi	r16, 0xE6	; 230
    2dec:	1f 4f       	sbci	r17, 0xFF	; 255
    2dee:	f7 e0       	ldi	r31, 0x07	; 7
    2df0:	06 39       	cpi	r16, 0x96	; 150
    2df2:	1f 07       	cpc	r17, r31
    2df4:	81 f7       	brne	.-32     	; 0x2dd6 <.L3>

00002df6 <.LBE3>:
		}
//		lcdan_clear();

		fryer.ps_program.sm0++;
    2df6:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <fryer+0x36>
    2dfa:	8f 5f       	subi	r24, 0xFF	; 255
    2dfc:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <fryer+0x36>

00002e00 <.Loc.21>:
		//
		blink.timerBlink_K = PSMODE_PROGRAM_BLINK_TIMER_KMAX;
    2e00:	80 e9       	ldi	r24, 0x90	; 144
    2e02:	91 e0       	ldi	r25, 0x01	; 1
    2e04:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <blink.0+0x2>
    2e08:	90 93 d6 07 	sts	0x07D6, r25	; 0x8007d6 <blink.0+0x3>

00002e0c <.L4>:
			}
		}
	}

	//--------------------------------------------
	if (blinkIsActive)
    2e0c:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <blinkIsActive>
    2e10:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <blinkIsActive+0x1>
    2e14:	89 2b       	or	r24, r25
    2e16:	a9 f0       	breq	.+42     	; 0x2e42 <.L18>

00002e18 <.Loc.25>:
	{
		if (blink.bf.update)
    2e18:	80 91 d7 07 	lds	r24, 0x07D7	; 0x8007d7 <blink.0+0x4>

00002e1c <.Loc.27>:
    2e1c:	81 ff       	sbrs	r24, 1
    2e1e:	11 c0       	rjmp	.+34     	; 0x2e42 <.L18>

00002e20 <.Loc.28>:
		{
			blink.bf.update = 0;
    2e20:	8d 7f       	andi	r24, 0xFD	; 253
    2e22:	80 93 d7 07 	sts	0x07D7, r24	; 0x8007d7 <blink.0+0x4>

00002e26 <.Loc.30>:
			//
			if (blink.bf.toggle == BLINK_TOGGLE_SET_BLANK)
    2e26:	80 fd       	sbrc	r24, 0
    2e28:	c7 c0       	rjmp	.+398    	; 0x2fb8 <.L19>

00002e2a <.Loc.32>:
			{
//				strcpy(str,"   ");
				disp7s_blank_displays(str,0,BASKET_DISP_MAX_CHARS_PERBASKET);
    2e2a:	44 e0       	ldi	r20, 0x04	; 4
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	ce 01       	movw	r24, r28
    2e30:	01 96       	adiw	r24, 0x01	; 1
    2e32:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <disp7s_blank_displays>

00002e36 <.L20>:
				MAX6675_formatText3dig(tmprture_coccion.TC, str);
			}
//			lcdan_set_cursor(DISP_CURSOR_BASKETRIGHT_START_X, 0);
//			lcdan_print_string(str);

			disp7s_update_data_array(str, BASKETRIGHT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    2e36:	44 e0       	ldi	r20, 0x04	; 4
    2e38:	64 e0       	ldi	r22, 0x04	; 4
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	01 96       	adiw	r24, 0x01	; 1
    2e3e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00002e42 <.L18>:
		}
	}


	//al ultimo q evalue KB PROGRAM
	if (ikb_key_is_ready2read(KB_LYOUT_PROGRAM))
    2e42:	83 e0       	ldi	r24, 0x03	; 3
    2e44:	0e 94 47 07 	call	0xe8e	; 0xe8e <ikb_key_is_ready2read>

00002e48 <.LVL7>:
    2e48:	18 2f       	mov	r17, r24

00002e4a <.Loc.36>:
    2e4a:	81 15       	cp	r24, r1
    2e4c:	b9 f0       	breq	.+46     	; 0x2e7c <.L21>

00002e4e <.Loc.37>:
	{
		ikb_key_was_read(KB_LYOUT_PROGRAM);
    2e4e:	83 e0       	ldi	r24, 0x03	; 3
    2e50:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ikb_key_was_read>

00002e54 <.LVL8>:

		fryer.ps_program.sm0++;
    2e54:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <fryer+0x36>
    2e58:	8f 5f       	subi	r24, 0xFF	; 255
    2e5a:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <fryer+0x36>

00002e5e <.Loc.40>:
		//
		if (fryer.ps_program.sm0 == 3)
    2e5e:	83 30       	cpi	r24, 0x03	; 3
    2e60:	09 f0       	breq	.+2      	; 0x2e64 <.Loc.42>

00002e62 <L0^A>:
    2e62:	b4 c0       	rjmp	.+360    	; 0x2fcc <.L22>

00002e64 <.Loc.42>:
		{
			//blink.timerBlink_K = PSMODE_PROGRAM_BLINK_TIMER_KMAX;
			//blink_set(&blink);
			blinkIsActive = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <blinkIsActive>
    2e6a:	10 92 db 07 	sts	0x07DB, r1	; 0x8007db <blinkIsActive+0x1>

00002e6e <.L23>:
	char codret = 0;
    2e6e:	10 e0       	ldi	r17, 0x00	; 0

00002e70 <.L25>:

			eeprom_update_block((struct _Tcoccion *)&tmprture_coccion , (struct _Tcoccion *)&TMPRTURE_COCCION, sizeof(struct _Tcoccion) );

			blinkIsActive = 0;
		}
		indicatorTimed_setKSysTickTime_ms(80/SYSTICK_MS);
    2e70:	80 e5       	ldi	r24, 0x50	; 80
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

00002e78 <.LVL10>:
		indicatorTimed_run();
    2e78:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

00002e7c <.L21>:
	}
	//
	//+++++++++++++++++++++++++++++++++++++++++++++++++
	if (mainflag.sysTickMs)
    2e7c:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <mainflag>

00002e80 <.Loc.49>:
    2e80:	80 fd       	sbrc	r24, 0

00002e82 <.Loc.50>:
	{
		blink_timing();
    2e82:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <blink_timing>

00002e86 <.LVL12>:
	}
	//+++++++++++++++++++++++++++++++++++++++++++++++++

	return codret;
}
    2e86:	81 2f       	mov	r24, r17
    2e88:	2a 96       	adiw	r28, 0x0a	; 10
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	de bf       	out	0x3e, r29	; 62
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17

00002e9a <.Loc.53>:
    2e9a:	0f 91       	pop	r16
    2e9c:	08 95       	ret

00002e9e <.L2>:
	else if (fryer.ps_program.sm0 == 1)
    2e9e:	61 f4       	brne	.+24     	; 0x2eb8 <.L5>

00002ea0 <.Loc.56>:
		disp7s_update_data_array(DIPS7S_MSG_OIL, BASKETLEFT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    2ea0:	44 e0       	ldi	r20, 0x04	; 4
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	81 ec       	ldi	r24, 0xC1	; 193
    2ea6:	94 e0       	ldi	r25, 0x04	; 4

00002ea8 <.L41>:
		disp7s_update_data_array(DIPS7S_MSG_SET, BASKETLEFT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    2ea8:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00002eac <.LVL15>:
		fryer.ps_program.sm0++;
    2eac:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <fryer+0x36>
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <fryer+0x36>
    2eb6:	aa cf       	rjmp	.-172    	; 0x2e0c <.L4>

00002eb8 <.L5>:
	else if (fryer.ps_program.sm0 == 2)
    2eb8:	82 30       	cpi	r24, 0x02	; 2
    2eba:	81 f4       	brne	.+32     	; 0x2edc <.L6>

00002ebc <.Loc.62>:
		MAX6675_formatText3dig(TCtemperature, str);
    2ebc:	be 01       	movw	r22, r28
    2ebe:	6f 5f       	subi	r22, 0xFF	; 255
    2ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec2:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <TCtemperature>
    2ec6:	90 91 19 07 	lds	r25, 0x0719	; 0x800719 <TCtemperature+0x1>
    2eca:	0e 94 03 0c 	call	0x1806	; 0x1806 <MAX6675_formatText3dig>

00002ece <.LVL16>:
		disp7s_update_data_array(str, BASKETRIGHT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    2ece:	44 e0       	ldi	r20, 0x04	; 4
    2ed0:	64 e0       	ldi	r22, 0x04	; 4
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	01 96       	adiw	r24, 0x01	; 1
    2ed6:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00002eda <.LVL17>:
    2eda:	98 cf       	rjmp	.-208    	; 0x2e0c <.L4>

00002edc <.L6>:
	else if (fryer.ps_program.sm0 == 3)
    2edc:	83 30       	cpi	r24, 0x03	; 3
    2ede:	29 f4       	brne	.+10     	; 0x2eea <.L7>

00002ee0 <.Loc.66>:
		disp7s_update_data_array(DIPS7S_MSG_SET, BASKETLEFT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    2ee0:	44 e0       	ldi	r20, 0x04	; 4
    2ee2:	60 e0       	ldi	r22, 0x00	; 0
    2ee4:	8d eb       	ldi	r24, 0xBD	; 189
    2ee6:	94 e0       	ldi	r25, 0x04	; 4
    2ee8:	df cf       	rjmp	.-66     	; 0x2ea8 <.L41>

00002eea <.L7>:
	else if (fryer.ps_program.sm0 == 4)
    2eea:	84 30       	cpi	r24, 0x04	; 4
    2eec:	09 f0       	breq	.+2      	; 0x2ef0 <L0^A+0x2>

00002eee <L0^A>:
    2eee:	8e cf       	rjmp	.-228    	; 0x2e0c <.L4>
    2ef0:	02 e6       	ldi	r16, 0x62	; 98
    2ef2:	17 e0       	ldi	r17, 0x07	; 7

00002ef4 <.L17>:
			if (ikb_key_is_ready2read(fryer.basket[i].kb.down))
    2ef4:	f8 01       	movw	r30, r16
    2ef6:	86 81       	ldd	r24, Z+6	; 0x06
    2ef8:	0e 94 47 07 	call	0xe8e	; 0xe8e <ikb_key_is_ready2read>

00002efc <.LVL18>:
    2efc:	81 15       	cp	r24, r1
    2efe:	39 f1       	breq	.+78     	; 0x2f4e <.L10>

00002f00 <.Loc.72>:
				ikb_key_was_read(fryer.basket[i].kb.down);
    2f00:	f8 01       	movw	r30, r16
    2f02:	86 81       	ldd	r24, Z+6	; 0x06
    2f04:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ikb_key_was_read>

00002f08 <.LVL19>:
				if (!ikb_inReptt(fryer.basket[i].kb.down))
    2f08:	f8 01       	movw	r30, r16
    2f0a:	86 81       	ldd	r24, Z+6	; 0x06
    2f0c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ikb_inReptt>

00002f10 <.LVL20>:
    2f10:	81 11       	cpse	r24, r1
    2f12:	06 c0       	rjmp	.+12     	; 0x2f20 <.L11>

00002f14 <.Loc.76>:
					indicatorTimed_setKSysTickTime_ms(75/SYSTICK_MS);
    2f14:	8b e4       	ldi	r24, 0x4B	; 75
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

00002f1c <.LVL21>:
					indicatorTimed_run();
    2f1c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

00002f20 <.L11>:
				blink_reset(BLINK_TOGGLE_SET_TEXT);
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <blink_reset>

00002f26 <.LVL23>:
				if (--tmprture_coccion.TC <= tmprture_coccion.min)
    2f26:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <tmprture_coccion>
    2f2a:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <tmprture_coccion+0x1>
    2f2e:	01 97       	sbiw	r24, 0x01	; 1

00002f30 <.Loc.81>:
    2f30:	80 93 dc 07 	sts	0x07DC, r24	; 0x8007dc <tmprture_coccion>
    2f34:	90 93 dd 07 	sts	0x07DD, r25	; 0x8007dd <tmprture_coccion+0x1>

00002f38 <.Loc.82>:
    2f38:	20 91 de 07 	lds	r18, 0x07DE	; 0x8007de <tmprture_coccion+0x2>
    2f3c:	30 91 df 07 	lds	r19, 0x07DF	; 0x8007df <tmprture_coccion+0x3>

00002f40 <.Loc.83>:
    2f40:	28 17       	cp	r18, r24
    2f42:	39 07       	cpc	r19, r25
    2f44:	24 f0       	brlt	.+8      	; 0x2f4e <.L10>

00002f46 <.Loc.84>:
					tmprture_coccion.TC = tmprture_coccion.min;
    2f46:	20 93 dc 07 	sts	0x07DC, r18	; 0x8007dc <tmprture_coccion>
    2f4a:	30 93 dd 07 	sts	0x07DD, r19	; 0x8007dd <tmprture_coccion+0x1>

00002f4e <.L10>:
			if (ikb_key_is_ready2read(fryer.basket[i].kb.up))
    2f4e:	f8 01       	movw	r30, r16
    2f50:	87 81       	ldd	r24, Z+7	; 0x07
    2f52:	0e 94 47 07 	call	0xe8e	; 0xe8e <ikb_key_is_ready2read>

00002f56 <.LVL24>:
    2f56:	81 15       	cp	r24, r1
    2f58:	39 f1       	breq	.+78     	; 0x2fa8 <.L14>

00002f5a <.Loc.89>:
				ikb_key_was_read(fryer.basket[i].kb.up);
    2f5a:	f8 01       	movw	r30, r16
    2f5c:	87 81       	ldd	r24, Z+7	; 0x07
    2f5e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ikb_key_was_read>

00002f62 <.LVL25>:
				if (!ikb_inReptt(fryer.basket[i].kb.up))
    2f62:	f8 01       	movw	r30, r16
    2f64:	87 81       	ldd	r24, Z+7	; 0x07
    2f66:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <ikb_inReptt>

00002f6a <.LVL26>:
    2f6a:	81 11       	cpse	r24, r1
    2f6c:	06 c0       	rjmp	.+12     	; 0x2f7a <.L15>

00002f6e <.Loc.93>:
					indicatorTimed_setKSysTickTime_ms(75/SYSTICK_MS);
    2f6e:	8b e4       	ldi	r24, 0x4B	; 75
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

00002f76 <.LVL27>:
					indicatorTimed_run();
    2f76:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

00002f7a <.L15>:
				blink_reset(BLINK_TOGGLE_SET_TEXT);
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <blink_reset>

00002f80 <.LVL29>:
				if (++tmprture_coccion.TC >= tmprture_coccion.max)
    2f80:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <tmprture_coccion>
    2f84:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <tmprture_coccion+0x1>
    2f88:	01 96       	adiw	r24, 0x01	; 1

00002f8a <.Loc.98>:
    2f8a:	80 93 dc 07 	sts	0x07DC, r24	; 0x8007dc <tmprture_coccion>
    2f8e:	90 93 dd 07 	sts	0x07DD, r25	; 0x8007dd <tmprture_coccion+0x1>

00002f92 <.Loc.99>:
    2f92:	20 91 e0 07 	lds	r18, 0x07E0	; 0x8007e0 <tmprture_coccion+0x4>
    2f96:	30 91 e1 07 	lds	r19, 0x07E1	; 0x8007e1 <tmprture_coccion+0x5>

00002f9a <.Loc.100>:
    2f9a:	82 17       	cp	r24, r18
    2f9c:	93 07       	cpc	r25, r19
    2f9e:	24 f0       	brlt	.+8      	; 0x2fa8 <.L14>

00002fa0 <.Loc.101>:
					tmprture_coccion.TC = tmprture_coccion.max;
    2fa0:	20 93 dc 07 	sts	0x07DC, r18	; 0x8007dc <tmprture_coccion>
    2fa4:	30 93 dd 07 	sts	0x07DD, r19	; 0x8007dd <tmprture_coccion+0x1>

00002fa8 <.L14>:
		for (int i=0; i<BASKET_MAXSIZE; i++)
    2fa8:	06 5e       	subi	r16, 0xE6	; 230
    2faa:	1f 4f       	sbci	r17, 0xFF	; 255
    2fac:	f7 e0       	ldi	r31, 0x07	; 7
    2fae:	06 39       	cpi	r16, 0x96	; 150
    2fb0:	1f 07       	cpc	r17, r31
    2fb2:	09 f0       	breq	.+2      	; 0x2fb6 <L0^A+0x2>

00002fb4 <L0^A>:
    2fb4:	9f cf       	rjmp	.-194    	; 0x2ef4 <.L17>
    2fb6:	2a cf       	rjmp	.-428    	; 0x2e0c <.L4>

00002fb8 <.L19>:
				MAX6675_formatText3dig(tmprture_coccion.TC, str);
    2fb8:	be 01       	movw	r22, r28
    2fba:	6f 5f       	subi	r22, 0xFF	; 255
    2fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fbe:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <tmprture_coccion>
    2fc2:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <tmprture_coccion+0x1>
    2fc6:	0e 94 03 0c 	call	0x1806	; 0x1806 <MAX6675_formatText3dig>

00002fca <.LVL30>:
    2fca:	35 cf       	rjmp	.-406    	; 0x2e36 <.L20>

00002fcc <.L22>:
		else if (fryer.ps_program.sm0 == 5)//EXIT
    2fcc:	85 30       	cpi	r24, 0x05	; 5
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <.Loc.108>

00002fd0 <L0^A>:
    2fd0:	4e cf       	rjmp	.-356    	; 0x2e6e <.L23>

00002fd2 <.Loc.108>:
			eeprom_update_block((struct _Tcoccion *)&tmprture_coccion , (struct _Tcoccion *)&TMPRTURE_COCCION, sizeof(struct _Tcoccion) );
    2fd2:	46 e0       	ldi	r20, 0x06	; 6
    2fd4:	50 e0       	ldi	r21, 0x00	; 0
    2fd6:	64 e0       	ldi	r22, 0x04	; 4
    2fd8:	70 e0       	ldi	r23, 0x00	; 0
    2fda:	8c ed       	ldi	r24, 0xDC	; 220
    2fdc:	97 e0       	ldi	r25, 0x07	; 7
    2fde:	0e 94 49 1b 	call	0x3692	; 0x3692 <eeprom_update_block>

00002fe2 <.LVL32>:
			blinkIsActive = 0;
    2fe2:	10 92 da 07 	sts	0x07DA, r1	; 0x8007da <blinkIsActive>
    2fe6:	10 92 db 07 	sts	0x07DB, r1	; 0x8007db <blinkIsActive+0x1>

00002fea <.Loc.112>:
			codret = 1;
    2fea:	11 e0       	ldi	r17, 0x01	; 1
    2fec:	41 cf       	rjmp	.-382    	; 0x2e70 <.L25>

00002fee <psmode_viewTemp>:
#include "Temperature/temperature.h"
#include "indicator/indicator.h"
#include "disp7s_applevel.h"

int8_t psmode_viewTemp(void)
{
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	2a 97       	sbiw	r28, 0x0a	; 10
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61

00003006 <.LVL0>:
	char codret = 0;
	unsigned char str[10];

	//fryer.ps_program.sm0 avanza por la tecla e internamente
	if (fryer.ps_viewTemp.sm0 == 0)
    3006:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <fryer+0x38>

0000300a <.Loc.5>:
    300a:	81 30       	cpi	r24, 0x01	; 1
    300c:	28 f5       	brcc	.+74     	; 0x3058 <.L2>

0000300e <.LBB2>:
	{
		struct _key_prop key_prop = { 0 };
		key_prop = propEmpty;
    300e:	86 e0       	ldi	r24, 0x06	; 6
    3010:	ea e8       	ldi	r30, 0x8A	; 138
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	de 01       	movw	r26, r28
    3016:	11 96       	adiw	r26, 0x01	; 1

00003018 <.L0^B1>:
    3018:	01 90       	ld	r0, Z+
    301a:	0d 92       	st	X+, r0
    301c:	8a 95       	dec	r24
    301e:	e1 f7       	brne	.-8      	; 0x3018 <.L0^B1>

00003020 <.Loc.10>:
		key_prop.uFlag.f.onKeyPressed = 1;
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	81 60       	ori	r24, 0x01	; 1
    3024:	89 83       	std	Y+1, r24	; 0x01

00003026 <.LBB3>:
		for (int i=0; i<BASKET_MAXSIZE; i++)
    3026:	02 e6       	ldi	r16, 0x62	; 98
    3028:	17 e0       	ldi	r17, 0x07	; 7

0000302a <.L3>:
		{
			ikb_setKeyProp(fryer.basket[i].kb.program ,key_prop);//
    302a:	29 81       	ldd	r18, Y+1	; 0x01
    302c:	3a 81       	ldd	r19, Y+2	; 0x02
    302e:	4b 81       	ldd	r20, Y+3	; 0x03
    3030:	5c 81       	ldd	r21, Y+4	; 0x04
    3032:	6d 81       	ldd	r22, Y+5	; 0x05
    3034:	7e 81       	ldd	r23, Y+6	; 0x06
    3036:	f8 01       	movw	r30, r16
    3038:	80 85       	ldd	r24, Z+8	; 0x08
    303a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <ikb_setKeyProp>

0000303e <.LVL3>:
		for (int i=0; i<BASKET_MAXSIZE; i++)
    303e:	06 5e       	subi	r16, 0xE6	; 230
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	f7 e0       	ldi	r31, 0x07	; 7
    3044:	06 39       	cpi	r16, 0x96	; 150
    3046:	1f 07       	cpc	r17, r31
    3048:	81 f7       	brne	.-32     	; 0x302a <.L3>

0000304a <.L17>:
		fryer.ps_viewTemp.sm0++;
	}
	else if (fryer.ps_viewTemp.sm0 == 1)
	{
		disp7s_update_data_array(DIPS7S_MSG_OIL, BASKETLEFT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
		fryer.ps_viewTemp.sm0++;
    304a:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <fryer+0x38>
    304e:	8f 5f       	subi	r24, 0xFF	; 255
    3050:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <fryer+0x38>

00003054 <.L18>:
	else if (fryer.ps_viewTemp.sm0 == 2)
	{
		MAX6675_formatText3dig(TCtemperature, str);
		disp7s_update_data_array(str, BASKETRIGHT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
	}
	else if (fryer.ps_viewTemp.sm0 == 3)
    3054:	10 e0       	ldi	r17, 0x00	; 0
    3056:	1d c0       	rjmp	.+58     	; 0x3092 <.L6>

00003058 <.L2>:
	else if (fryer.ps_viewTemp.sm0 == 1)
    3058:	39 f4       	brne	.+14     	; 0x3068 <.L5>

0000305a <.Loc.22>:
		disp7s_update_data_array(DIPS7S_MSG_OIL, BASKETLEFT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    305a:	44 e0       	ldi	r20, 0x04	; 4
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	81 ec       	ldi	r24, 0xC1	; 193
    3060:	94 e0       	ldi	r25, 0x04	; 4
    3062:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

00003066 <.LVL4>:
    3066:	f1 cf       	rjmp	.-30     	; 0x304a <.L17>

00003068 <.L5>:
	else if (fryer.ps_viewTemp.sm0 == 2)
    3068:	82 30       	cpi	r24, 0x02	; 2
    306a:	81 f4       	brne	.+32     	; 0x308c <.L7>

0000306c <.Loc.25>:
		MAX6675_formatText3dig(TCtemperature, str);
    306c:	be 01       	movw	r22, r28
    306e:	6f 5f       	subi	r22, 0xFF	; 255
    3070:	7f 4f       	sbci	r23, 0xFF	; 255
    3072:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <TCtemperature>
    3076:	90 91 19 07 	lds	r25, 0x0719	; 0x800719 <TCtemperature+0x1>
    307a:	0e 94 03 0c 	call	0x1806	; 0x1806 <MAX6675_formatText3dig>

0000307e <.LVL5>:
		disp7s_update_data_array(str, BASKETRIGHT_DISP_CURSOR_START_X, BASKET_DISP_MAX_CHARS_PERBASKET);
    307e:	44 e0       	ldi	r20, 0x04	; 4
    3080:	64 e0       	ldi	r22, 0x04	; 4
    3082:	ce 01       	movw	r24, r28
    3084:	01 96       	adiw	r24, 0x01	; 1
    3086:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <disp7s_update_data_array>

0000308a <.LVL6>:
    308a:	e4 cf       	rjmp	.-56     	; 0x3054 <.L18>

0000308c <.L7>:
	else if (fryer.ps_viewTemp.sm0 == 3)
    308c:	11 e0       	ldi	r17, 0x01	; 1
    308e:	83 30       	cpi	r24, 0x03	; 3
    3090:	09 f7       	brne	.-62     	; 0x3054 <.L18>

00003092 <.L6>:
			codret = 1;
		}
	}

	//al ultimo q evalue KB PROGRAM
	if (ikb_key_is_ready2read(KB_LYOUT_PROGRAM))
    3092:	83 e0       	ldi	r24, 0x03	; 3
    3094:	0e 94 47 07 	call	0xe8e	; 0xe8e <ikb_key_is_ready2read>

00003098 <.LVL8>:
    3098:	81 15       	cp	r24, r1
    309a:	71 f0       	breq	.+28     	; 0x30b8 <.L9>

0000309c <.Loc.32>:
	{
		ikb_key_was_read(KB_LYOUT_PROGRAM);
    309c:	83 e0       	ldi	r24, 0x03	; 3
    309e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <ikb_key_was_read>

000030a2 <.LVL9>:

		fryer.ps_viewTemp.sm0++;
    30a2:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <fryer+0x38>
    30a6:	8f 5f       	subi	r24, 0xFF	; 255
    30a8:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <fryer+0x38>

000030ac <.Loc.35>:
		//
		indicatorTimed_setKSysTickTime_ms(75/SYSTICK_MS);
    30ac:	8b e4       	ldi	r24, 0x4B	; 75
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <indicatorTimed_setKSysTickTime_ms>

000030b4 <.LVL10>:
		indicatorTimed_run();
    30b4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <indicatorTimed_run>

000030b8 <.L9>:
	}

	return codret;
}
    30b8:	81 2f       	mov	r24, r17
    30ba:	2a 96       	adiw	r28, 0x0a	; 10
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	f8 94       	cli
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	cd bf       	out	0x3d, r28	; 61
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	1f 91       	pop	r17

000030cc <.Loc.39>:
    30cc:	0f 91       	pop	r16
    30ce:	08 95       	ret

000030d0 <__divmodhi4>:
    30d0:	97 fb       	bst	r25, 7

000030d2 <.Loc.1>:
    30d2:	07 2e       	mov	r0, r23

000030d4 <.Loc.2>:
    30d4:	16 f4       	brtc	.+4      	; 0x30da <.L0^B1>

000030d6 <.Loc.3>:
    30d6:	00 94       	com	r0

000030d8 <.Loc.4>:
    30d8:	07 d0       	rcall	.+14     	; 0x30e8 <__divmodhi4_neg1>

000030da <.L0^B1>:
    30da:	77 fd       	sbrc	r23, 7

000030dc <.Loc.6>:
    30dc:	09 d0       	rcall	.+18     	; 0x30f0 <__divmodhi4_neg2>

000030de <.Loc.7>:
    30de:	0e 94 9b 18 	call	0x3136	; 0x3136 <__udivmodhi4>

000030e2 <.Loc.8>:
    30e2:	07 fc       	sbrc	r0, 7

000030e4 <.Loc.9>:
    30e4:	05 d0       	rcall	.+10     	; 0x30f0 <__divmodhi4_neg2>

000030e6 <.Loc.10>:
    30e6:	3e f4       	brtc	.+14     	; 0x30f6 <__divmodhi4_exit>

000030e8 <__divmodhi4_neg1>:
    30e8:	90 95       	com	r25

000030ea <.Loc.12>:
    30ea:	81 95       	neg	r24

000030ec <.Loc.13>:
    30ec:	9f 4f       	sbci	r25, 0xFF	; 255

000030ee <.Loc.14>:
    30ee:	08 95       	ret

000030f0 <__divmodhi4_neg2>:
    30f0:	70 95       	com	r23

000030f2 <.Loc.16>:
    30f2:	61 95       	neg	r22

000030f4 <.Loc.17>:
    30f4:	7f 4f       	sbci	r23, 0xFF	; 255

000030f6 <__divmodhi4_exit>:
    30f6:	08 95       	ret

000030f8 <__divmodsi4>:
    30f8:	05 2e       	mov	r0, r21

000030fa <.Loc.1>:
    30fa:	97 fb       	bst	r25, 7

000030fc <.Loc.2>:
    30fc:	1e f4       	brtc	.+6      	; 0x3104 <.L0^B1>

000030fe <.Loc.3>:
    30fe:	00 94       	com	r0

00003100 <.Loc.4>:
    3100:	0e 94 93 18 	call	0x3126	; 0x3126 <__negsi2>

00003104 <.L0^B1>:
    3104:	57 fd       	sbrc	r21, 7

00003106 <.Loc.6>:
    3106:	07 d0       	rcall	.+14     	; 0x3116 <__divmodsi4_neg2>

00003108 <.Loc.7>:
    3108:	0e 94 af 18 	call	0x315e	; 0x315e <__udivmodsi4>

0000310c <.Loc.8>:
    310c:	07 fc       	sbrc	r0, 7

0000310e <.Loc.9>:
    310e:	03 d0       	rcall	.+6      	; 0x3116 <__divmodsi4_neg2>

00003110 <.Loc.10>:
    3110:	4e f4       	brtc	.+18     	; 0x3124 <__divmodsi4_exit>

00003112 <.Loc.11>:
    3112:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__negsi2>

00003116 <__divmodsi4_neg2>:
    3116:	50 95       	com	r21

00003118 <.Loc.13>:
    3118:	40 95       	com	r20

0000311a <.Loc.14>:
    311a:	30 95       	com	r19

0000311c <.Loc.15>:
    311c:	21 95       	neg	r18

0000311e <.Loc.16>:
    311e:	3f 4f       	sbci	r19, 0xFF	; 255

00003120 <.Loc.17>:
    3120:	4f 4f       	sbci	r20, 0xFF	; 255

00003122 <.Loc.18>:
    3122:	5f 4f       	sbci	r21, 0xFF	; 255

00003124 <__divmodsi4_exit>:
    3124:	08 95       	ret

00003126 <__negsi2>:
    3126:	90 95       	com	r25
    3128:	80 95       	com	r24
    312a:	70 95       	com	r23
    312c:	61 95       	neg	r22
    312e:	7f 4f       	sbci	r23, 0xFF	; 255
    3130:	8f 4f       	sbci	r24, 0xFF	; 255
    3132:	9f 4f       	sbci	r25, 0xFF	; 255

00003134 <.Loc.1>:
    3134:	08 95       	ret

00003136 <__udivmodhi4>:
    3136:	aa 1b       	sub	r26, r26

00003138 <.Loc.1>:
    3138:	bb 1b       	sub	r27, r27

0000313a <.Loc.2>:
    313a:	51 e1       	ldi	r21, 0x11	; 17

0000313c <.Loc.3>:
    313c:	07 c0       	rjmp	.+14     	; 0x314c <__udivmodhi4_ep>

0000313e <__udivmodhi4_loop>:
    313e:	aa 1f       	adc	r26, r26

00003140 <.Loc.5>:
    3140:	bb 1f       	adc	r27, r27

00003142 <.Loc.6>:
    3142:	a6 17       	cp	r26, r22

00003144 <.Loc.7>:
    3144:	b7 07       	cpc	r27, r23

00003146 <.Loc.8>:
    3146:	10 f0       	brcs	.+4      	; 0x314c <__udivmodhi4_ep>

00003148 <.Loc.9>:
    3148:	a6 1b       	sub	r26, r22

0000314a <.Loc.10>:
    314a:	b7 0b       	sbc	r27, r23

0000314c <__udivmodhi4_ep>:
    314c:	88 1f       	adc	r24, r24

0000314e <.Loc.12>:
    314e:	99 1f       	adc	r25, r25

00003150 <.Loc.13>:
    3150:	5a 95       	dec	r21

00003152 <.Loc.14>:
    3152:	a9 f7       	brne	.-22     	; 0x313e <__udivmodhi4_loop>

00003154 <.Loc.15>:
    3154:	80 95       	com	r24

00003156 <.Loc.16>:
    3156:	90 95       	com	r25

00003158 <.Loc.17>:
    3158:	bc 01       	movw	r22, r24

0000315a <.Loc.18>:
    315a:	cd 01       	movw	r24, r26

0000315c <.Loc.19>:
    315c:	08 95       	ret

0000315e <__udivmodsi4>:
    315e:	a1 e2       	ldi	r26, 0x21	; 33

00003160 <.Loc.1>:
    3160:	1a 2e       	mov	r1, r26

00003162 <.Loc.2>:
    3162:	aa 1b       	sub	r26, r26

00003164 <.Loc.3>:
    3164:	bb 1b       	sub	r27, r27

00003166 <.Loc.4>:
    3166:	fd 01       	movw	r30, r26

00003168 <.Loc.5>:
    3168:	0d c0       	rjmp	.+26     	; 0x3184 <__udivmodsi4_ep>

0000316a <__udivmodsi4_loop>:
    316a:	aa 1f       	adc	r26, r26

0000316c <.Loc.7>:
    316c:	bb 1f       	adc	r27, r27

0000316e <.Loc.8>:
    316e:	ee 1f       	adc	r30, r30

00003170 <.Loc.9>:
    3170:	ff 1f       	adc	r31, r31

00003172 <.Loc.10>:
    3172:	a2 17       	cp	r26, r18

00003174 <.Loc.11>:
    3174:	b3 07       	cpc	r27, r19

00003176 <.Loc.12>:
    3176:	e4 07       	cpc	r30, r20

00003178 <.Loc.13>:
    3178:	f5 07       	cpc	r31, r21

0000317a <.Loc.14>:
    317a:	20 f0       	brcs	.+8      	; 0x3184 <__udivmodsi4_ep>

0000317c <.Loc.15>:
    317c:	a2 1b       	sub	r26, r18

0000317e <.Loc.16>:
    317e:	b3 0b       	sbc	r27, r19

00003180 <.Loc.17>:
    3180:	e4 0b       	sbc	r30, r20

00003182 <.Loc.18>:
    3182:	f5 0b       	sbc	r31, r21

00003184 <__udivmodsi4_ep>:
    3184:	66 1f       	adc	r22, r22

00003186 <.Loc.20>:
    3186:	77 1f       	adc	r23, r23

00003188 <.Loc.21>:
    3188:	88 1f       	adc	r24, r24

0000318a <.Loc.22>:
    318a:	99 1f       	adc	r25, r25

0000318c <.Loc.23>:
    318c:	1a 94       	dec	r1

0000318e <.Loc.24>:
    318e:	69 f7       	brne	.-38     	; 0x316a <__udivmodsi4_loop>

00003190 <.Loc.25>:
    3190:	60 95       	com	r22

00003192 <.Loc.26>:
    3192:	70 95       	com	r23

00003194 <.Loc.27>:
    3194:	80 95       	com	r24

00003196 <.Loc.28>:
    3196:	90 95       	com	r25

00003198 <.Loc.29>:
    3198:	9b 01       	movw	r18, r22

0000319a <.Loc.30>:
    319a:	ac 01       	movw	r20, r24

0000319c <.Loc.31>:
    319c:	bd 01       	movw	r22, r26

0000319e <.Loc.32>:
    319e:	cf 01       	movw	r24, r30

000031a0 <.Loc.33>:
    31a0:	08 95       	ret

000031a2 <__subsf3>:
    31a2:	50 58       	subi	r21, 0x80	; 128

000031a4 <__addsf3>:
    31a4:	bb 27       	eor	r27, r27
    31a6:	aa 27       	eor	r26, r26
    31a8:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__addsf3x>
    31ac:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__fp_round>

000031b0 <.L0^B1>:
    31b0:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__fp_pscA>
    31b4:	38 f0       	brcs	.+14     	; 0x31c4 <.L_nan>
    31b6:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__fp_pscB>
    31ba:	20 f0       	brcs	.+8      	; 0x31c4 <.L_nan>
    31bc:	39 f4       	brne	.+14     	; 0x31cc <.L_inf>
    31be:	9f 3f       	cpi	r25, 0xFF	; 255
    31c0:	19 f4       	brne	.+6      	; 0x31c8 <.L_infB>
    31c2:	26 f4       	brtc	.+8      	; 0x31cc <.L_inf>

000031c4 <.L_nan>:
    31c4:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__fp_nan>

000031c8 <.L_infB>:
    31c8:	0e f4       	brtc	.+2      	; 0x31cc <.L_inf>
    31ca:	e0 95       	com	r30

000031cc <.L_inf>:
    31cc:	e7 fb       	bst	r30, 7
    31ce:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_inf>

000031d2 <__addsf3x>:
    31d2:	e9 2f       	mov	r30, r25
    31d4:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__fp_split3>
    31d8:	58 f3       	brcs	.-42     	; 0x31b0 <.L0^B1>
    31da:	ba 17       	cp	r27, r26
    31dc:	62 07       	cpc	r22, r18
    31de:	73 07       	cpc	r23, r19
    31e0:	84 07       	cpc	r24, r20
    31e2:	95 07       	cpc	r25, r21
    31e4:	20 f0       	brcs	.+8      	; 0x31ee <.L2^B1>
    31e6:	79 f4       	brne	.+30     	; 0x3206 <.L4^B1>
    31e8:	a6 f5       	brtc	.+104    	; 0x3252 <.L_add>
    31ea:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__fp_zero>

000031ee <.L2^B1>:
    31ee:	0e f4       	brtc	.+2      	; 0x31f2 <.L3^B1>
    31f0:	e0 95       	com	r30

000031f2 <.L3^B1>:
    31f2:	0b 2e       	mov	r0, r27
    31f4:	ba 2f       	mov	r27, r26
    31f6:	a0 2d       	mov	r26, r0
    31f8:	0b 01       	movw	r0, r22
    31fa:	b9 01       	movw	r22, r18
    31fc:	90 01       	movw	r18, r0
    31fe:	0c 01       	movw	r0, r24
    3200:	ca 01       	movw	r24, r20
    3202:	a0 01       	movw	r20, r0
    3204:	11 24       	eor	r1, r1

00003206 <.L4^B1>:
    3206:	ff 27       	eor	r31, r31
    3208:	59 1b       	sub	r21, r25

0000320a <.L5^B1>:
    320a:	99 f0       	breq	.+38     	; 0x3232 <.L7^B1>
    320c:	59 3f       	cpi	r21, 0xF9	; 249
    320e:	50 f4       	brcc	.+20     	; 0x3224 <.L6^B1>
    3210:	50 3e       	cpi	r21, 0xE0	; 224
    3212:	68 f1       	brcs	.+90     	; 0x326e <.L_ret>
    3214:	1a 16       	cp	r1, r26
    3216:	f0 40       	sbci	r31, 0x00	; 0
    3218:	a2 2f       	mov	r26, r18
    321a:	23 2f       	mov	r18, r19
    321c:	34 2f       	mov	r19, r20
    321e:	44 27       	eor	r20, r20
    3220:	58 5f       	subi	r21, 0xF8	; 248
    3222:	f3 cf       	rjmp	.-26     	; 0x320a <.L5^B1>

00003224 <.L6^B1>:
    3224:	46 95       	lsr	r20
    3226:	37 95       	ror	r19
    3228:	27 95       	ror	r18
    322a:	a7 95       	ror	r26
    322c:	f0 40       	sbci	r31, 0x00	; 0
    322e:	53 95       	inc	r21
    3230:	c9 f7       	brne	.-14     	; 0x3224 <.L6^B1>

00003232 <.L7^B1>:
    3232:	7e f4       	brtc	.+30     	; 0x3252 <.L_add>
    3234:	1f 16       	cp	r1, r31
    3236:	ba 0b       	sbc	r27, r26
    3238:	62 0b       	sbc	r22, r18
    323a:	73 0b       	sbc	r23, r19
    323c:	84 0b       	sbc	r24, r20
    323e:	ba f0       	brmi	.+46     	; 0x326e <.L_ret>

00003240 <.L8^B1>:
    3240:	91 50       	subi	r25, 0x01	; 1
    3242:	a1 f0       	breq	.+40     	; 0x326c <.L9^B1>
    3244:	ff 0f       	add	r31, r31
    3246:	bb 1f       	adc	r27, r27
    3248:	66 1f       	adc	r22, r22
    324a:	77 1f       	adc	r23, r23
    324c:	88 1f       	adc	r24, r24
    324e:	c2 f7       	brpl	.-16     	; 0x3240 <.L8^B1>
    3250:	0e c0       	rjmp	.+28     	; 0x326e <.L_ret>

00003252 <.L_add>:
    3252:	ba 0f       	add	r27, r26
    3254:	62 1f       	adc	r22, r18
    3256:	73 1f       	adc	r23, r19
    3258:	84 1f       	adc	r24, r20
    325a:	48 f4       	brcc	.+18     	; 0x326e <.L_ret>
    325c:	87 95       	ror	r24
    325e:	77 95       	ror	r23
    3260:	67 95       	ror	r22
    3262:	b7 95       	ror	r27
    3264:	f7 95       	ror	r31
    3266:	9e 3f       	cpi	r25, 0xFE	; 254
    3268:	08 f0       	brcs	.+2      	; 0x326c <.L9^B1>
    326a:	b0 cf       	rjmp	.-160    	; 0x31cc <.L_inf>

0000326c <.L9^B1>:
    326c:	93 95       	inc	r25

0000326e <.L_ret>:
    326e:	88 0f       	add	r24, r24
    3270:	08 f0       	brcs	.+2      	; 0x3274 <.L1^B1>
    3272:	99 27       	eor	r25, r25

00003274 <.L1^B1>:
    3274:	ee 0f       	add	r30, r30
    3276:	97 95       	ror	r25
    3278:	87 95       	ror	r24
    327a:	08 95       	ret

0000327c <__cmpsf2>:
    327c:	0e 94 28 1a 	call	0x3450	; 0x3450 <__fp_cmp>
    3280:	08 f4       	brcc	.+2      	; 0x3284 <.L1^B1>
    3282:	81 e0       	ldi	r24, 0x01	; 1

00003284 <.L1^B1>:
    3284:	08 95       	ret

00003286 <__divsf3>:
    3286:	0e 94 57 19 	call	0x32ae	; 0x32ae <__divsf3x>
    328a:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__fp_round>

0000328e <.L0^B1>:
    328e:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__fp_pscB>
    3292:	58 f0       	brcs	.+22     	; 0x32aa <.L_nan>
    3294:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__fp_pscA>
    3298:	40 f0       	brcs	.+16     	; 0x32aa <.L_nan>
    329a:	29 f4       	brne	.+10     	; 0x32a6 <.L_zr>
    329c:	5f 3f       	cpi	r21, 0xFF	; 255
    329e:	29 f0       	breq	.+10     	; 0x32aa <.L_nan>

000032a0 <.L_inf>:
    32a0:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_inf>

000032a4 <.L1^B1>:
    32a4:	51 11       	cpse	r21, r1

000032a6 <.L_zr>:
    32a6:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__fp_szero>

000032aa <.L_nan>:
    32aa:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__fp_nan>

000032ae <__divsf3x>:
    32ae:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__fp_split3>
    32b2:	68 f3       	brcs	.-38     	; 0x328e <.L0^B1>

000032b4 <__divsf3_pse>:
    32b4:	99 23       	and	r25, r25
    32b6:	b1 f3       	breq	.-20     	; 0x32a4 <.L1^B1>
    32b8:	55 23       	and	r21, r21
    32ba:	91 f3       	breq	.-28     	; 0x32a0 <.L_inf>
    32bc:	95 1b       	sub	r25, r21
    32be:	55 0b       	sbc	r21, r21
    32c0:	bb 27       	eor	r27, r27
    32c2:	aa 27       	eor	r26, r26

000032c4 <.L2^B1>:
    32c4:	62 17       	cp	r22, r18
    32c6:	73 07       	cpc	r23, r19
    32c8:	84 07       	cpc	r24, r20
    32ca:	38 f0       	brcs	.+14     	; 0x32da <.L3^B1>
    32cc:	9f 5f       	subi	r25, 0xFF	; 255
    32ce:	5f 4f       	sbci	r21, 0xFF	; 255
    32d0:	22 0f       	add	r18, r18
    32d2:	33 1f       	adc	r19, r19
    32d4:	44 1f       	adc	r20, r20
    32d6:	aa 1f       	adc	r26, r26
    32d8:	a9 f3       	breq	.-22     	; 0x32c4 <.L2^B1>

000032da <.L3^B1>:
    32da:	35 d0       	rcall	.+106    	; 0x3346 <.L_div>
    32dc:	0e 2e       	mov	r0, r30
    32de:	3a f0       	brmi	.+14     	; 0x32ee <.L5^B1>

000032e0 <.L4^B1>:
    32e0:	e0 e8       	ldi	r30, 0x80	; 128
    32e2:	32 d0       	rcall	.+100    	; 0x3348 <.L_div1>
    32e4:	91 50       	subi	r25, 0x01	; 1
    32e6:	50 40       	sbci	r21, 0x00	; 0
    32e8:	e6 95       	lsr	r30
    32ea:	00 1c       	adc	r0, r0
    32ec:	ca f7       	brpl	.-14     	; 0x32e0 <.L4^B1>

000032ee <.L5^B1>:
    32ee:	2b d0       	rcall	.+86     	; 0x3346 <.L_div>
    32f0:	fe 2f       	mov	r31, r30
    32f2:	29 d0       	rcall	.+82     	; 0x3346 <.L_div>
    32f4:	66 0f       	add	r22, r22
    32f6:	77 1f       	adc	r23, r23
    32f8:	88 1f       	adc	r24, r24
    32fa:	bb 1f       	adc	r27, r27
    32fc:	26 17       	cp	r18, r22
    32fe:	37 07       	cpc	r19, r23
    3300:	48 07       	cpc	r20, r24
    3302:	ab 07       	cpc	r26, r27
    3304:	b0 e8       	ldi	r27, 0x80	; 128
    3306:	09 f0       	breq	.+2      	; 0x330a <.L4^B2>
    3308:	bb 0b       	sbc	r27, r27

0000330a <.L4^B2>:
    330a:	80 2d       	mov	r24, r0
    330c:	bf 01       	movw	r22, r30
    330e:	ff 27       	eor	r31, r31
    3310:	93 58       	subi	r25, 0x83	; 131
    3312:	5f 4f       	sbci	r21, 0xFF	; 255
    3314:	3a f0       	brmi	.+14     	; 0x3324 <.L13^B1>
    3316:	9e 3f       	cpi	r25, 0xFE	; 254
    3318:	51 05       	cpc	r21, r1
    331a:	78 f0       	brcs	.+30     	; 0x333a <.L15^B1>
    331c:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_inf>

00003320 <.L12^B1>:
    3320:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__fp_szero>

00003324 <.L13^B1>:
    3324:	5f 3f       	cpi	r21, 0xFF	; 255
    3326:	e4 f3       	brlt	.-8      	; 0x3320 <.L12^B1>
    3328:	98 3e       	cpi	r25, 0xE8	; 232
    332a:	d4 f3       	brlt	.-12     	; 0x3320 <.L12^B1>

0000332c <.L14^B1>:
    332c:	86 95       	lsr	r24
    332e:	77 95       	ror	r23
    3330:	67 95       	ror	r22
    3332:	b7 95       	ror	r27
    3334:	f7 95       	ror	r31
    3336:	9f 5f       	subi	r25, 0xFF	; 255
    3338:	c9 f7       	brne	.-14     	; 0x332c <.L14^B1>

0000333a <.L15^B1>:
    333a:	88 0f       	add	r24, r24
    333c:	91 1d       	adc	r25, r1
    333e:	96 95       	lsr	r25
    3340:	87 95       	ror	r24
    3342:	97 f9       	bld	r25, 7
    3344:	08 95       	ret

00003346 <.L_div>:
    3346:	e1 e0       	ldi	r30, 0x01	; 1

00003348 <.L_div1>:
    3348:	66 0f       	add	r22, r22
    334a:	77 1f       	adc	r23, r23
    334c:	88 1f       	adc	r24, r24
    334e:	bb 1f       	adc	r27, r27
    3350:	62 17       	cp	r22, r18
    3352:	73 07       	cpc	r23, r19
    3354:	84 07       	cpc	r24, r20
    3356:	ba 07       	cpc	r27, r26
    3358:	20 f0       	brcs	.+8      	; 0x3362 <.L2^B2>
    335a:	62 1b       	sub	r22, r18
    335c:	73 0b       	sbc	r23, r19
    335e:	84 0b       	sbc	r24, r20
    3360:	ba 0b       	sbc	r27, r26

00003362 <.L2^B2>:
    3362:	ee 1f       	adc	r30, r30
    3364:	88 f7       	brcc	.-30     	; 0x3348 <.L_div1>
    3366:	e0 95       	com	r30
    3368:	08 95       	ret

0000336a <__fixsfsi>:
    336a:	0e 94 bc 19 	call	0x3378	; 0x3378 <__fixunssfsi>
    336e:	68 94       	set
    3370:	b1 11       	cpse	r27, r1
    3372:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__fp_szero>
    3376:	08 95       	ret

00003378 <__fixunssfsi>:
    3378:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__fp_splitA>
    337c:	88 f0       	brcs	.+34     	; 0x33a0 <.L_err>
    337e:	9f 57       	subi	r25, 0x7F	; 127
    3380:	98 f0       	brcs	.+38     	; 0x33a8 <.L_zr>
    3382:	b9 2f       	mov	r27, r25
    3384:	99 27       	eor	r25, r25
    3386:	b7 51       	subi	r27, 0x17	; 23
    3388:	b0 f0       	brcs	.+44     	; 0x33b6 <.L4^B1>
    338a:	e1 f0       	breq	.+56     	; 0x33c4 <.L_sign>

0000338c <.L1^B1>:
    338c:	66 0f       	add	r22, r22
    338e:	77 1f       	adc	r23, r23
    3390:	88 1f       	adc	r24, r24
    3392:	99 1f       	adc	r25, r25
    3394:	1a f0       	brmi	.+6      	; 0x339c <.L2^B1>
    3396:	ba 95       	dec	r27
    3398:	c9 f7       	brne	.-14     	; 0x338c <.L1^B1>
    339a:	14 c0       	rjmp	.+40     	; 0x33c4 <.L_sign>

0000339c <.L2^B1>:
    339c:	b1 30       	cpi	r27, 0x01	; 1
    339e:	91 f0       	breq	.+36     	; 0x33c4 <.L_sign>

000033a0 <.L_err>:
    33a0:	0e 94 96 1a 	call	0x352c	; 0x352c <__fp_zero>
    33a4:	b1 e0       	ldi	r27, 0x01	; 1
    33a6:	08 95       	ret

000033a8 <.L_zr>:
    33a8:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__fp_zero>

000033ac <.L3^B1>:
    33ac:	67 2f       	mov	r22, r23
    33ae:	78 2f       	mov	r23, r24
    33b0:	88 27       	eor	r24, r24
    33b2:	b8 5f       	subi	r27, 0xF8	; 248
    33b4:	39 f0       	breq	.+14     	; 0x33c4 <.L_sign>

000033b6 <.L4^B1>:
    33b6:	b9 3f       	cpi	r27, 0xF9	; 249
    33b8:	cc f3       	brlt	.-14     	; 0x33ac <.L3^B1>

000033ba <.L5^B1>:
    33ba:	86 95       	lsr	r24
    33bc:	77 95       	ror	r23
    33be:	67 95       	ror	r22
    33c0:	b3 95       	inc	r27
    33c2:	d9 f7       	brne	.-10     	; 0x33ba <.L5^B1>

000033c4 <.L_sign>:
    33c4:	3e f4       	brtc	.+14     	; 0x33d4 <.L6^B1>
    33c6:	90 95       	com	r25
    33c8:	80 95       	com	r24
    33ca:	70 95       	com	r23
    33cc:	61 95       	neg	r22
    33ce:	7f 4f       	sbci	r23, 0xFF	; 255
    33d0:	8f 4f       	sbci	r24, 0xFF	; 255
    33d2:	9f 4f       	sbci	r25, 0xFF	; 255

000033d4 <.L6^B1>:
    33d4:	08 95       	ret

000033d6 <__floatunsisf>:
    33d6:	e8 94       	clt
    33d8:	09 c0       	rjmp	.+18     	; 0x33ec <.L1^B1>

000033da <__floatsisf>:
    33da:	97 fb       	bst	r25, 7
    33dc:	3e f4       	brtc	.+14     	; 0x33ec <.L1^B1>
    33de:	90 95       	com	r25
    33e0:	80 95       	com	r24
    33e2:	70 95       	com	r23
    33e4:	61 95       	neg	r22
    33e6:	7f 4f       	sbci	r23, 0xFF	; 255
    33e8:	8f 4f       	sbci	r24, 0xFF	; 255
    33ea:	9f 4f       	sbci	r25, 0xFF	; 255

000033ec <.L1^B1>:
    33ec:	99 23       	and	r25, r25
    33ee:	a9 f0       	breq	.+42     	; 0x341a <.L4^B1>
    33f0:	f9 2f       	mov	r31, r25
    33f2:	96 e9       	ldi	r25, 0x96	; 150
    33f4:	bb 27       	eor	r27, r27

000033f6 <.L2^B1>:
    33f6:	93 95       	inc	r25
    33f8:	f6 95       	lsr	r31
    33fa:	87 95       	ror	r24
    33fc:	77 95       	ror	r23
    33fe:	67 95       	ror	r22
    3400:	b7 95       	ror	r27
    3402:	f1 11       	cpse	r31, r1
    3404:	f8 cf       	rjmp	.-16     	; 0x33f6 <.L2^B1>
    3406:	fa f4       	brpl	.+62     	; 0x3446 <.L_pack>
    3408:	bb 0f       	add	r27, r27
    340a:	11 f4       	brne	.+4      	; 0x3410 <.L3^B1>
    340c:	60 ff       	sbrs	r22, 0
    340e:	1b c0       	rjmp	.+54     	; 0x3446 <.L_pack>

00003410 <.L3^B1>:
    3410:	6f 5f       	subi	r22, 0xFF	; 255
    3412:	7f 4f       	sbci	r23, 0xFF	; 255
    3414:	8f 4f       	sbci	r24, 0xFF	; 255
    3416:	9f 4f       	sbci	r25, 0xFF	; 255
    3418:	16 c0       	rjmp	.+44     	; 0x3446 <.L_pack>

0000341a <.L4^B1>:
    341a:	88 23       	and	r24, r24
    341c:	11 f0       	breq	.+4      	; 0x3422 <.L5^B1>
    341e:	96 e9       	ldi	r25, 0x96	; 150
    3420:	11 c0       	rjmp	.+34     	; 0x3444 <.L8^B1>

00003422 <.L5^B1>:
    3422:	77 23       	and	r23, r23
    3424:	21 f0       	breq	.+8      	; 0x342e <.L6^B1>
    3426:	9e e8       	ldi	r25, 0x8E	; 142
    3428:	87 2f       	mov	r24, r23
    342a:	76 2f       	mov	r23, r22
    342c:	05 c0       	rjmp	.+10     	; 0x3438 <.L7^B1>

0000342e <.L6^B1>:
    342e:	66 23       	and	r22, r22
    3430:	71 f0       	breq	.+28     	; 0x344e <.L9^B1>
    3432:	96 e8       	ldi	r25, 0x86	; 134
    3434:	86 2f       	mov	r24, r22
    3436:	70 e0       	ldi	r23, 0x00	; 0

00003438 <.L7^B1>:
    3438:	60 e0       	ldi	r22, 0x00	; 0
    343a:	2a f0       	brmi	.+10     	; 0x3446 <.L_pack>

0000343c <.L10^B1>:
    343c:	9a 95       	dec	r25
    343e:	66 0f       	add	r22, r22
    3440:	77 1f       	adc	r23, r23
    3442:	88 1f       	adc	r24, r24

00003444 <.L8^B1>:
    3444:	da f7       	brpl	.-10     	; 0x343c <.L10^B1>

00003446 <.L_pack>:
    3446:	88 0f       	add	r24, r24
    3448:	96 95       	lsr	r25
    344a:	87 95       	ror	r24
    344c:	97 f9       	bld	r25, 7

0000344e <.L9^B1>:
    344e:	08 95       	ret

00003450 <__fp_cmp>:
    3450:	99 0f       	add	r25, r25
    3452:	00 08       	sbc	r0, r0
    3454:	55 0f       	add	r21, r21
    3456:	aa 0b       	sbc	r26, r26
    3458:	e0 e8       	ldi	r30, 0x80	; 128
    345a:	fe ef       	ldi	r31, 0xFE	; 254
    345c:	16 16       	cp	r1, r22
    345e:	17 06       	cpc	r1, r23
    3460:	e8 07       	cpc	r30, r24
    3462:	f9 07       	cpc	r31, r25
    3464:	c0 f0       	brcs	.+48     	; 0x3496 <.L9^B1>
    3466:	12 16       	cp	r1, r18
    3468:	13 06       	cpc	r1, r19
    346a:	e4 07       	cpc	r30, r20
    346c:	f5 07       	cpc	r31, r21
    346e:	98 f0       	brcs	.+38     	; 0x3496 <.L9^B1>
    3470:	62 1b       	sub	r22, r18
    3472:	73 0b       	sbc	r23, r19
    3474:	84 0b       	sbc	r24, r20
    3476:	95 0b       	sbc	r25, r21
    3478:	39 f4       	brne	.+14     	; 0x3488 <.L1^B1>
    347a:	0a 26       	eor	r0, r26
    347c:	61 f0       	breq	.+24     	; 0x3496 <.L9^B1>
    347e:	23 2b       	or	r18, r19
    3480:	24 2b       	or	r18, r20
    3482:	25 2b       	or	r18, r21
    3484:	21 f4       	brne	.+8      	; 0x348e <.L2^B1>
    3486:	08 95       	ret

00003488 <.L1^B1>:
    3488:	0a 26       	eor	r0, r26
    348a:	09 f4       	brne	.+2      	; 0x348e <.L2^B1>
    348c:	a1 40       	sbci	r26, 0x01	; 1

0000348e <.L2^B1>:
    348e:	a6 95       	lsr	r26
    3490:	8f ef       	ldi	r24, 0xFF	; 255
    3492:	81 1d       	adc	r24, r1
    3494:	81 1d       	adc	r24, r1

00003496 <.L9^B1>:
    3496:	08 95       	ret

00003498 <__fp_inf>:
    3498:	97 f9       	bld	r25, 7
    349a:	9f 67       	ori	r25, 0x7F	; 127
    349c:	80 e8       	ldi	r24, 0x80	; 128
    349e:	70 e0       	ldi	r23, 0x00	; 0
    34a0:	60 e0       	ldi	r22, 0x00	; 0
    34a2:	08 95       	ret

000034a4 <__fp_nan>:
    34a4:	9f ef       	ldi	r25, 0xFF	; 255
    34a6:	80 ec       	ldi	r24, 0xC0	; 192
    34a8:	08 95       	ret

000034aa <__fp_pscA>:
    34aa:	00 24       	eor	r0, r0
    34ac:	0a 94       	dec	r0
    34ae:	16 16       	cp	r1, r22
    34b0:	17 06       	cpc	r1, r23
    34b2:	18 06       	cpc	r1, r24
    34b4:	09 06       	cpc	r0, r25
    34b6:	08 95       	ret

000034b8 <__fp_pscB>:
    34b8:	00 24       	eor	r0, r0
    34ba:	0a 94       	dec	r0
    34bc:	12 16       	cp	r1, r18
    34be:	13 06       	cpc	r1, r19
    34c0:	14 06       	cpc	r1, r20
    34c2:	05 06       	cpc	r0, r21
    34c4:	08 95       	ret

000034c6 <__fp_round>:
    34c6:	09 2e       	mov	r0, r25
    34c8:	03 94       	inc	r0
    34ca:	00 0c       	add	r0, r0
    34cc:	11 f4       	brne	.+4      	; 0x34d2 <.L1^B1>
    34ce:	88 23       	and	r24, r24
    34d0:	52 f0       	brmi	.+20     	; 0x34e6 <.L3^B1>

000034d2 <.L1^B1>:
    34d2:	bb 0f       	add	r27, r27
    34d4:	40 f4       	brcc	.+16     	; 0x34e6 <.L3^B1>
    34d6:	bf 2b       	or	r27, r31
    34d8:	11 f4       	brne	.+4      	; 0x34de <.L2^B1>
    34da:	60 ff       	sbrs	r22, 0
    34dc:	04 c0       	rjmp	.+8      	; 0x34e6 <.L3^B1>

000034de <.L2^B1>:
    34de:	6f 5f       	subi	r22, 0xFF	; 255
    34e0:	7f 4f       	sbci	r23, 0xFF	; 255
    34e2:	8f 4f       	sbci	r24, 0xFF	; 255
    34e4:	9f 4f       	sbci	r25, 0xFF	; 255

000034e6 <.L3^B1>:
    34e6:	08 95       	ret

000034e8 <__fp_split3>:
    34e8:	57 fd       	sbrc	r21, 7
    34ea:	90 58       	subi	r25, 0x80	; 128
    34ec:	44 0f       	add	r20, r20
    34ee:	55 1f       	adc	r21, r21
    34f0:	59 f0       	breq	.+22     	; 0x3508 <.L4^B1>
    34f2:	5f 3f       	cpi	r21, 0xFF	; 255
    34f4:	71 f0       	breq	.+28     	; 0x3512 <.L5^B1>

000034f6 <.L1^B1>:
    34f6:	47 95       	ror	r20

000034f8 <__fp_splitA>:
    34f8:	88 0f       	add	r24, r24
    34fa:	97 fb       	bst	r25, 7
    34fc:	99 1f       	adc	r25, r25
    34fe:	61 f0       	breq	.+24     	; 0x3518 <.L6^B1>
    3500:	9f 3f       	cpi	r25, 0xFF	; 255
    3502:	79 f0       	breq	.+30     	; 0x3522 <.L7^B1>

00003504 <.L3^B1>:
    3504:	87 95       	ror	r24
    3506:	08 95       	ret

00003508 <.L4^B1>:
    3508:	12 16       	cp	r1, r18
    350a:	13 06       	cpc	r1, r19
    350c:	14 06       	cpc	r1, r20
    350e:	55 1f       	adc	r21, r21
    3510:	f2 cf       	rjmp	.-28     	; 0x34f6 <.L1^B1>

00003512 <.L5^B1>:
    3512:	46 95       	lsr	r20
    3514:	f1 df       	rcall	.-30     	; 0x34f8 <__fp_splitA>
    3516:	08 c0       	rjmp	.+16     	; 0x3528 <.L8^B1>

00003518 <.L6^B1>:
    3518:	16 16       	cp	r1, r22
    351a:	17 06       	cpc	r1, r23
    351c:	18 06       	cpc	r1, r24
    351e:	99 1f       	adc	r25, r25
    3520:	f1 cf       	rjmp	.-30     	; 0x3504 <.L3^B1>

00003522 <.L7^B1>:
    3522:	86 95       	lsr	r24
    3524:	71 05       	cpc	r23, r1
    3526:	61 05       	cpc	r22, r1

00003528 <.L8^B1>:
    3528:	08 94       	sec
    352a:	08 95       	ret

0000352c <__fp_zero>:
    352c:	e8 94       	clt

0000352e <__fp_szero>:
    352e:	bb 27       	eor	r27, r27
    3530:	66 27       	eor	r22, r22
    3532:	77 27       	eor	r23, r23
    3534:	cb 01       	movw	r24, r22
    3536:	97 f9       	bld	r25, 7
    3538:	08 95       	ret

0000353a <__gesf2>:
    353a:	0e 94 28 1a 	call	0x3450	; 0x3450 <__fp_cmp>
    353e:	08 f4       	brcc	.+2      	; 0x3542 <.L1^B1>
    3540:	8f ef       	ldi	r24, 0xFF	; 255

00003542 <.L1^B1>:
    3542:	08 95       	ret

00003544 <__mulsf3>:
    3544:	0e 94 b5 1a 	call	0x356a	; 0x356a <__mulsf3x>
    3548:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__fp_round>

0000354c <.L0^B1>:
    354c:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__fp_pscA>
    3550:	38 f0       	brcs	.+14     	; 0x3560 <.L1^B1>
    3552:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__fp_pscB>
    3556:	20 f0       	brcs	.+8      	; 0x3560 <.L1^B1>
    3558:	95 23       	and	r25, r21
    355a:	11 f0       	breq	.+4      	; 0x3560 <.L1^B1>
    355c:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_inf>

00003560 <.L1^B1>:
    3560:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__fp_nan>

00003564 <.L2^B1>:
    3564:	11 24       	eor	r1, r1
    3566:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__fp_szero>

0000356a <__mulsf3x>:
    356a:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__fp_split3>
    356e:	70 f3       	brcs	.-36     	; 0x354c <.L0^B1>

00003570 <__mulsf3_pse>:
    3570:	95 9f       	mul	r25, r21
    3572:	c1 f3       	breq	.-16     	; 0x3564 <.L2^B1>
    3574:	95 0f       	add	r25, r21
    3576:	50 e0       	ldi	r21, 0x00	; 0
    3578:	55 1f       	adc	r21, r21
    357a:	62 9f       	mul	r22, r18
    357c:	f0 01       	movw	r30, r0
    357e:	72 9f       	mul	r23, r18
    3580:	bb 27       	eor	r27, r27
    3582:	f0 0d       	add	r31, r0
    3584:	b1 1d       	adc	r27, r1
    3586:	63 9f       	mul	r22, r19
    3588:	aa 27       	eor	r26, r26
    358a:	f0 0d       	add	r31, r0
    358c:	b1 1d       	adc	r27, r1
    358e:	aa 1f       	adc	r26, r26
    3590:	64 9f       	mul	r22, r20
    3592:	66 27       	eor	r22, r22
    3594:	b0 0d       	add	r27, r0
    3596:	a1 1d       	adc	r26, r1
    3598:	66 1f       	adc	r22, r22
    359a:	82 9f       	mul	r24, r18
    359c:	22 27       	eor	r18, r18
    359e:	b0 0d       	add	r27, r0
    35a0:	a1 1d       	adc	r26, r1
    35a2:	62 1f       	adc	r22, r18
    35a4:	73 9f       	mul	r23, r19
    35a6:	b0 0d       	add	r27, r0
    35a8:	a1 1d       	adc	r26, r1
    35aa:	62 1f       	adc	r22, r18
    35ac:	83 9f       	mul	r24, r19
    35ae:	a0 0d       	add	r26, r0
    35b0:	61 1d       	adc	r22, r1
    35b2:	22 1f       	adc	r18, r18
    35b4:	74 9f       	mul	r23, r20
    35b6:	33 27       	eor	r19, r19
    35b8:	a0 0d       	add	r26, r0
    35ba:	61 1d       	adc	r22, r1
    35bc:	23 1f       	adc	r18, r19
    35be:	84 9f       	mul	r24, r20
    35c0:	60 0d       	add	r22, r0
    35c2:	21 1d       	adc	r18, r1
    35c4:	82 2f       	mov	r24, r18
    35c6:	76 2f       	mov	r23, r22
    35c8:	6a 2f       	mov	r22, r26
    35ca:	11 24       	eor	r1, r1
    35cc:	9f 57       	subi	r25, 0x7F	; 127
    35ce:	50 40       	sbci	r21, 0x00	; 0
    35d0:	9a f0       	brmi	.+38     	; 0x35f8 <.L13^B1>
    35d2:	f1 f0       	breq	.+60     	; 0x3610 <.L15^B1>

000035d4 <.L10^B1>:
    35d4:	88 23       	and	r24, r24
    35d6:	4a f0       	brmi	.+18     	; 0x35ea <.L11^B1>
    35d8:	ee 0f       	add	r30, r30
    35da:	ff 1f       	adc	r31, r31
    35dc:	bb 1f       	adc	r27, r27
    35de:	66 1f       	adc	r22, r22
    35e0:	77 1f       	adc	r23, r23
    35e2:	88 1f       	adc	r24, r24
    35e4:	91 50       	subi	r25, 0x01	; 1
    35e6:	50 40       	sbci	r21, 0x00	; 0
    35e8:	a9 f7       	brne	.-22     	; 0x35d4 <.L10^B1>

000035ea <.L11^B1>:
    35ea:	9e 3f       	cpi	r25, 0xFE	; 254
    35ec:	51 05       	cpc	r21, r1
    35ee:	80 f0       	brcs	.+32     	; 0x3610 <.L15^B1>
    35f0:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__fp_inf>

000035f4 <.L12^B1>:
    35f4:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__fp_szero>

000035f8 <.L13^B1>:
    35f8:	5f 3f       	cpi	r21, 0xFF	; 255
    35fa:	e4 f3       	brlt	.-8      	; 0x35f4 <.L12^B1>
    35fc:	98 3e       	cpi	r25, 0xE8	; 232
    35fe:	d4 f3       	brlt	.-12     	; 0x35f4 <.L12^B1>

00003600 <.L14^B1>:
    3600:	86 95       	lsr	r24
    3602:	77 95       	ror	r23
    3604:	67 95       	ror	r22
    3606:	b7 95       	ror	r27
    3608:	f7 95       	ror	r31
    360a:	e7 95       	ror	r30
    360c:	9f 5f       	subi	r25, 0xFF	; 255
    360e:	c1 f7       	brne	.-16     	; 0x3600 <.L14^B1>

00003610 <.L15^B1>:
    3610:	fe 2b       	or	r31, r30
    3612:	88 0f       	add	r24, r24
    3614:	91 1d       	adc	r25, r1
    3616:	96 95       	lsr	r25
    3618:	87 95       	ror	r24
    361a:	97 f9       	bld	r25, 7
    361c:	08 95       	ret

0000361e <memmove>:
    361e:	68 17       	cp	r22, r24
    3620:	79 07       	cpc	r23, r25
    3622:	68 f4       	brcc	.+26     	; 0x363e <.L_memmove_fwd>
    3624:	fb 01       	movw	r30, r22
    3626:	dc 01       	movw	r26, r24
    3628:	e4 0f       	add	r30, r20
    362a:	f5 1f       	adc	r31, r21
    362c:	a4 0f       	add	r26, r20
    362e:	b5 1f       	adc	r27, r21
    3630:	02 c0       	rjmp	.+4      	; 0x3636 <.L_memmove_start>

00003632 <.L_memmove_loop>:
    3632:	02 90       	ld	r0, -Z
    3634:	0e 92       	st	-X, r0

00003636 <.L_memmove_start>:
    3636:	41 50       	subi	r20, 0x01	; 1
    3638:	50 40       	sbci	r21, 0x00	; 0
    363a:	d8 f7       	brcc	.-10     	; 0x3632 <.L_memmove_loop>
    363c:	08 95       	ret

0000363e <.L_memmove_fwd>:
    363e:	0c 94 30 1b 	jmp	0x3660	; 0x3660 <memcpy>

00003642 <strncpy>:
    3642:	fb 01       	movw	r30, r22
    3644:	dc 01       	movw	r26, r24

00003646 <.L_strncpy_loop>:
    3646:	41 50       	subi	r20, 0x01	; 1
    3648:	50 40       	sbci	r21, 0x00	; 0
    364a:	48 f0       	brcs	.+18     	; 0x365e <.L_strncpy_done>
    364c:	01 90       	ld	r0, Z+
    364e:	0d 92       	st	X+, r0
    3650:	00 20       	and	r0, r0
    3652:	c9 f7       	brne	.-14     	; 0x3646 <.L_strncpy_loop>
    3654:	01 c0       	rjmp	.+2      	; 0x3658 <.L_strncpy_clr_start>

00003656 <.L_strncpy_clr_loop>:
    3656:	1d 92       	st	X+, r1

00003658 <.L_strncpy_clr_start>:
    3658:	41 50       	subi	r20, 0x01	; 1
    365a:	50 40       	sbci	r21, 0x00	; 0
    365c:	e0 f7       	brcc	.-8      	; 0x3656 <.L_strncpy_clr_loop>

0000365e <.L_strncpy_done>:
    365e:	08 95       	ret

00003660 <memcpy>:
    3660:	fb 01       	movw	r30, r22
    3662:	dc 01       	movw	r26, r24
    3664:	02 c0       	rjmp	.+4      	; 0x366a <.L_memcpy_start>

00003666 <.L_memcpy_loop>:
    3666:	01 90       	ld	r0, Z+
    3668:	0d 92       	st	X+, r0

0000366a <.L_memcpy_start>:
    366a:	41 50       	subi	r20, 0x01	; 1
    366c:	50 40       	sbci	r21, 0x00	; 0
    366e:	d8 f7       	brcc	.-10     	; 0x3666 <.L_memcpy_loop>
    3670:	08 95       	ret

00003672 <eeprom_read_block>:
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22

00003676 <eeprom_read_blraw>:
    3676:	fc 01       	movw	r30, r24

00003678 <.L1^B1>:
    3678:	e1 99       	sbic	0x1c, 1	; 28
    367a:	fe cf       	rjmp	.-4      	; 0x3678 <.L1^B1>
    367c:	06 c0       	rjmp	.+12     	; 0x368a <.L3^B1>

0000367e <.L2^B1>:
    367e:	ff bb       	out	0x1f, r31	; 31
    3680:	ee bb       	out	0x1e, r30	; 30
    3682:	e0 9a       	sbi	0x1c, 0	; 28
    3684:	31 96       	adiw	r30, 0x01	; 1
    3686:	0d b2       	in	r0, 0x1d	; 29
    3688:	0d 92       	st	X+, r0

0000368a <.L3^B1>:
    368a:	41 50       	subi	r20, 0x01	; 1
    368c:	50 40       	sbci	r21, 0x00	; 0
    368e:	b8 f7       	brcc	.-18     	; 0x367e <.L2^B1>
    3690:	08 95       	ret

00003692 <eeprom_update_block>:
    3692:	dc 01       	movw	r26, r24
    3694:	a4 0f       	add	r26, r20
    3696:	b5 1f       	adc	r27, r21
    3698:	41 50       	subi	r20, 0x01	; 1
    369a:	50 40       	sbci	r21, 0x00	; 0
    369c:	48 f0       	brcs	.+18     	; 0x36b0 <.L3^B1>
    369e:	cb 01       	movw	r24, r22
    36a0:	84 0f       	add	r24, r20
    36a2:	95 1f       	adc	r25, r21

000036a4 <.L1^B1>:
    36a4:	2e 91       	ld	r18, -X
    36a6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <eeprom_update_r18>
    36aa:	41 50       	subi	r20, 0x01	; 1
    36ac:	50 40       	sbci	r21, 0x00	; 0
    36ae:	d0 f7       	brcc	.-12     	; 0x36a4 <.L1^B1>

000036b0 <.L3^B1>:
    36b0:	08 95       	ret

000036b2 <eeprom_update_byte>:
    36b2:	26 2f       	mov	r18, r22

000036b4 <eeprom_update_r18>:
    36b4:	e1 99       	sbic	0x1c, 1	; 28
    36b6:	fe cf       	rjmp	.-4      	; 0x36b4 <eeprom_update_r18>
    36b8:	9f bb       	out	0x1f, r25	; 31
    36ba:	8e bb       	out	0x1e, r24	; 30
    36bc:	e0 9a       	sbi	0x1c, 0	; 28
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	0d b2       	in	r0, 0x1d	; 29
    36c2:	02 16       	cp	r0, r18
    36c4:	31 f0       	breq	.+12     	; 0x36d2 <.L2^B1>
    36c6:	2d bb       	out	0x1d, r18	; 29
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	e2 9a       	sbi	0x1c, 2	; 28
    36ce:	e1 9a       	sbi	0x1c, 1	; 28
    36d0:	0f be       	out	0x3f, r0	; 63

000036d2 <.L2^B1>:
    36d2:	08 95       	ret

000036d4 <_exit>:
    36d4:	f8 94       	cli

000036d6 <__stop_program>:
    36d6:	ff cf       	rjmp	.-2      	; 0x36d6 <__stop_program>
